// <auto-generated />
using System;
using FPLSP.Server.Data.FPLSPDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPLSP.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221208154505_ontooneconfigs")]
    partial class ontooneconfigs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.Cabin.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentOfFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeedBackTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("FeedBackTime");

                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfFeedBack")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfFeedBack");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdStudent");

                    b.HasIndex("SubjectId", "ClassId");

                    b.ToTable("FeedBack", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.Cabin.FeedBackOutSide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentOfFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedBackOutSide", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfBlock")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfBlock");

                    b.Property<string>("NameOfBlock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameOfBlock");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Block", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.BookingCabin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCabin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdShift")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CheckinImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("CheckinImage");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CheckinTime");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CheckoutTime");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdLectuter")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLectuter");

                    b.Property<int>("IndexOfBookingCabin")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfBookingCabin");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id", "SubjectId", "ClassId", "IdCabin", "IdShift");

                    b.HasIndex("IdCabin");

                    b.HasIndex("IdShift");

                    b.HasIndex("SubjectId", "ClassId");

                    b.ToTable("BookingCabin", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.BookingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContenOfFeedBack")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContenOfFeedBack");

                    b.Property<string>("ContentOfRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContentOfRequest");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<DateTime>("FeedBackTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("FeedBackTime");

                    b.Property<Guid>("IdLectuter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfBookingRequest")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfBookingRequest");

                    b.Property<DateTime>("SendingTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("SendingTime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClassId");

                    b.ToTable("BookingRequest", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Cabin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BuildingName");

                    b.Property<string>("CabinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CabinName");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateTime");

                    b.Property<Guid>("IdTrainingFacility")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfCabin")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfCabin");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdTrainingFacility");

                    b.ToTable("Cabin", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.GroupCabin", b =>
                {
                    b.Property<Guid>("IdCabin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSpec")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfGrouping")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfGrouping");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<string>("GroupCabinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupCabinName");

                    b.Property<int>("IndexOfGroupCabin")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfGroupCabin");

                    b.Property<Guid?>("SpecializedSubjectUPSpecializedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecializedSubjectUPSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("IdCabin", "IdSpec");

                    b.HasIndex("IdSpec");

                    b.HasIndex("SpecializedSubjectUPSpecializedId", "SpecializedSubjectUPSubjectId");

                    b.ToTable("GroupCabin", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfSemester")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfSemester");

                    b.Property<string>("NameofSemester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameofSemester");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.SemesterBlock", b =>
                {
                    b.Property<Guid>("IdBlock")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSemester")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("date")
                        .HasColumnName("EndTime");

                    b.Property<int>("IndexOfSemesterBlock")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfSemesterBlock");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("date")
                        .HasColumnName("StartTime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("IdBlock", "IdSemester");

                    b.HasIndex("IdSemester");

                    b.ToTable("SemesterBlock", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("EndTime");

                    b.Property<int>("IndexOfShift")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfShift");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ShiftName");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("StartTime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("ShiftOfCabin", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.TeachingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAdminImport")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdAdminImport");

                    b.Property<Guid>("IdBlock")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLecturter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSemester")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdShift")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTrainingFacility")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ImportTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ImportTime");

                    b.Property<int>("IndexOfTeachingSchedule")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfTeachingSchedule");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("Remote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remote");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TeachingDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdLecturter");

                    b.HasIndex("IdShift");

                    b.HasIndex("IdTrainingFacility");

                    b.HasIndex("IdBlock", "IdSemester");

                    b.HasIndex("SubjectId", "ClassId");

                    b.ToTable("TeachingSchedule", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ContentOfExamCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CoeCode");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Content");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateStarted")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateStarted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndDate");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("QuestionType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QuestionType");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TotalOfQuestions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TotalOfQuestions");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ContentOfExamCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CoeCode = "ASSDE101",
                            Content = "Nopeer",
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5399), new TimeSpan(0, 7, 0, 0, 0)),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateStarted = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5424), new TimeSpan(0, 7, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDate = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5426), new TimeSpan(0, 7, 0, 0, 0)),
                            ExamId = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            IsDeleted = false,
                            Level = 2,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            QuestionType = 2,
                            Status = 1,
                            TotalOfQuestions = 50
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CoeCode = "ASSDE101",
                            Content = "Nopeer",
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5432), new TimeSpan(0, 7, 0, 0, 0)),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateStarted = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5434), new TimeSpan(0, 7, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDate = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5435), new TimeSpan(0, 7, 0, 0, 0)),
                            ExamId = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            IsDeleted = false,
                            Level = 2,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            QuestionType = 2,
                            Status = 1,
                            TotalOfQuestions = 50
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CoeCode = "ASSDE101",
                            Content = "Nopeer",
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5439), new TimeSpan(0, 7, 0, 0, 0)),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateStarted = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5440), new TimeSpan(0, 7, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDate = new DateTimeOffset(new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Unspecified).AddTicks(5453), new TimeSpan(0, 7, 0, 0, 0)),
                            ExamId = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            IsDeleted = false,
                            Level = 2,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            QuestionType = 2,
                            Status = 1,
                            TotalOfQuestions = 50
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ExamCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ExamCode");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ExamName");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("ExamCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ExamCode = "ASS0",
                            ExamName = "FinalUDPM",
                            Status = 1,
                            SubjectId = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479")
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ExamCode = "ASS1",
                            ExamName = "FinalTKDK",
                            Status = 1,
                            SubjectId = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479")
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ExamCode = "ASS2",
                            ExamName = "FinalMOBILE",
                            Status = 1,
                            SubjectId = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479")
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ExamLinkCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDay");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamLinkCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ExamLinkCode");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpirationDate");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Path");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamLinkCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5014),
                            ExamId = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ExamLinkCode = "ASS2020",
                            ExpirationDate = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5016),
                            Path = "Https://thuyen.com.vn",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5046),
                            ExamId = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ExamLinkCode = "ASS2020",
                            ExpirationDate = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5046),
                            Path = "Https://thuyen.com.vn",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5190),
                            ExamId = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ExamLinkCode = "ASS2020",
                            ExpirationDate = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5191),
                            Path = "Https://thuyen.com.vn",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ImageCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoeId")
                        .HasMaxLength(10)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CoeId");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Descriptions");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Path");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CoeId");

                    b.ToTable("ImageCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.KindoOfQuestionCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionForm")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("QuestionTypeName");

                    b.HasKey("Id");

                    b.ToTable("KindoOfQuestionCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LecturersCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<string>("Ethnic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ethnic");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("Gender");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HomeTown");

                    b.Property<string>("IdentityCard")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("IdentityCard");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("IssuedOn");

                    b.Property<string>("LecturersCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LecturersCode");

                    b.Property<string>("LecturersName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LecturersName");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("PassWord");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid?>("TrainingFacilitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int")
                        .HasColumnName("YearsOfExperience");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TrainingFacilitiesId");

                    b.ToTable("Lecturers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Address = "Bac Giang",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dep Trai Nhat Viet Nam",
                            Dob = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(4935),
                            Email = "leanthuyen.working@gmail.com",
                            Ethnic = "Kinh",
                            Gender = true,
                            HomeTown = "Bac Giang",
                            IdentityCard = "9102012",
                            ImageUrl = "IMG_3545.PNG",
                            IsDeleted = false,
                            IssuedOn = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(4953),
                            LecturersCode = "GV1",
                            LecturersName = "Le An Thuyen",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PassWord = "thuyen123",
                            PhoneNumber = "0129120012",
                            RoleId = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Status = 0,
                            TrainingFacilitiesId = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Address = "Bac Giang",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dep Trai Nhat Viet Nam",
                            Dob = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(4963),
                            Email = "leanthuyen.working@gmail.com",
                            Ethnic = "Kinh",
                            Gender = true,
                            HomeTown = "Bac Giang",
                            IdentityCard = "9102012",
                            ImageUrl = "IMG_3545.PNG",
                            IsDeleted = false,
                            IssuedOn = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(4965),
                            LecturersCode = "GV2",
                            LecturersName = "Le An Thuyen",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PassWord = "thuyen123",
                            PhoneNumber = "0129120012",
                            RoleId = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Status = 0,
                            TrainingFacilitiesId = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Address = "Bac Giang",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dep Trai Nhat Viet Nam",
                            Dob = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(4968),
                            Email = "leanthuyen.working@gmail.com",
                            Ethnic = "Kinh",
                            Gender = true,
                            HomeTown = "Bac Giang",
                            IdentityCard = "9102012",
                            ImageUrl = "IMG_3545.PNG",
                            IsDeleted = false,
                            IssuedOn = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(4969),
                            LecturersCode = "GV3",
                            LecturersName = "Le An Thuyen",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PassWord = "thuyen123",
                            PhoneNumber = "0129120012",
                            RoleId = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Status = 0,
                            TrainingFacilitiesId = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            YearsOfExperience = 3
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LectuterSpecializedCP", b =>
                {
                    b.Property<Guid?>("SpecializedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LectuterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("SpecializedId", "LectuterId");

                    b.HasIndex("LectuterId");

                    b.ToTable("LectuterSpecializedCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LessonContentCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Descriptions");

                    b.Property<Guid?>("IdLesson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfLessonContent")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonContentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LessonContentCode");

                    b.Property<string>("LessonContentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonContentName");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ResourceLinkId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdLesson");

                    b.HasIndex("ResourceLinkId");

                    b.ToTable("LessonContentCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LessonCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Descriptions");

                    b.Property<int>("IndexOfLesson")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LessonCode");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonName");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("LessonCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizAnswerCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Answer");

                    b.Property<Guid>("IdQuizQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("IsCorrect");

                    b.HasKey("Id");

                    b.HasIndex("IdQuizQuestion");

                    b.ToTable("QuizAnswerCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Descriptions");

                    b.Property<DateTimeOffset>("EndDay")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndDay");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTurn")
                        .HasColumnType("int")
                        .HasColumnName("MaxTurn");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QuizName");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDay")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDay");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("QuizCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizQuestionCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KindoOfQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("QuestionCode");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("QuestionName");

                    b.Property<string>("QuestionTital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("KindoOfQuestionId");

                    b.ToTable("QuizQuestionCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizQuestionQuizCP", b =>
                {
                    b.Property<Guid?>("QuizQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("QuizQuestionId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestionQuizCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ResourceLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateCreated");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Descriptions");

                    b.Property<Guid>("IdSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfVideo")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Path");

                    b.Property<string>("ResourcesTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("ResourceLinkCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.RoleCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("CV0")
                        .HasColumnName("RoleCode");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("SinhVien")
                        .HasColumnName("RoleName");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("RoleCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            RoleCode = "CV0",
                            RoleName = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            RoleCode = "CV1",
                            RoleName = "GiangVien",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            RoleCode = "CV2",
                            RoleName = "Sinh Vien",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.SpecializedCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IdSpeciality")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdSpeciality");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SpecializationName");

                    b.Property<string>("SpecializedCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .HasColumnName("SpecializedCode");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("SpecializedCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IdSpeciality = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Image = "OKE.PNG",
                            IsDeleted = false,
                            Level = 0,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SpecializationName = "UDPM",
                            SpecializedCode = "CN0",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IdSpeciality = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Image = "OKE.PNG",
                            IsDeleted = false,
                            Level = 0,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SpecializationName = "TKDH",
                            SpecializedCode = "CN1",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IdSpeciality = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Image = "OKE.PNG",
                            IsDeleted = false,
                            Level = 0,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SpecializationName = "MOBILE",
                            SpecializedCode = "CN2",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.SpecializedSubjectCP", b =>
                {
                    b.Property<Guid?>("SpecializedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("SpecializedId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SpecializedSubjectCP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.StudentCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<string>("Ethnic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ethnic");

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FathersName");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("Gender");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HomeTown");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("IdentityCardNumber");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("IssuedOn");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MotherName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("StudentCode");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StudentName");

                    b.Property<Guid?>("TrainingFacilitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainingFacilitiesId");

                    b.ToTable("StudentCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Address = "tan hung",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5517),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dep trai",
                            Email = "thuyen@gmail.com",
                            Ethnic = "Kinh",
                            FathersName = "jhahahahah",
                            Gender = true,
                            HomeTown = "Bac Giang",
                            IdentityCardNumber = "12912122",
                            ImageUrl = "IMG_122781.PNG",
                            IsDeleted = false,
                            IssuedOn = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5519),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MotherName = "Nopeer",
                            Password = "aaa",
                            PhoneNumber = "912001201",
                            Status = 1,
                            StudentCode = "PH127812",
                            StudentName = "Thuyen Le An",
                            TrainingFacilitiesId = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479")
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Address = "tan hung",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5525),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dep trai",
                            Email = "thuyen@gmail.com",
                            Ethnic = "Kinh",
                            FathersName = "jhahahahah",
                            Gender = true,
                            HomeTown = "Bac Giang",
                            IdentityCardNumber = "12912122",
                            ImageUrl = "IMG_122781.PNG",
                            IsDeleted = false,
                            IssuedOn = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5527),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MotherName = "Nopeer",
                            Password = "aaa",
                            PhoneNumber = "912001201",
                            Status = 1,
                            StudentCode = "PH127812",
                            StudentName = "Thuyen Le An",
                            TrainingFacilitiesId = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479")
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            Address = "tan hung",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5531),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dep trai",
                            Email = "thuyen@gmail.com",
                            Ethnic = "Kinh",
                            FathersName = "jhahahahah",
                            Gender = true,
                            HomeTown = "Bac Giang",
                            IdentityCardNumber = "12912122",
                            ImageUrl = "IMG_122781.PNG",
                            IsDeleted = false,
                            IssuedOn = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5532),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MotherName = "Nopeer",
                            Password = "aaa",
                            PhoneNumber = "912001201",
                            Status = 1,
                            StudentCode = "PH127812",
                            StudentName = "Thuyen Le An",
                            TrainingFacilitiesId = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479")
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.SubjectCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDay");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDay");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDay");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SubjectCode");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SubjectName");

                    b.Property<int>("TotalOfSub")
                        .HasColumnType("int")
                        .HasColumnName("TotalOfSub");

                    b.HasKey("Id");

                    b.ToTable("SubjectCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5341),
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5340),
                            Image = "IMG_3545.PNG",
                            IsDeleted = false,
                            IsDemo = false,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5338),
                            Status = 1,
                            SubjectCode = "SUB101",
                            SubjectName = "CSharp",
                            TotalOfSub = 16
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5345),
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5344),
                            Image = "IMG_3545.PNG",
                            IsDeleted = false,
                            IsDemo = false,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5344),
                            Status = 1,
                            SubjectCode = "SUB101",
                            SubjectName = "CSharp",
                            TotalOfSub = 16
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            CreatedDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5348),
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5348),
                            Image = "IMG_3545.PNG",
                            IsDeleted = false,
                            IsDemo = false,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDay = new DateTime(2022, 12, 8, 22, 45, 4, 151, DateTimeKind.Local).AddTicks(5347),
                            Status = 1,
                            SubjectCode = "SUB101",
                            SubjectName = "CSharp",
                            TotalOfSub = 16
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ImageUrl");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("TrainingFacilitiesCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TrainingFacilitiesCode");

                    b.Property<int>("TrainingInstitution")
                        .HasColumnType("int");

                    b.Property<string>("TrainingInstitutionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TrainingInstitutionName");

                    b.HasKey("Id");

                    b.ToTable("TrainingFacilitiesCP", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("169a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ImageUrl = "IMG57812.PNG",
                            Status = 1,
                            TrainingFacilitiesCode = "CS0",
                            TrainingInstitution = 0,
                            TrainingInstitutionName = "Ha Noi"
                        },
                        new
                        {
                            Id = new Guid("269a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ImageUrl = "IMG57812.PNG",
                            Status = 1,
                            TrainingFacilitiesCode = "CS1",
                            TrainingInstitution = 0,
                            TrainingInstitutionName = "Da Nang"
                        },
                        new
                        {
                            Id = new Guid("369a0425-7e5a-4057-9748-32f1cf3c1479"),
                            ImageUrl = "IMG57812.PNG",
                            Status = 1,
                            TrainingFacilitiesCode = "CS2",
                            TrainingInstitution = 0,
                            TrainingInstitutionName = "Can Tho"
                        });
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdTrainingFacility")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdTrainingFacility");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("UserSignIn", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateTime");

                    b.Property<string>("ExaminationRoomName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExaminationRoomName");

                    b.Property<Guid>("IdTrainingFacility")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfExaminationRoom")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfExaminationRoom");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdTrainingFacility");

                    b.ToTable("ExaminationRoom", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoomDetail", b =>
                {
                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SecretKey");

                    b.Property<Guid>("IdExaminationRoom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdBlock")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSemester")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfExaminationRoomDetail")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfExaminationRoomDetail");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("SubjectUPId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SecretKey", "IdExaminationRoom");

                    b.HasIndex("IdExaminationRoom");

                    b.HasIndex("SubjectUPId");

                    b.HasIndex("IdBlock", "IdSemester");

                    b.ToTable("ExaminationRoomDetail", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExamStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateTime");

                    b.Property<DateTime>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ExamFile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ExamFile");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdExaminationRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                        .HasColumnName("IdExaminationRoom");

                    b.Property<string>("IdUserUpLoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IndexOfExamStorageFile")
                        .HasColumnType("int")
                        .HasColumnName("IndexOfExamStorageFile");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SecretKey");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalTimeOfExam")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUserUpLoad");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SecretKey", "IdExaminationRoom")
                        .IsUnique()
                        .HasFilter("[SecretKey] IS NOT NULL");

                    b.ToTable("ExamStorage", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.OnlineExamRoom", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("IdExaminationRoom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ChekinImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ChekinImage");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IndexOfStudent")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompletedExam")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdUser", "SecretKey", "IdExaminationRoom");

                    b.HasIndex("SecretKey", "IdExaminationRoom");

                    b.ToTable("OnlineExamRoom", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.SupervisorExamRoom", b =>
                {
                    b.Property<Guid>("IdLecturter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("IdExaminationRoom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMainSupervisor")
                        .HasColumnType("bit")
                        .HasColumnName("IsMainSupervisor");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("IdLecturter", "SecretKey", "IdExaminationRoom");

                    b.HasIndex("SecretKey", "IdExaminationRoom");

                    b.ToTable("SupervisorExamRoom", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.BookMarkClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBookMark")
                        .HasColumnType("bit")
                        .HasColumnName("IsBookMark");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdSubject", "IdClass");

                    b.ToTable("BookMarkClass", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.ClassUp", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Building");

                    b.Property<string>("ClassroomName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClassroomName");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("ClassUp", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.HomeWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdLesson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LinkHomeWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LinkHomeWork");

                    b.HasKey("Id");

                    b.HasIndex("IdLesson");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdSubject", "IdClass");

                    b.ToTable("HomeWork", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.LectuterSpecializedUP", b =>
                {
                    b.Property<Guid?>("SpecializedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LectuterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("SpecializedId", "LectuterId");

                    b.HasIndex("LectuterId");

                    b.ToTable("LectuterSpecializedUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CratedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CratedTime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdLesson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdTypeOfNewFeed")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("IdLesson");

                    b.HasIndex("IdTypeOfNewFeed");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdSubject", "IdClass");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.QuizQuestionQuizUP", b =>
                {
                    b.Property<Guid?>("QuizQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("QuizQuestionId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestionQuizUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.ReportClassUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Answer");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Describe");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Question");

                    b.Property<int>("ReportAmount")
                        .HasColumnType("int")
                        .HasColumnName("ReportAmount");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReportDate");

                    b.Property<int>("ReportLevel")
                        .HasColumnType("int")
                        .HasColumnName("ReportLevel");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ReportClassUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SpecializedSubjectUP", b =>
                {
                    b.Property<Guid?>("SpecializedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("SpecializedId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SpecializedSubjectUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.StudentClassUP", b =>
                {
                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JoinCodeAsign")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("JoinCodeAsign");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("StatusOfStudent")
                        .HasColumnType("int")
                        .HasColumnName("StatusOfStudent");

                    b.HasKey("StudentId", "ClassId", "JoinCodeAsign");

                    b.HasIndex("ClassId");

                    b.ToTable("StudentClassUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.StudentUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<string>("Ethnic")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ethnic");

                    b.Property<string>("FathersName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FathersName");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("Gender");

                    b.Property<string>("HomeTown")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HomeTown");

                    b.Property<string>("IdentityCardNumber")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("IdentityCardNumber");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("IssuedOn");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MotherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MotherName");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("StudentCode");

                    b.Property<string>("StudentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StudentName");

                    b.HasKey("Id");

                    b.ToTable("StudentUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", b =>
                {
                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HomeroomLecturer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HomeroomLecturer");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("JoinCode");

                    b.Property<Guid>("SpecializedOfClass")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SpecializedOfClass");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("StudentAmount")
                        .HasColumnType("int")
                        .HasColumnName("StudentAmount");

                    b.HasKey("SubjectId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("SubjectClassUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SubmitHomeWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<Guid>("IdClass")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLesson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartedDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("SubmitLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SubmitLink");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubmitTime");

                    b.Property<string>("Titile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLesson");

                    b.HasIndex("IdStudent");

                    b.HasIndex("IdSubject", "IdClass");

                    b.ToTable("SubmitHomeWork", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.TypeOfNewFeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("TypeOfNewFeed", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.VideoHistory", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLessonContent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBookMarked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBookMarked");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("TimeOfSaveHistory")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeOfSaveHistory");

                    b.Property<DateTime>("WatchedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("WatchedTime");

                    b.HasKey("IdStudent", "IdLessonContent");

                    b.HasIndex("IdLessonContent");

                    b.ToTable("VideoHistory", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.AnswerUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Answer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid?>("QuizQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("AnswerUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.LessonContentUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Content");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Descriptions");

                    b.Property<int>("IndexOfLessonContent")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonContentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LessonContentCode");

                    b.Property<string>("LessonContentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonContentName");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ResuorceLinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ResuorceLinkId");

                    b.ToTable("LessonContentUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.LessonUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Descriptions");

                    b.Property<int>("IndexOfLesson")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsCompleted");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LessonCode");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonName");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("LessonUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionForm")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionType", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuizQuestionUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("QuestionCode");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("QuestionName");

                    b.Property<string>("QuestionTital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuestionTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("QuestionUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuizUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Descriptions");

                    b.Property<DateTimeOffset>("EndDay")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndDay");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTurn")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("QuizName");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("QuizTitle");

                    b.Property<DateTimeOffset>("StartDay")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDay");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("QuizUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.ResourceLinkUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateCreated");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Descriptions");

                    b.Property<Guid>("IdSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexOfVideo")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResourcesUrl");

                    b.Property<string>("ResourcesTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResourcesTitle");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("ResourceLinkUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.SpecializedUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("SpecialityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SpecialityId");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SpecializationName");

                    b.Property<string>("SpecializedCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .HasColumnName("SpecializedCode");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("SpecializedUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.StudentQuizUP", b =>
                {
                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CounterTurn")
                        .HasColumnType("int");

                    b.Property<double>("ScoreQuizOfStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Score");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("StudentId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("StudentQuizUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDay");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDay");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDay");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SubjectCode");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SubjectName");

                    b.Property<int>("TotalOfSub")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TotalOfSub");

                    b.HasKey("Id");

                    b.ToTable("SubjectUP", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.TakeAnswerUP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TakeAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentId", "QuizId");

                    b.ToTable("TakeAnswerUP", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.Cabin.FeedBack", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.StudentUP", "StudentUP")
                        .WithMany("FeedBacks")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("FeedBacks")
                        .HasForeignKey("SubjectId", "ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentUP");

                    b.Navigation("SubjectClassUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.BookingCabin", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.Cabin", "Cabin")
                        .WithMany("BookingCabins")
                        .HasForeignKey("IdCabin")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.Shift", "Shift")
                        .WithMany("BookingCabins")
                        .HasForeignKey("IdShift")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("BookingCabins")
                        .HasForeignKey("SubjectId", "ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cabin");

                    b.Navigation("Shift");

                    b.Navigation("SubjectClassUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.BookingRequest", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("BookingRequests")
                        .HasForeignKey("SubjectId", "ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectClassUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Cabin", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", "TrainingFacilitiesCPs")
                        .WithMany("Cabins")
                        .HasForeignKey("IdTrainingFacility")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrainingFacilitiesCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.GroupCabin", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.Cabin", "Cabin")
                        .WithMany("GroupCabins")
                        .HasForeignKey("IdCabin")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SpecializedUP", "SpecializedUP")
                        .WithMany("GroupCabins")
                        .HasForeignKey("IdSpec")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SpecializedSubjectUP", null)
                        .WithMany("GroupCabins")
                        .HasForeignKey("SpecializedSubjectUPSpecializedId", "SpecializedSubjectUPSubjectId");

                    b.Navigation("Cabin");

                    b.Navigation("SpecializedUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.SemesterBlock", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.Block", "Block")
                        .WithMany("SemesterBlocks")
                        .HasForeignKey("IdBlock")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.Semester", "Semester")
                        .WithMany("SemesterBlocks")
                        .HasForeignKey("IdSemester")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.TeachingSchedule", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.LecturersCP", "LecturersCP")
                        .WithMany("TeachingSchedules")
                        .HasForeignKey("IdLecturter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.Shift", "Shift")
                        .WithMany("TeachingSchedules")
                        .HasForeignKey("IdShift")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", "TrainingFacilitiesCPs")
                        .WithMany("teachingSchedules")
                        .HasForeignKey("IdTrainingFacility")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.SemesterBlock", "SemesterBlock")
                        .WithMany("TeachingSchedules")
                        .HasForeignKey("IdBlock", "IdSemester")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("TeachingSchedules")
                        .HasForeignKey("SubjectId", "ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LecturersCP");

                    b.Navigation("SemesterBlock");

                    b.Navigation("Shift");

                    b.Navigation("SubjectClassUP");

                    b.Navigation("TrainingFacilitiesCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ContentOfExamCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.ExamCP", "ExamCP")
                        .WithMany("contentOfExamCPs")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExamCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ExamCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.SubjectCP", "subjectCP")
                        .WithMany("ExamCPs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("subjectCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ExamLinkCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.ExamCP", "examCP")
                        .WithMany("examLinkCPs")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("examCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ImageCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.ContentOfExamCP", "ContentOfExamCP")
                        .WithMany("ImageCPs")
                        .HasForeignKey("CoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentOfExamCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LecturersCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.RoleCP", "RoleCPs")
                        .WithMany("Lecturers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", "trainingFacilitiesCP")
                        .WithMany("lecturersCPs")
                        .HasForeignKey("TrainingFacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RoleCPs");

                    b.Navigation("trainingFacilitiesCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LectuterSpecializedCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.LecturersCP", "LecturersCP")
                        .WithMany("LectuterSpecializedCPs")
                        .HasForeignKey("LectuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.SpecializedCP", "SpecializedCP")
                        .WithMany("LectuterSpecializedCPs")
                        .HasForeignKey("SpecializedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LecturersCP");

                    b.Navigation("SpecializedCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LessonContentCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.LessonCP", "LessonCP")
                        .WithMany("LessonContentCPs")
                        .HasForeignKey("IdLesson")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.ResourceLink", "ResourceLinks")
                        .WithMany("LessonContentCPs")
                        .HasForeignKey("ResourceLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonCP");

                    b.Navigation("ResourceLinks");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LessonCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.SubjectCP", "SubjectCP")
                        .WithMany("LessonCPs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizAnswerCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.QuizQuestionCP", "QuizQuestionCP")
                        .WithMany("QuizAnswerCp")
                        .HasForeignKey("IdQuizQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestionCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.SubjectCP", "SubjectCP")
                        .WithMany("QuizCps")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizQuestionCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.KindoOfQuestionCP", "KindoOfQuestionCP")
                        .WithMany("QuizQuestionCp")
                        .HasForeignKey("KindoOfQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("KindoOfQuestionCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizQuestionQuizCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.QuizCP", "QuizCP")
                        .WithMany("QuizQuestionQuizCPs")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.QuizQuestionCP", "QuizQuestionCP")
                        .WithMany("QuizQuestionQuizCPs")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuizCP");

                    b.Navigation("QuizQuestionCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.SpecializedCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.SpecializedCP", "SpecializedCPs")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("IdSpeciality")
                        .HasConstraintName("FK_ChuyenNganh_ChuyenNganhs");

                    b.Navigation("SpecializedCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.SpecializedSubjectCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.SpecializedCP", "specializedCP")
                        .WithMany("SpecializedSubjectCPs")
                        .HasForeignKey("SpecializedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.SubjectCP", "SubjectCP")
                        .WithMany("SpecializedSubjectCPs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectCP");

                    b.Navigation("specializedCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.StudentCP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", "trainingFacilitiesCP")
                        .WithMany("studentCPs")
                        .HasForeignKey("TrainingFacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("trainingFacilitiesCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", "TrainingFacilitiesCPs")
                        .WithMany("UserSignIns")
                        .HasForeignKey("IdTrainingFacility")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrainingFacilitiesCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoom", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", "TrainingFacilitiesCPs")
                        .WithMany("examinationRooms")
                        .HasForeignKey("IdTrainingFacility")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingFacilitiesCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoomDetail", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoom", "ExaminationRoom")
                        .WithMany("ExaminationRoomDetails")
                        .HasForeignKey("IdExaminationRoom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", "SubjectUP")
                        .WithMany("ExaminationRoomDetails")
                        .HasForeignKey("SubjectUPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CabinProject.SemesterBlock", "SemesterBlock")
                        .WithMany("ExaminationRoomDetails")
                        .HasForeignKey("IdBlock", "IdSemester")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationRoom");

                    b.Navigation("SemesterBlock");

                    b.Navigation("SubjectUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExamStorage", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", "UserSignIn")
                        .WithMany("ExamStorages")
                        .HasForeignKey("IdUserUpLoad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", "SubjectUP")
                        .WithMany("ExamStorages")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoomDetail", "examinationRoomDetail")
                        .WithOne("ExamStorage")
                        .HasForeignKey("FPLSP.Server.Domain.Entities.FPLExam.ExamStorage", "SecretKey", "IdExaminationRoom");

                    b.Navigation("SubjectUP");

                    b.Navigation("UserSignIn");

                    b.Navigation("examinationRoomDetail");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.OnlineExamRoom", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", "UserSignIn")
                        .WithMany("onlineExamRooms")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoomDetail", "ExaminationRoomDetail")
                        .WithMany("onlineExamRooms")
                        .HasForeignKey("SecretKey", "IdExaminationRoom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExaminationRoomDetail");

                    b.Navigation("UserSignIn");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.SupervisorExamRoom", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.LecturersCP", "LecturersCP")
                        .WithMany("SupervisorExamRooms")
                        .HasForeignKey("IdLecturter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoomDetail", "ExaminationRoomDetail")
                        .WithMany("SupervisorExamRooms")
                        .HasForeignKey("SecretKey", "IdExaminationRoom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExaminationRoomDetail");

                    b.Navigation("LecturersCP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.BookMarkClass", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", "UserSignIn")
                        .WithMany("BookMarkClasses")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("bookMarkClasses")
                        .HasForeignKey("IdSubject", "IdClass")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SubjectClassUP");

                    b.Navigation("UserSignIn");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.HomeWork", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.LessonUP", "LessonUP")
                        .WithMany("HomeWorks")
                        .HasForeignKey("IdLesson")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", "UserSignIn")
                        .WithMany("HomeWorks")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("HomeWorks")
                        .HasForeignKey("IdSubject", "IdClass")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LessonUP");

                    b.Navigation("SubjectClassUP");

                    b.Navigation("UserSignIn");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.LectuterSpecializedUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.LecturersCP", "LecturersCP")
                        .WithMany("LectuterSpecializedUPs")
                        .HasForeignKey("LectuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SpecializedUP", "SpecializedUP")
                        .WithMany("LectuterSpecializedUPs")
                        .HasForeignKey("SpecializedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LecturersCP");

                    b.Navigation("SpecializedUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.News", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.LessonUP", "LessonUP")
                        .WithMany("News")
                        .HasForeignKey("IdLesson")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.TypeOfNewFeed", "TypeOfNewFeed")
                        .WithMany("News")
                        .HasForeignKey("IdTypeOfNewFeed")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", "UserSignIn")
                        .WithMany("News")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("News")
                        .HasForeignKey("IdSubject", "IdClass")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LessonUP");

                    b.Navigation("SubjectClassUP");

                    b.Navigation("TypeOfNewFeed");

                    b.Navigation("UserSignIn");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.QuizQuestionQuizUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.QuizUP", "QuizUP")
                        .WithMany("QuizQuestionQuizUPs")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.QuizQuestionUP", "QuizQuestionUP")
                        .WithMany("QuizQuestionQuizUPs")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuizQuestionUP");

                    b.Navigation("QuizUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.ReportClassUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.ClassUp", "ClassUp")
                        .WithMany("ReportClassUps")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ClassUp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SpecializedSubjectUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SpecializedUP", "specializedUP")
                        .WithMany("SpecializedSubjectUPs")
                        .HasForeignKey("SpecializedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", "SubjectUP")
                        .WithMany("SpecializedSubjectUPs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectUP");

                    b.Navigation("specializedUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.StudentClassUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.ClassUp", "ClassUp")
                        .WithMany("StudentClassUPs")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.StudentUP", "StudentUp")
                        .WithMany("StudentClassUPs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassUp");

                    b.Navigation("StudentUp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.ClassUp", "ClassUp")
                        .WithMany("SubjectClassUPs")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", "SubjectUP")
                        .WithMany("SubjectClassUPs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassUp");

                    b.Navigation("SubjectUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SubmitHomeWork", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.LessonUP", "LessonUP")
                        .WithMany("submitHomeWorks")
                        .HasForeignKey("IdLesson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.StudentUP", "StudentUP")
                        .WithMany("submitHomeWorks")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", "SubjectClassUP")
                        .WithMany("submitHomeWorks")
                        .HasForeignKey("IdSubject", "IdClass")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LessonUP");

                    b.Navigation("StudentUP");

                    b.Navigation("SubjectClassUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.VideoHistory", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.LessonContentUP", "LessonContentUP")
                        .WithMany("VideoHistories")
                        .HasForeignKey("IdLessonContent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.StudentUP", "StudentUP")
                        .WithMany("VideoHistories")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LessonContentUP");

                    b.Navigation("StudentUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.AnswerUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.QuizQuestionUP", "QuizQuestionUp")
                        .WithMany("AnswerUps")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("QuizQuestionUp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.LessonContentUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.LessonUP", "LessonUP")
                        .WithMany("LessonContentUps")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.ResourceLinkUP", "ResourceLinkUP")
                        .WithMany("LessonContentUP")
                        .HasForeignKey("ResuorceLinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LessonUP");

                    b.Navigation("ResourceLinkUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.LessonUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", "SubjectUp")
                        .WithMany("LessonUps")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SubjectUp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuizQuestionUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.QuestionType", "QuestionTypes")
                        .WithMany("QuizQuestionUPs")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionTypes");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuizUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", "SubjectUp")
                        .WithMany("QuizUPs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SubjectUp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.SpecializedUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.SpecializedUP", "SpecializedUp")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("SpecialityId")
                        .HasConstraintName("FK_ChuyenNganh_ChuyenNganhhep");

                    b.Navigation("SpecializedUp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.StudentQuizUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.QuizUP", "QuizUP")
                        .WithMany("StudentQuizUps")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UserParts.StudentUP", "StudentUp")
                        .WithMany("StudentQuizUPs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuizUP");

                    b.Navigation("StudentUp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.TakeAnswerUP", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.QuizQuestionUP", "QuizQuestionUP")
                        .WithMany("TakeAnswerUPs")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.UsesParts.StudentQuizUP", "StudentQuizUp")
                        .WithMany("TakeAnswerUP")
                        .HasForeignKey("StudentId", "QuizId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("QuizQuestionUP");

                    b.Navigation("StudentQuizUp");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Block", b =>
                {
                    b.Navigation("SemesterBlocks");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Cabin", b =>
                {
                    b.Navigation("BookingCabins");

                    b.Navigation("GroupCabins");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Semester", b =>
                {
                    b.Navigation("SemesterBlocks");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.SemesterBlock", b =>
                {
                    b.Navigation("ExaminationRoomDetails");

                    b.Navigation("TeachingSchedules");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CabinProject.Shift", b =>
                {
                    b.Navigation("BookingCabins");

                    b.Navigation("TeachingSchedules");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ContentOfExamCP", b =>
                {
                    b.Navigation("ImageCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ExamCP", b =>
                {
                    b.Navigation("contentOfExamCPs");

                    b.Navigation("examLinkCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.KindoOfQuestionCP", b =>
                {
                    b.Navigation("QuizQuestionCp");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LecturersCP", b =>
                {
                    b.Navigation("LectuterSpecializedCPs");

                    b.Navigation("LectuterSpecializedUPs");

                    b.Navigation("SupervisorExamRooms");

                    b.Navigation("TeachingSchedules");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.LessonCP", b =>
                {
                    b.Navigation("LessonContentCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizCP", b =>
                {
                    b.Navigation("QuizQuestionQuizCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.QuizQuestionCP", b =>
                {
                    b.Navigation("QuizAnswerCp");

                    b.Navigation("QuizQuestionQuizCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.ResourceLink", b =>
                {
                    b.Navigation("LessonContentCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.RoleCP", b =>
                {
                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.SpecializedCP", b =>
                {
                    b.Navigation("InverseReportsToNavigation");

                    b.Navigation("LectuterSpecializedCPs");

                    b.Navigation("SpecializedSubjectCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.SubjectCP", b =>
                {
                    b.Navigation("ExamCPs");

                    b.Navigation("LessonCPs");

                    b.Navigation("QuizCps");

                    b.Navigation("SpecializedSubjectCPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.TrainingFacilitiesCP", b =>
                {
                    b.Navigation("Cabins");

                    b.Navigation("UserSignIns");

                    b.Navigation("examinationRooms");

                    b.Navigation("lecturersCPs");

                    b.Navigation("studentCPs");

                    b.Navigation("teachingSchedules");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.CoresParts.UserSignIn", b =>
                {
                    b.Navigation("BookMarkClasses");

                    b.Navigation("ExamStorages");

                    b.Navigation("HomeWorks");

                    b.Navigation("News");

                    b.Navigation("onlineExamRooms");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoom", b =>
                {
                    b.Navigation("ExaminationRoomDetails");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.FPLExam.ExaminationRoomDetail", b =>
                {
                    b.Navigation("ExamStorage")
                        .IsRequired();

                    b.Navigation("SupervisorExamRooms");

                    b.Navigation("onlineExamRooms");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.ClassUp", b =>
                {
                    b.Navigation("ReportClassUps");

                    b.Navigation("StudentClassUPs");

                    b.Navigation("SubjectClassUPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SpecializedSubjectUP", b =>
                {
                    b.Navigation("GroupCabins");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.StudentUP", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("StudentClassUPs");

                    b.Navigation("StudentQuizUPs");

                    b.Navigation("VideoHistories");

                    b.Navigation("submitHomeWorks");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.SubjectClassUP", b =>
                {
                    b.Navigation("BookingCabins");

                    b.Navigation("BookingRequests");

                    b.Navigation("FeedBacks");

                    b.Navigation("HomeWorks");

                    b.Navigation("News");

                    b.Navigation("TeachingSchedules");

                    b.Navigation("bookMarkClasses");

                    b.Navigation("submitHomeWorks");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UserParts.TypeOfNewFeed", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.LessonContentUP", b =>
                {
                    b.Navigation("VideoHistories");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.LessonUP", b =>
                {
                    b.Navigation("HomeWorks");

                    b.Navigation("LessonContentUps");

                    b.Navigation("News");

                    b.Navigation("submitHomeWorks");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuestionType", b =>
                {
                    b.Navigation("QuizQuestionUPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuizQuestionUP", b =>
                {
                    b.Navigation("AnswerUps");

                    b.Navigation("QuizQuestionQuizUPs");

                    b.Navigation("TakeAnswerUPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.QuizUP", b =>
                {
                    b.Navigation("QuizQuestionQuizUPs");

                    b.Navigation("StudentQuizUps");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.ResourceLinkUP", b =>
                {
                    b.Navigation("LessonContentUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.SpecializedUP", b =>
                {
                    b.Navigation("GroupCabins");

                    b.Navigation("InverseReportsToNavigation");

                    b.Navigation("LectuterSpecializedUPs");

                    b.Navigation("SpecializedSubjectUPs");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.StudentQuizUP", b =>
                {
                    b.Navigation("TakeAnswerUP");
                });

            modelBuilder.Entity("FPLSP.Server.Domain.Entities.UsesParts.SubjectUP", b =>
                {
                    b.Navigation("ExamStorages");

                    b.Navigation("ExaminationRoomDetails");

                    b.Navigation("LessonUps");

                    b.Navigation("QuizUPs");

                    b.Navigation("SpecializedSubjectUPs");

                    b.Navigation("SubjectClassUPs");
                });
#pragma warning restore 612, 618
        }
    }
}
