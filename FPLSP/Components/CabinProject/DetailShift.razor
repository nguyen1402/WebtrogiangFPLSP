@using Blazored.Toast.Services;
@using FPLSP.Repositories.Interfaces.CabinProject;
@using FPLSP.Repositories.Interfaces;
@using FPLSP.Server.Domain.Entities.CabinProject;
@using FPLSP.Server.Domain.Entities.CoresParts;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.BookingCabin;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.BookingRequest;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.Cabin;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.ShiftOfCabin;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.TeachingSchedule;
@using Microsoft.AspNetCore.SignalR.Client;
@if (ShowConfirmation)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog" style="max-height:85vh;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@ConfirmationTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                        @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@bookingCabinVM" OnSubmit="@(() => OnConfirmationChange(true))" class="card card-body bg-light" id="details-form">
                        <DataAnnotationsValidator />
                        <div class="form-group pt-2">
                            <label for="name" class="col-md-4 col-form-label">Giảng Viên:</label>
                            <InputText readonly id="name" class="form-control" @bind-Value="@LecturerName" />

                            <label for="name" class="col-md-8 col-form-label">Giảng Viên Dạy Thay:</label>
                            <div class="row">
                                <div class="col-8">
                                    <InputSelect id="time" class=" form-select" ValueExpression="@(()=>IdLecturerForExchange)" Value="@IdLecturerForExchange" ValueChanged="@((string value) => CheckLecturerForExchange(value))">
                                        <option selected value="@(string.Empty)">Chọn giảng viên</option>
                                        @if (listLecturerForExchange.Count() != 0)
                                        {
                                            @foreach (var lec in listLecturerForExchange)
                                            {
                                                <option value="@(lec.Id)">@(lec.Email.Substring(0, lec.Email.Length - 11))</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-4">
                                    <button disabled="@(string.IsNullOrEmpty(IdLecturerForExchange))" class="btn btn-primary" @onclick="ExchangeSchedule">
                                        Đổi lịch
                                    </button>
                                </div>
                            </div>
                            <label for="name" class="col-md-4 col-form-label">Lớp:</label>
                            <InputText readonly id="name" class="form-control" @bind-Value="@ClassSubjectName" />
                            <label for="name" class="col-md-4 col-form-label">Ca dạy:</label>
                            <InputText readonly id="name" class="form-control" @bind-Value="@ShiftName" />
                            <label for="name" class="col-md-4 col-form-label">Cabin:</label>
                            <div class="row">
                                <div class="col-6">
                                    <InputText readonly id="name" class="form-control" @bind-Value="@CabinName" placeholder="Chưa có cabin" />
                                </div>
                                <div class="col-6">
                                    <button hidden="@(IdCabin!=null)" type="button" class="btn btn-success" data-dismiss="modal"
                                        @onclick="() => BookCabin()">
                                        Nhận cabin
                                    </button>
                                    <button hidden="@(IdCabin==null @*&& IdCabinRandom==null*@)" type="button" class="btn btn-danger" data-dismiss="modal"
                                        @onclick="() => CancelCabin()">
                                        Hủy cabin
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div hidden="@(IdCabin==null@* && IdCabinRandom==null*@)">
                            <label for="name" class="col-md-4 col-form-label">Lí do hủy cabin vì:</label>
                            <InputTextArea @bind-Value="CancelReason" placeholder="Nhập lí do hủy cabin"></InputTextArea>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal"
                        @onclick="() => OnConfirmationChange(false)">
                        Đóng
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] public IShiftOfCabinApiClient _shiftOfCabinApiClient { get; set; }
    [Inject] public IGroupCabinRepo _groupCabinRepo { get; set; }
    [Inject] public IBookingCabinApiClient _bookingCabinApiClient { get; set; }
    [Inject] public IBookingRequestRepo _bookingRequestRepo { get; set; }
    [Inject] public ISubjectsSpecializedUPRepo _subSpecUPRepo { get; set; }
    [Inject] public ISpecializedUPRepo _specUPRepo { get; set; }
    [Inject] public ICabinRepo _cabinRepo { get; set; }
    [Inject] public IToastService _toastService { get; set; }

    protected bool ShowConfirmation { get; set; }

    [Parameter]
    public string ConfirmationTitle { get; set; } = "";
    [Parameter]
    public string ConfirmationMessage { get; set; } = "";

    [Parameter]
    public Guid IdClass { get; set; }
    [Parameter]
    public Guid IdSubject { get; set; }
    [Parameter]
    public Guid IdLecturer { get; set; }
    [Parameter]
    public Guid IdShift { get; set; }
    [Parameter]
    public Guid? IdCabin { get; set; }

    [Parameter]
    public string? ClassSubjectName { get; set; }
    [Parameter]
    public string? LecturerName { get; set; }
    [Parameter]
    public string? ShiftName { get; set; }
    [Parameter]
    public string? CabinName { get; set; }
    [Parameter]
    public DateTime TeachingDay { get; set; }
    [Parameter]
    public TimeSpan StartShift { get; set; }
    [Parameter]
    public TimeSpan EndShift { get; set; }

    public string CancelReason { get; set; }
    [Inject] SweetAlertService Swal { get; set; }
    [Inject] ILecturersCPRepo lecturersCPRepo { get; set; }
    [Inject] ITeachingScheduleApiClient teachingScheduleApiClient { get; set; }
    [Inject] IShiftOfCabinApiClient shiftOfCabinApiClient { get; set; }

    [Parameter]
    public EventCallback<int> ConfirmationChanged { get; set; }

    BookingCabinCreateVM bookingCabinVM = new BookingCabinCreateVM();

    List<LecturersCP> listLecturerForExchange = new List<LecturersCP>();
    List<ShiftOfCabinFullVM> listFullShift;

    public Guid? IdCabinRandom = null;
    private bool isSuccess;
    private int result;
    DateTime StartTime;
    DateTime EndTime;

    public string IdLecturerForExchange = null;

    public async Task show()
    {
        try
        {
            string url = "http://localhost:5001/SignalRCabinHub";
            HubConnection _connection = null;
            bool isConnected = false;
            string connectionStatus = "Closed";
            _connection = new HubConnectionBuilder()
                .WithUrl(url)
                .Build();

            await _connection.StartAsync();
            isConnected = true;
            connectionStatus = "Connected :-)";

            _connection.Closed += async (s) =>
            {
                isConnected = false;
                connectionStatus = "Disconnected";
                await _connection.StartAsync();
                isConnected = true;
            };

            _connection.On<string>("SignalRCabins", async (res) =>
            {
                if (res == "Done")
                {
                    await OnInitializedAsync();

                    await this.InvokeAsync(() => this.StateHasChanged());
                }
            });

            _connection.On<string>("SignalRGroupCabins", async (res) =>
            {
                if (res == "Done")
                {
                    await OnInitializedAsync();

                    await this.InvokeAsync(() => this.StateHasChanged());
                }
            });

            _connection.On<string>("SignalRBookingCabins", async (res) =>
            {
                if (res == "Done")
                {
                    await OnInitializedAsync();

                    await this.InvokeAsync(() => this.StateHasChanged());
                }
            });

            _connection.On<string>("SignalRTeachingSchedules", async (res) =>
            {
                if (res == "Done")
                {
                    await OnInitializedAsync();

                    await this.InvokeAsync(() => this.StateHasChanged());
                }
            });

            _connection.On<string>("SignalRSemesterBlocks", async (res) =>
            {
                if (res == "Done")
                {
                    await OnInitializedAsync();

                    await this.InvokeAsync(() => this.StateHasChanged());
                }
            });
        }
        catch (Exception ex)
        {


        }
        finally
        {
            StartTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds);
            EndTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds);

            listFullShift = await shiftOfCabinApiClient.GetAllInformationOfShiftOfCabin();
            listFullShift = listFullShift == null ? new List<ShiftOfCabinFullVM>() : listFullShift.Where(c => c.IdLecturer != IdLecturer).ToList();

            listLecturerForExchange = await lecturersCPRepo.GetAllLecturerAsync();
            listLecturerForExchange = listLecturerForExchange.Where(c => !listFullShift.Any(x => x.IdShiftOfCabin == IdShift && x.TeachingDay == TeachingDay && x.IdLecturer == c.Id)).OrderBy(c => c.Email).ToList();
        }

        ShowConfirmation = true;
        StateHasChanged();
    }

    public void CheckLecturerForExchange(string value)
    {
        IdLecturerForExchange = value;
    }

    public async Task ExchangeSchedule()
    {
        StartTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds);

        // Đổi lịch trước ca dạy
        if (DateTime.Now < StartTime)
        {
            if (!string.IsNullOrEmpty(IdLecturerForExchange))
            {
                var listSchedule = await teachingScheduleApiClient.GetAll();
                TeachingScheduleVM objTS = listSchedule == null ? null : listSchedule.FirstOrDefault(c => c.Status == 0 && c.SubjectId == IdSubject && c.ClassId == IdClass && c.IdLecturter == IdLecturer && c.IdShift == IdShift && c.TeachingDay == TeachingDay);

                if (objTS != null)
                {
                    SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Xác Nhận Cập Nhật Lịch Dạy",
                            Icon = SweetAlertIcon.Warning,
                            ShowCancelButton = true,
                            ConfirmButtonText = "Đồng Ý",
                            CancelButtonText = "Hủy"
                        });

                    if (!string.IsNullOrEmpty(result.Value))
                    {
                        // Update TeachingSchedule
                        var listLecturer = await lecturersCPRepo.GetAllLecturerAsync();
                        listFullShift = await shiftOfCabinApiClient.GetAllInformationOfShiftOfCabin();
                        listFullShift = listFullShift == null ? new List<ShiftOfCabinFullVM>() : listFullShift.Where(c => c.IdLecturer != IdLecturer).ToList();
                        listLecturerForExchange = listLecturer.Where(c => !listFullShift.Any(x => x.IdShiftOfCabin == IdShift && x.TeachingDay == TeachingDay && x.IdLecturer == c.Id)).OrderBy(c => c.LecturersName).ToList();
                        var lecturerWantToExchange = listLecturer.FirstOrDefault(c => c.Id == Guid.Parse(IdLecturerForExchange)).Email;
                        lecturerWantToExchange = lecturerWantToExchange.Substring(0, lecturerWantToExchange.Length - 11);

                        if (listLecturerForExchange.FirstOrDefault(c => c.Id == Guid.Parse(IdLecturerForExchange)) != null)
                        {
                            var lecturer = listLecturer.FirstOrDefault(c => c.Id == IdLecturer).Email;
                            lecturer = lecturer.Substring(0, lecturer.Length - 11);
                            var lecturerExchange = listLecturerForExchange.FirstOrDefault(c => c.Id == Guid.Parse(IdLecturerForExchange)).Email;
                            lecturerExchange = lecturerExchange.Substring(0, lecturerExchange.Length - 11);

                            objTS.IdLecturter = Guid.Parse(IdLecturerForExchange);
                            objTS.Note = $"Giảng viên {lecturerExchange} dạy thay giảng viên {lecturer}";
                            var objUpdate = new TeachingSchedule()
                                {
                                    Id = objTS.Id,
                                    ImportTime = objTS.ImportTime,
                                    IdAdminImport = objTS.IdAdminImport,
                                    SubjectId = objTS.SubjectId,
                                    ClassId = objTS.ClassId,
                                    IdShift = objTS.IdShift,
                                    IdTrainingFacility = objTS.IdTrainingFacility,

                                    TeachingDay = objTS.TeachingDay,
                                    IndexOfTeachingSchedule = objTS.IndexOfTeachingSchedule,
                                    Status = objTS.Status,
                                    IdBlock = objTS.IdBlock,
                                    IdSemester = objTS.IdSemester,
                                    IdLecturter = objTS.IdLecturter,
                                    Note = objTS.Note,
                                    Remote = objTS.Remote
                                };
                            var res = await teachingScheduleApiClient.UpdateTeachingSchedules(objUpdate);

                            // Update BookingCabin
                            var listBookingCabin = await _bookingCabinApiClient.GetAll();

                            var objForUpdate = listBookingCabin.FirstOrDefault(c => c.Status == 1 && c.SubjectId == IdSubject && c.ClassId == IdClass && c.IdShift == IdShift && c.IdLectuter == IdLecturer && c.DateCreated == new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day));
                            if (objForUpdate != null)
                            {
                                objForUpdate.IdLectuter = Guid.Parse(IdLecturerForExchange);
                                objForUpdate.CheckinImage = null;
                                objForUpdate.Note = $"Giảng viên {lecturerExchange} dạy thay giảng viên {lecturer}";
                            }

                            var resBK = objForUpdate == null ? true : await _bookingCabinApiClient.Update(objForUpdate.Id, objForUpdate.IdCabin, IdSubject, IdClass, IdShift, new BookingCabinUpdateVM()
                                {
                                    SubjectId = objForUpdate.SubjectId,
                                    ClassId = objForUpdate.ClassId,
                                    IdCabin = objForUpdate.IdCabin,
                                    IdShift = objForUpdate.IdShift,
                                    IdLectuter = objForUpdate.IdLectuter,
                                    CheckinImage = objForUpdate.CheckinImage,
                                    CheckinTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds),
                                    CheckoutTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds),
                                    Note = objForUpdate.Note,
                                    DateCreated = objForUpdate.DateCreated,
                                    Status = objForUpdate.Status
                                });

                            if (res == true && resBK == true)
                            {
                                await Swal.FireAsync("Thông Báo", " Cập Nhật Lịch Dạy Thành Công", SweetAlertIcon.Success);
                            }
                            else
                            {
                                await Swal.FireAsync("Thông Báo", " Cập Nhật Lịch Dạy Thất Bại", SweetAlertIcon.Error);
                            }
                        }
                        else
                        {
                            _toastService.ShowError($"Giảng viên {lecturerWantToExchange} không thể dạy thay vì đã có lịch. Vui lòng đổi lịch cho giảng viên khác");
                        }
                    }
                    else if (result.Dismiss == DismissReason.Cancel)
                    {
                        //ở đây xử lý khi hủy upload
                        await Swal.FireAsync("Hủy Cập Nhật Lịch Dạy", "Hủy Cập Nhật Lịch Dạy Thành Công", SweetAlertIcon.Error);
                    }
                }
                else
                {
                    _toastService.ShowError($"Lịch dạy không tồn tại. Vui lòng thử lại");
                }
            }
        }
        else
        {
            _toastService.ShowError($"Chỉ có thể đổi lịch trước khi bắt đầu ca dạy");
        }
        result = 0;
        ShowConfirmation = false;
        await ConfirmationChanged.InvokeAsync(result);
    }
    public async Task BookCabin()
    {
        StartTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds);
        EndTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds);

        if (DateTime.Now < EndTime)
        {
            // list cabin trống của ngành
            List<CabinViewModel> listCabin = await _cabinRepo.GetAllCabinAsync();
            listCabin = listCabin == null ? new() : listCabin.Where(c => c.Status == 0).ToList();
            var listBookingCabin = await _bookingCabinApiClient.GetAll();
            //listBookingCabin = listBookingCabin.Where(c => c.Status != 1).ToList();
            var listGroupCabin = await _groupCabinRepo.GetAllGroupCabinAsync();
            listGroupCabin = listGroupCabin.Where(c => c.Status != 1).ToList();
            var listSubSpec = await _subSpecUPRepo.GetAllAsync();
            var specOfSub = listSubSpec.FirstOrDefault(c => c.SubjectId == IdSubject);
            var listSpec = await _specUPRepo.GetAll();

            var specAvailableForBooking = specOfSub == null ? null : listSpec.FirstOrDefault(c => c.Id == specOfSub.SpecializedId);
            listCabin = specAvailableForBooking == null ? listCabin : listCabin.Where(c => listGroupCabin.Any(c => c.IdSpec == specAvailableForBooking.Id || c.IdSpec == specAvailableForBooking.IdSpeciality)).ToList();
            // listCabin chứa những cabin đang không có bookingcabin == 0
            listCabin = listCabin.Where(cabin => !listBookingCabin.Any(c => //c.ClassId == IdClass &&
                                                                            //c.SubjectId == IdSubject &&
                                                                        c.IdShift == IdShift &&
                                                                        c.IdCabin == cabin.Id &&
                                                                        c.IdShift == IdShift &&
                                                                        c.DateCreated == TeachingDay &&
                                                                        c.Status == 0)).ToList();

            // Nếu listCabin null ? BOOKINGREQUEST : Random
            if (listCabin.Count() != 0)
            {
                var length = listCabin.Count();
                // Random
                Random rand = new Random();
                IdCabinRandom = listCabin[rand.Next(length)].Id;
                var x = await _cabinRepo.GetAllCabinAsync();
                CabinName = x.FirstOrDefault(c => c.Id == IdCabinRandom).CabinName;
                SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Xác Nhận Nhận Cabin",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Đồng Ý",
                        CancelButtonText = "Hủy"
                    });

                if (!string.IsNullOrEmpty(result.Value))
                {
                    await OnConfirmationChange(true);
                }
                else if (result.Dismiss == DismissReason.Cancel)
                {
                    await Swal.FireAsync("Hủy Nhận Cabin", "Hủy Nhận Cabin Thành Công", SweetAlertIcon.Error);
                }
            }
            else
            {
                // BOOKINGREQUEST
                var listBR = await _bookingRequestRepo.GetAllBookingRequestAsync();
                if (!listBR.Any(c => c.IdLectuter == IdLecturer && c.SubjectId == IdSubject && c.ClassId == IdClass && c.StartTime == StartTime && c.EndTime == EndTime && c.Status == 0))
                {
                    var obj = new BookingRequestCreateViewModel()
                        {
                            ContentOfRequest = "Cần xếp giúp cabin",
                            IdLectuter = IdLecturer,
                            SubjectId = IdSubject,
                            ClassId = IdClass,
                            SendingTime = DateTime.Now,
                            FeedBackTime = DateTime.Now,
                            StartTime = StartTime,
                            EndTime = EndTime,
                            Status = 0,
                        };
                    await _bookingRequestRepo.CreateBookingRequest(obj);
                }
                else
                {
                    var objExisted = listBR.FirstOrDefault(c => c.IdLectuter == IdLecturer && c.SubjectId == IdSubject && c.ClassId == IdClass && c.StartTime == StartTime && c.EndTime == EndTime && c.Status == 0);
                    var obj = new BookingRequestUpdateViewModel()
                        {
                            ContentOfRequest = "Cần xếp giúp cabin",
                            IdLectuter = IdLecturer,
                            SubjectId = IdSubject,
                            ClassId = IdClass,
                            FeedBackTime = DateTime.Now,
                            SendingTime = DateTime.Now,
                            StartTime = StartTime,
                            EndTime = EndTime,
                            Status = 0,
                        };
                    await _bookingRequestRepo.UpdateBookingRequest(objExisted.Id, obj);
                }

                await Swal.FireAsync("Đã Gửi Yêu Cầu Xếp Cabin", $"Đã hết cabin của {ShiftName} ngày {TeachingDay.ToString("dd/MM/yyyy")}", SweetAlertIcon.Success);
            }
        }
        else
        {
            _toastService.ShowError($"Đã quá thời gian nhận/hủy cabin");
        }
        result = 0;
        ShowConfirmation = false;
        await ConfirmationChanged.InvokeAsync(result);
    }
    public async Task CancelCabin()
    {
        StartTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds);
        EndTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds);
        if (DateTime.Now < EndTime)
        {
            IdCabinRandom = (IdCabin == null) ? IdCabinRandom : Guid.Parse(IdCabin.ToString());
            CancelReason = CancelReason == null ? "" : CancelReason;

            if (CancelReason.Trim().Length == 0)
            {
                _toastService.ShowError($"Không được để trống lí do hủy cabin");
            }
            else
            {
                SweetAlertResult confirm = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Xác Nhận Hủy Cabin",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Đồng Ý",
                        CancelButtonText = "Hủy"
                    });

                if (!string.IsNullOrEmpty(confirm.Value))
                {
                    var resRequest = true;

                    var listBookingCabin = await _bookingCabinApiClient.GetAll();

                    var obj = listBookingCabin.FirstOrDefault(c => c.Status == 0 && c.SubjectId == IdSubject && c.ClassId == IdClass && c.IdShift == IdShift && c.IdLectuter == IdLecturer && c.IdCabin == Guid.Parse(IdCabinRandom.ToString()) && c.DateCreated == new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day));
                    var resBooking = obj == null ? true : await _bookingCabinApiClient.Delete(obj.Id, Guid.Parse(IdCabinRandom.ToString()), IdSubject, IdClass, IdShift);
                    CancelReason = null;
                    if (resRequest && resBooking)
                    {
                        await Swal.FireAsync("Hủy Cabin", "Hủy Cabin Cho Lớp Học Thành Công", SweetAlertIcon.Success);
                    }
                    else
                    {
                        await Swal.FireAsync("Hủy Cabin", "Hủy Cabin Cho Lớp Học Thất Bại", SweetAlertIcon.Error);
                    }
                }
                else if (confirm.Dismiss == DismissReason.Cancel)
                {
                    await Swal.FireAsync("Hủy Thao Tác", "Hủy Thao Tác Thành Công", SweetAlertIcon.Error);
                }
            }
        }
        else
        {
            _toastService.ShowError($"Đã quá thời gian nhận/hủy cabin");
        }
        result = 0;
        ShowConfirmation = false;
        await ConfirmationChanged.InvokeAsync(result);
    }
    protected async Task OnConfirmationChange(bool value)
    {
        /*
        * (result) = (0)->View; (1)->CreateSuccess; (2)->CreateFail; (1)->UpdateSuccess; (2)->UpdateFail;
        */
        IdCabinRandom = (IdCabin == null) ? IdCabinRandom : Guid.Parse(IdCabin.ToString());

        if (value && IdCabinRandom != null)
        {
            var listBookingCabin = await _bookingCabinApiClient.GetAll();
            //listBookingCabin = listBookingCabin.Where(c => c.Status != 1).ToList();

            if (listBookingCabin == null || !listBookingCabin.Any(c => c.ClassId == IdClass &&
                c.SubjectId == IdSubject &&
                c.IdShift == IdShift &&
                c.IdCabin == IdCabinRandom &&
                c.DateCreated == new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day)
            )
            )
            {
                var obj = new BookingCabinCreateVM()
                    {
                        Id = Guid.NewGuid(),
                        SubjectId = IdSubject,
                        ClassId = IdClass,
                        IdCabin = Guid.Parse(IdCabinRandom.ToString()),
                        IdShift = IdShift,
                        IdLectuter = IdLecturer,
                        CheckinImage = bookingCabinVM.CheckinImage,
                        CheckinTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds),
                        CheckoutTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds),
                        Note = bookingCabinVM.Note,
                        DateCreated = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day),
                        Status = 0
                    };
                var res = await _bookingCabinApiClient.Add(obj);
                result = res ? 1 : 2;
                ShowConfirmation = false;
                await ConfirmationChanged.InvokeAsync(result);
            }
            else
            {
                if (IdCabinRandom != IdCabin)
                {
                    var obj = new BookingCabinUpdateVM()
                        {
                            SubjectId = IdSubject,
                            ClassId = IdClass,
                            IdCabin = Guid.Parse(IdCabinRandom.ToString()),
                            IdShift = IdShift,
                            IdLectuter = IdLecturer,
                            CheckinImage = bookingCabinVM.CheckinImage,
                            CheckinTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds),
                            CheckoutTime = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds),
                            Note = bookingCabinVM.Note,
                            DateCreated = new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day),
                            Status = 0
                        };

                    var objForUpdate = listBookingCabin.FirstOrDefault(c => c.Status == 1 && c.SubjectId == IdSubject && c.ClassId == IdClass && c.IdShift == IdShift && c.IdLectuter == IdLecturer && c.IdCabin == Guid.Parse(IdCabinRandom.ToString()) && c.DateCreated == new DateTime(TeachingDay.Year, TeachingDay.Month, TeachingDay.Day));

                    var res = objForUpdate == null ? true : await _bookingCabinApiClient.Update(objForUpdate.Id, Guid.Parse(IdCabinRandom.ToString()), IdSubject, IdClass, IdShift, obj);

                    result = res ? 1 : 2;
                    ShowConfirmation = false;
                    await ConfirmationChanged.InvokeAsync(result);
                }
                else
                {
                    result = 0;
                    ShowConfirmation = false;
                    await ConfirmationChanged.InvokeAsync(result);
                }
            }
        }
        else
        {
            result = 0;
            ShowConfirmation = false;
            await ConfirmationChanged.InvokeAsync(result);
        }
    }
}