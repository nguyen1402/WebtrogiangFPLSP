@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Domain.Entities.UserParts
@using FPLSP.Server.Domain.Entities.UsesParts
@using FPLSP.Server.Infrastructure.ViewModels
@if (ShowConfirmation)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@ConfirmationTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                        @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="submitHomeWork">
                        <InputTextArea @bind-Value="submitHomeWork.SubmitLink"></InputTextArea>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"
                        @onclick="() => OnConfirmationChange(false)">
                        Hủy
                    </button>
                    <button type="button" class="btn btn-danger"
                        @onclick="() => { OnConfirmationChange(true); }">
                        Nộp bài
                    </button>
                </div>
            </div>
        </div>
    </div>
}





@code {
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] public ISubmitHomeworkForStudentRepo _submitForStudentRepo { get; set; }

    protected bool ShowConfirmation { get; set; }

    [Parameter]
    public string ConfirmationTitle { get; set; } = "Confirm Delete";

    [Parameter]
    public string ConfirmationMessage { get; set; } = "Are you sure you want to delete";

    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }

    public SubmitHomeWork submitHomeWork { get; set; }

    private bool isSuccess;
    private string defaultLink;

    public void show()
    {
        defaultLink = submitHomeWork.SubmitLink;
        ShowConfirmation = true;
        StateHasChanged();
    }

    protected async Task OnConfirmationChange(bool value)
    {
        if(value){
            if (submitHomeWork.SubmitLink == "")
            {
                var res = await _submitForStudentRepo.Student_Update(submitHomeWork.Id, new SubmitHomeWorkForStudentUpdateVm()
                {
                    SubmitLink = submitHomeWork.SubmitLink,
                    SubmitTime = DateTime.Now,
                    Status = 0
                });
            }
            else
            {
                var res = await _submitForStudentRepo.Student_Update(submitHomeWork.Id, new SubmitHomeWorkForStudentUpdateVm()
                    {
                        SubmitLink = submitHomeWork.SubmitLink,
                        SubmitTime = DateTime.Now,
                        Status = 1
                    });
            }

            ShowConfirmation = false;
            await ConfirmationChanged.InvokeAsync(value);
        }
        else{
            submitHomeWork.SubmitLink = submitHomeWork.SubmitLink;
            ShowConfirmation = false;
            await ConfirmationChanged.InvokeAsync(value);
        }
      
       
    }
}

