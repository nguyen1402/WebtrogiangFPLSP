@page "/rolecp"
@using Blazored.Toast.Services
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Infrastructure.ViewModels
@using FPLSP.Server.Infrastructure.ViewModels.RoleCPVm
@attribute [Authorize(Roles = "AdminCore,AdminCS")]
<h3>CHỨC VỤ</h3>
<div class="row pt-3">
    <div class="col-3 ps-0">
        <a class="btn btn-outline-primary me-3" @onclick="() => RedirectToCreate()">Thêm Chức Vụ</a>
    </div>
    <div class="col-7 pe-5">
        <RoleSearch OnSearch="SearchRoleCP"></RoleSearch>
    </div>
    <div class="col-2 ps-3">
        <div class="dropdown-center">
            <button class="btn btn-info ps-4 dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Chức Năng
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" @onclick="() => DeleteAll()">Đổi trạng thái</a></li>
            </ul>
        </div>
    </div>
</div>
            @if (_lstRoleCPs == null )
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <div class="row">
            @if ( _lstRoleCPs.Count == 0)
        {
            <span>Danh sách chức vụ rỗng</span>
        }
        else
{

        <table class="table table-hover align-middle table-bordered mt-3" style="text-align:center">
            <thead class="table-success">
                <tr>
                    <th><input type="checkbox" @bind="@Check" @onchange="EventArgs => { CheckAllExpense( EventArgs.Value); } " @bind:event="oninput"></th>
                    <th>Mã Chức Vụ</th>
                    <th>Tên Chức Vụ</th>
                    <th>Trạng thái</th>
                    <th>Chức năng</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _lstRoleCPs)
                {
                    <tr>
                        <td><input type="checkbox" checked=@item.IsChecked @onchange="()=>CheckManual(item.Id,item.IsChecked)"></td>
                        <td>@item.RoleCode</td>
                        <td>@item.RoleName</td>

                        @if (@item.Status == 1)
                        {
                            <td>Không hoạt động</td>
                        }
                        else
                        {
                            <td>Hoạt động</td>
                        }

                        <td class="text-center">
                            <a class="btn btn-primary " type="button" title="Sửa" id="show-emp"
                       @onclick="() => RedirectToUpdate(item.Id)">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a class="btn btn-danger " type="button" title="Xóa" @onclick="()=>OnDelete(item.Id)">
                                <i class="fas fa-trash-alt"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <Comfirmation ConfirmationMessage="Bạn có chắc muốn đổi trạng thái Chức vụ không?"
                  ConfirmationTitle="Đổi trạng thái"
                  @ref="DeleteConfirmation"
                  ConfirmationChanged="OnConfirmationDelete"></Comfirmation>
                  }
    </div>
<div class="footer text-muted">
    <div class="row mt-3">

        <span>
            <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
        </span>

    </div>
</div>
}

@code {
    public List<RoleCPViewModel> _lstRoleCPs { get; set; } = new List<RoleCPViewModel>();
    public MetaData MetaData { get; set; } = new MetaData();

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public IRoleCPRepo _RoleCPRepo { get; set; }

    private RoleCPListSearch _RoleCPSearch = new RoleCPListSearch();
    public string Error { get; set; }
    [Inject]
    public ISpecializedCPRepo _iSpecialized { get; set; }

    protected Comfirmation DeleteConfirmation { get; set; }

    private int stt = 0;

    private List<Guid> _removeRole = new List<Guid>();

    private bool Check = false;
    [Inject] private IToastService _toastService { get; set; }
    private string deleteID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
    }

    public async Task SearchRoleCP(RoleCPListSearch RoleCPSearch)
    {
        _RoleCPSearch = RoleCPSearch;
        await GetTasks();
    }

    public void OnDelete(Guid id)
    {
        deleteID = id.ToString();
        DeleteConfirmation.show();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await _RoleCPRepo.DeleteRole(Guid.Parse(deleteID));
            if (result)
            {
                await GetTasks();
            }
        }
    }

    private async Task GetTasks()
    {
        try
        {
            var pagingResponse = await _RoleCPRepo.GetRoleListAsync(_RoleCPSearch);
            _lstRoleCPs = pagingResponse.Items;
            _lstRoleCPs = _lstRoleCPs.OrderBy(x => x.RoleCode).ToList();
            MetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private async Task SelectedPage(int page)
    {
        _RoleCPSearch.PageNumber = page;
        Check = false;
        await GetTasks();
    }

    private void RedirectToCreate()
    {
        NavigationManager.NavigateTo("/createrolecp");
    }
    private void RedirectToUpdate(Guid id)
    {

        var url = Path.Combine("/updaterolecp/", id.ToString());
        NavigationManager.NavigateTo(url);
    }
    void CheckManual(Guid reportId, bool check)
    {
        stt = 0;
        if (check == true)
        {
            foreach (var x in _lstRoleCPs.Where(c => c.Id == reportId))
            {
                x.IsChecked = false;
            }
        }
        if (check == false)
        {
            foreach (var x in _lstRoleCPs.Where(c => c.Id == reportId))
            {
                x.IsChecked = true;
            }
        }
    }
    void DeleteAll()
    {
        stt = 0;
        _removeRole = _lstRoleCPs.Where(c => c.IsChecked == true).Select(c => c.Id).ToList();
        DeleteConfirmation.show();
    }
    void CheckAllExpense(object checkValue)
    {
        stt = 0;
        if (Convert.ToBoolean(checkValue) == false)
        {
            _lstRoleCPs.ToList().ForEach(e => e.IsChecked = false);
        }
        else
        {
            _lstRoleCPs.ToList().ForEach(e => e.IsChecked = true);
        }
    }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {

        stt = 0;
        if (deleteconfirmed && deleteID == null && _removeRole.Count == 0)
        {
            _toastService.ShowError("Bạn chưa chọn đối tượng để thay đổi");
            await GetTasks();
            NavigationManager.NavigateTo($"/rolecp");
        }
        else if (deleteconfirmed && deleteID != null)
        {
            var result = await _RoleCPRepo.DeleteRole(Guid.Parse(deleteID));
            if (result == true)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                deleteID = null;
                await GetTasks();
                NavigationManager.NavigateTo($"/rolecp");
            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");
                deleteID = null;
                await GetTasks();
                NavigationManager.NavigateTo($"/rolecp");
            }
        }
        else if (deleteconfirmed && _removeRole != null)
        {

            var result = await _RoleCPRepo.RemoveListRole(_removeRole);
            if (result)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                deleteID = null;
                _removeRole = null;
                await GetTasks();
                NavigationManager.NavigateTo($"/rolecp");
            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");
                deleteID = null;
                _removeRole = null;
                await GetTasks();
                NavigationManager.NavigateTo($"/rolecp");
            }
        }
        else
        {
            deleteID = null;
            _removeRole = null;
        }
        Check = false;
    }
}