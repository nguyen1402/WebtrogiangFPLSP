@page "/loadingpage/{GetIdUser}"
@using AntDesign
@using FPLSP.Data.FPLExam;
@using FPLSP.Repositories.Interfaces.FPLExam;
@using FPLSP.Server.Domain.Entities.CoresParts;
@using FPLSP.Server.Domain.Entities.FPLExam;
@using FPLSP.Server.Infrastructure.ViewModels.FPLExam;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using SixLabors.Fonts;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Drawing;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using SixLabors.ImageSharp.Processing;
@using System.Text;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout MainLayout
@inject IMessageService message;
@inject SweetAlertService Swal;
@inject ModalService _modalService
@inject IMessageService _message
@inject IJSRuntime JSRuntime

<Steps Current="current" Class="indafuckinhtop">
    @foreach (var item in steps)
    {
        <Step Subtitle="@item.Content" Title="@item.Title" />
    }
</Steps>

<div class="steps-content">

    @if (current == 0)
    {
        <div class="mt-5">
            <Search Placeholder="Nhập Mã Ở Đây" Size="@InputSize.Large" EnterButton="@("Search")" @bind-Value="@txtValue" Class="mt-5" OnSearch="OnSearch" />
        </div>
    }
    @if (current == 1)
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Máy Ảnh</div>
                    </div>

                    <div class="card-body">
                        <div id="cameramer" style="width: 320px;height: 240px;align-content: center;padding-left:120px;">
                        </div>


                    </div>
                    <div class="card-footer">
                       @* @if (IsShowInput)
                        {

                            <input class="form-control mb-3 mt-2" required type="text" @bind="captionText" placeholder="Nhập họ tên và mã sinh viên" />
                        }*@
                    </div>
                </div>




            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Hình Ảnh</div>
                    </div>

                    <div class="card-body">
                        <div id="results">
                            @if (stringList.Count() > 0)
                            {
                                @foreach (var item in stringList)
                                {

                                    <img src="@item" alt="Alternate Text" />

                                }
                            }
                            else
                            {
                                <Empty />
                            }

                        </div>
                    </div>
                    <div class="card-footer">
                    </div>

                </div>



            </div>
        </div>


        @if (current > 0)
        {
            <Button Type="primary" class="mt-4" OnClick="@OnPreClick">
                Quay Lại
            </Button>
        }
        @if (IsShowCotrol)
        {
            <Button Type="primary" class="mt-4" OnClick="@ShowModal">
                Mở Máy Ảnh
            </Button>
        }
        @if (IsShowTakin)
        {
            <Button Type="primary" class="mt-4" OnClick="@Capture">
                Chụp Ảnh Checkin
            </Button>
        }

        @if (!IsShowCotrol)
        {
            <Button Type="primary" class="mt-4" OnClick="@CLoesed">
                Đóng Máy Ảnh
            </Button>
        }
        @if (stringList.Count() > 0)
        {
            <Button Type="primary" class="mt-4" OnClick="@AcceptImage">
                Xác Nhận
            </Button>

        }



    }
    @if (current == 2)
    {
        <h1>Nội Quy FPL Exam</h1>
        <blockquote>
            <p><q>Đề thi sẽ mở checkin 15p trước khi tiến hành phát đề thi, sinh viên phải thực hiện đúng và đầy đủ các bước checkin để có đủ điều kiện vào phòng thi</q></p>
            <footer>FPL Exam</footer>
        </blockquote>
        <blockquote>
            <p><q>Sau khi vào phòng thi nếu chưa đến giờ thi sinh viên có thể thoát ra vào lại được, nếu đã đến giờ phát đề thi sinh viên thoát ra ngoài thì phải được giảng viên chấp thuận vào phòng thi thì sinh viên mới được vào</q></p>
            <footer>FPL Exam</footer>
        </blockquote>
        <blockquote>
            <p><q>Trong suốt quá trình thi vui lòng sinh viên không được phép chụp lại ảnh đề thi hay tiết lộ ra bên ngoài nếu phát hiện được sinh viên sẽ bị xử lí và kỉ luật</q></p>
            <footer>FPL Exam</footer>
        </blockquote>
        <blockquote>
            <p><q>Sau khi đề thi hết kết thúc, đề thi sẽ tự động thu hồi và sẽ chỉ cho mỗi sinh viên được phép mở 1 lần duy nhất với mục đích để kiểm tra đối chiếu với giám thị</q></p>
            <footer>FPL Exam</footer>
        </blockquote>
        <blockquote>
            <p><q>Trong suốt quá trình thi nếu có sự cố lập tức báo trực tiếp với giám thị</q></p>
            <footer>FPL Exam</footer>
        </blockquote>
        <blockquote>
            <p><q>Chúc các bạn sinh viên hoàn thành tốt bài thi</q></p>
            <footer>ALl For Love : FPL Exam</footer>
            <Button Type="primary" class="mt-4 mt-2" OnClick="@OnPreClick">
                Quay Lại
            </Button>
            <Button Type="primary" class="mt-4" OnClick="@JoinOnlineExamRoom">
                Vào Phòng Thi
            </Button>
        </blockquote>

    }
    <div class="row d-flex justify-content-center mb-5">
    </div>

</div>



<style>
    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 40px;
        margin-bottom: 16px;
    }

    .steps-action {
        margin-top: 20px;
    }

    .ant-steps {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        top: 120px;
        left: 10px;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        display: flex;
        width: 100%;
        text-align: initial;
    }

</style>



@code {
    private string txtValue = "";

    [Inject] public UserManager<UserSignIn> _userManager { get; set; }
    List<string> stringList = new List<string>();
    private string captionText;
    FontCollection collection = new FontCollection();
    private bool IsShowInput = false;
    private bool IsShowCotrol = true;
    private bool IsShowTakin = false;
    Font captionFont;
    private string frameUri;
    private bool IsShowCurrent1 = false;
    [Parameter]
    public string GetIdUser { get; set; }
    RenderFragment icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;
    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }
    public int current { get; set; } = 0;
    public StepItem[] steps =
      {
        new StepItem {Title = "Bước 1:", Content = "Nhập Mã Do Giám Thị Cung Cấp"},
        new StepItem {Title = "Bước 2:", Content = "Tiến Hành Checkin Bằng WebCam"},
        new StepItem {Title = "Bước 3:", Content = "Xác Nhận Nội Quy"},

    };
    [Inject] public IExaminationRoomDetailRepo _examinationRoomDetailRepo { get; set; }
    [Inject] public IOnlineExamRoomRepo _onlineExamRoomRepo { get; set; }

    private byte[] GetImage;
    private List<ExaminationRoomDetail> _lstExamDetailer = new List<ExaminationRoomDetail>();
    private List<OnlineExamRoom> _lstUser = new List<OnlineExamRoom>();


    private string getEmail = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {

            _lstExamDetailer = await _examinationRoomDetailRepo.GetAllExaminationRoomDetail();
            _lstUser = await _onlineExamRoomRepo.GetAllOnlineExamRoom();
            //captionFont = SystemFonts.CreateFont("Ubuntu", 20, FontStyle.Italic);
        }

    }

    public async void CLoesed()
    {
        await JSRuntime.InvokeVoidAsync("stopVideo", "camera");
        IsShowInput = false;
        IsShowCotrol = true;
        IsShowTakin = false;
        StateHasChanged();
    }
    private async Task AcceptImage()
    {
        await JSRuntime.InvokeVoidAsync("stopVideo", "camera");
        IsShowInput = false;
        IsShowCotrol = true;
        IsShowTakin = false;
        StateHasChanged();
        current++;
    }
    private async Task JoinOnlineExamRoom()
    {
        if (string.IsNullOrEmpty(txtValue))
        {


            await Swal.FireAsync(
        "Thất Bại",
        "Mã Tham Gia Không Thể Để Trống !",
        SweetAlertIcon.Error
        );

            return;

        }


        var ExamRoom = await _examinationRoomDetailRepo.GetExaminamRoomDetailBySecret(txtValue);
        var lonebo = await _onlineExamRoomRepo.GetOnlineExamRoomById(txtValue);
        //xử lý thêm  thông tin sinh viên ở đây
        OnlineExamViewModel onlineExamViewModel = new OnlineExamViewModel()
            {
                IdUser = GetIdUser,
                SecretKey = txtValue,
                IdExaminationRoom = ExamRoom.IdExaminationRoom,
                JoinTime = DateTime.Now,
                StartTime = ExamRoom.StartTime,
                CountTurnJoin = 0,
                ChekinImage = Encoding.ASCII.GetBytes(frameUri),
                EndTime = ExamRoom.StartTime.AddMinutes(ExamRoom.TotalTimeOfExam),
                LeaveTime = ExamRoom.EndTime,
                Status = 0,
                IndexOfStudent = lonebo.Count() == 0 ? 1 : lonebo.Max(c => c.IndexOfStudent) + 1,
                Note = "",
                IsCompletedExam = false,
                IsViewExamFile = true,

            };
        var res = await _onlineExamRoomRepo.AddOnlineExamRoom(onlineExamViewModel);
        if (res)
        {
            
            await Swal.FireAsync(
        "Thành Công",
        "Vui lòng chờ điều hướng đến phòng thi ",
        SweetAlertIcon.Success
        );
         NavigationManager.NavigateTo($"/onlineroomhandler/{txtValue}/{GetIdUser}",true);
           

        }
           
        


    }
    async Task OnPreClick()
    {
        current--;
    }

    async Task OnNextClick()
    {
        current++;
    }
    //
    private bool loading;



    public async Task OnSearch()
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Xác Nhận Vào Phòng Thi",
                Text = "Bạn Có Muốn Vào Phòng Thi Hay Không ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Đồng Ý",
                CancelButtonText = "Hủy"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {

            if (_lstExamDetailer.Any(c => c.SecretKey == txtValue))
            {

                if (_lstUser.Any(c => c.SecretKey == txtValue && c.IdUser == c.IdUser))
                {
                    var lastesstUserExam = await _onlineExamRoomRepo.GetScretKeyLastestForUser(GetIdUser);
                    if (lastesstUserExam.IdUser != null)
                    {
                        var findkey =  _lstExamDetailer.FirstOrDefault(c => c.SecretKey == txtValue);
                        if (DateTime.Now >= findkey.EndTime)
                        {
                            SweetAlertResult result2 = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = $"Thông Báo",
                                    Text = "Phòng thi này đã kết thúc bạn có muốn tới trang thông báo hay không ?",
                                    Icon = SweetAlertIcon.Warning,
                                    ShowCancelButton = true,
                                    ConfirmButtonText = "Đồng Ý",
                                    CancelButtonText = "Hủy"
                                });

                            if (!string.IsNullOrEmpty(result2.Value))
                            {
                                NavigationManager.NavigateTo($"onlineroomhandler/{lastesstUserExam.SecretKey}/{GetIdUser}", true);

                            }

                            else if (result2.Dismiss == DismissReason.Cancel)
                            {

                                await Swal.FireAsync(
                                     "Thông Báo",
                                     "Hủy điều hướng",
                                     SweetAlertIcon.Error
                                     );

                                return;
                            }
                        }









                        NavigationManager.NavigateTo($"onlineroomhandler/{lastesstUserExam.SecretKey}/{GetIdUser}", true);
                        
                    }

                }
                var getcompare = _lstExamDetailer.Find(c => c.SecretKey == txtValue);

                //check làm thủ tục trước 15 phút
                if ((getcompare.StartTime - DateTime.Now).TotalMinutes >= 15)
                {

                    await Swal.FireAsync(
                                "Thông Báo",
                                $"Bạn không thể checkin vào thời điểm này, phòng thi sẽ mở checkin vào {Convert.ToDateTime(getcompare.StartTime.AddMinutes(-15))} ",
                                SweetAlertIcon.Info
                                );
                    return;
                }
                else
                {
                    if (_lstUser.Any(c => c.IdUser == GetIdUser))
                    {
                        var lastesstUserExam = await _onlineExamRoomRepo.GetScretKeyLastestForUser(GetIdUser);

                        //check xem có đang trong quá trình thi nào không nếu có thì cảnh báo ngay

                        if (lastesstUserExam.StartTime <= DateTime.Now && lastesstUserExam.EndTime >= DateTime.Now)
                        {
                            SweetAlertResult result2 = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = $"Cảnh Báo !",
                                    Text = "Bạn đã checkin và quá trình thi môn đang được diễn ra, Nếu bạn muốn thi môn khác vui lòng bấm xác nhận xóa tiến trình thi môn hiện tại",
                                    Icon = SweetAlertIcon.Warning,
                                    ShowCancelButton = true,
                                    ConfirmButtonText = "Đồng Ý",
                                    CancelButtonText = "Hủy"
                                });

                            if (!string.IsNullOrEmpty(result2.Value))
                            {
                                var rester = await _onlineExamRoomRepo.DeleteOnlineExamRoom(lastesstUserExam.SecretKey, GetIdUser);
                                if (rester)
                                {

                                    await Swal.FireAsync(
                                      "Thông Báo",
                                      "Xóa Tiến Trình Thành Công Và Tiếp Tục Checkin",
                                      SweetAlertIcon.Success
                                      );
                                    current++;
                                    IsShowCurrent1 = true;
                                }
                                else
                                {
                                    await Swal.FireAsync(
                                     "Thông Báo",
                                     "Lỗi Xóa Tiến Trình Thất Bại",
                                     SweetAlertIcon.Error
                                     );
                                    return;
                                }

                            }

                            else if (result2.Dismiss == DismissReason.Cancel)
                            {

                                await Swal.FireAsync(
                                     "Thông Báo",
                                     " Xóa Tiến Trình Thất Bại",
                                     SweetAlertIcon.Error
                                     );
                                return;

                            }





                        }
                        else
                        {

                            await Swal.FireAsync(
                        "Thành Công",
                        "Successful",
                        SweetAlertIcon.Success
                        );
                            current++;
                            IsShowCurrent1 = true;
                        }
                    }
                    else
                    {
                        await Swal.FireAsync(
                    "Thành Công",
                    "Successful",
                    SweetAlertIcon.Success
                    );
                        current++;
                        IsShowCurrent1 = true;
                    }
                }
            }
            else
            {

                await Swal.FireAsync(
            "Thất Bại",
            "Không tìm thấy mã mà bạn vừa nhập",
            SweetAlertIcon.Error
            );



            }






        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

            //ở đây xử lý khi hủy upload
            await Swal.FireAsync(
              "Hủy",
              "Đã tham gia",
              SweetAlertIcon.Error
              );
        }

    }
    bool _visible = false;
    bool _loading = false;

    private async void ShowModal()
    {

        await JSRuntime.InvokeAsync<object>("ready");
        IsShowInput = true;
        IsShowCotrol = false;
        IsShowTakin = true;
        StateHasChanged();
    }

    public async void Capture()
    {
        stringList.Clear();
      
        var stringgetter = await JSRuntime.InvokeAsync<string>("take_snapshot");

        byte[] imageData = Convert.FromBase64String(stringgetter.Split(',')[1]);

        //DrawingOptions alignCenter = new DrawingOptions()
        //    {
        //        TextOptions = new TextOptions()
        //        {
        //            VerticalAlignment = VerticalAlignment.Center,
        //            WrapTextWidth = 304, //Image is 320px wide. This will center with 8px margin on left and right
        //            HorizontalAlignment = SixLabors.Fonts.HorizontalAlignment.Center
        //        }
        //    };

        //using (var image = SixLabors.ImageSharp.Image.Load(imageData))
        //{
        //    image.Mutate(x => x
        //        .Flip(FlipMode.Horizontal) //To match mirrored webcam image
        //        .Fill(SixLabors.ImageSharp.Color.ParseHex("0008"), new RectangularPolygon(0, 220, 320, 20)) //Set footer bar for caption
        //        .DrawText(alignCenter, captionText, captionFont, SixLabors.ImageSharp.Color.White, new PointF(8, 230)) //center in footer bar)
        //    );
        //    frameUri = image.ToBase64String(JpegFormat.Instance);
        //}
        frameUri = "data:image/jpeg;base64," + Convert.ToBase64String(imageData);
        stringList.Add(frameUri);
        StateHasChanged();
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        _loading = true;
        await Task.Delay(3000);
        _visible = false;
        _loading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

}
