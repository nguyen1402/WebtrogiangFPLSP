@page "/StudentStatisticsChitiet/{idclassNonDecrypt}/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}"
@using FPLSP.Components.SearchMaSV
@using FPLSP.Data.Securities;
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Domain.Dtos.StudentStatisticVM
@using FPLSP.Server.Infrastructure.ViewModels.StudentStatistics
@attribute [Authorize(Roles = "LecturerFPLSP")]
<div class="row">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">Chuyên ngành: <a style="color:blue;box-shadow: 0 1px" @onclick="() => ResToSpec()"> @lstSpecAll.Where(c=>c.Id == Guid.Parse(specializedId)).Select(c=>c.SpecializationName).FirstOrDefault()</a></li>
            <li class="breadcrumb-item">Môn :<a style="color:blue;box-shadow: 0 1px" @onclick="() => Mon()">@thongtinlop.NameMon</a></li>
            <li class="breadcrumb-item">Lớp :<a style="color:blue;box-shadow: 0 1px" @onclick="() => RedirectToDetails()">@thongtinlop.NameClass</a></li>
            <li class="breadcrumb-item active" aria-current="page">Bài Tập </li>
        </ol>
    </nav>
</div>
<div class="row pt-3">
    <div class="col-md-4">
        @if (@thongtinlop != null)
        {
            <h4>
                Môn : <b>@thongtinlop.NameMon</b> - Lớp <b>@thongtinlop.NameClass</b>
            </h4>
        }
    </div>
    <div class="col-md-1 pl-1">
        <div class="col-lg-12">
            <EditForm Model="@listidlesson">
                <select class="form-select" @onchange="args=>SearchCode(args.Value.ToString()) ">
                    @if (listidlesson != null)
                    {
                        <option value="">Lọc</option>
                        @for (var i = 1; i <= listidlesson.CountLessson; i++)
                        {
                            <option value="@listidlesson.Listidlesson[i-1]">Bài @i</option>
                        }
                    }
                </select>
            </EditForm>
        </div>

    </div>
    <div class="col-md-4">
        <SearchMaSV OnSearch="SearchTask"></SearchMaSV>
    </div>
    <div class="col-md-3">
        <div class="row pl-10">
            <div class="col-md-8 pl-7">
                @* <a class="btn btn-outline-primary" title="Thông tin sinh viên" @onclick="()=> RedirectToDetails()">Thông tin sinh viên</a>*@
            </div>
            <div class="col-md-2">
                <a class="btn btn-outline-danger" @onclick="() => Quaylai()" title="Quay lại"><i class="bi bi-arrow-return-right"></i></a>
            </div>
        </div>
    </div>
</div>
@if (flag == true)
{
    <LoadingIndicator></LoadingIndicator>
}
else if (thongtinlop != null && CPList.Count() > 0)
{
    <div class="row">

        <div class="row">
            @*<h6 class="col-md-2">
        Tổng sinh viên : <span class="badge bg-primary">@counttong</span>
        </h6>*@
            <h6 class="col-md-2">
                Sinh viên hiển thị : <span class="badge bg-warning">@CPList.Count</span>
            </h6>
            @if (@CPList[0].CountSubmit == 0 && @CPList[0].CountDonSubmit == 0)
            {
                <h6 class="col-md-2">
                    Đã nộp đủ : <span class="badge bg-success">@thongtinlop.CountSubmit</span>
                </h6>
                <h6 class="col-md-2">
                    Chưa nộp đủ : <span class="badge bg-danger">@thongtinlop.CountDonSubmit</span>
                </h6>
            }
            else
            {
                <h6 class="col-md-2">
                    Nộp đủ : <span class="badge bg-success">@CPList[0].CountSubmit</span>
                </h6>
                <h6 class="col-md-2">
                    Chưa nộp đủ : <span class="badge bg-danger">@CPList[0].CountDonSubmit</span>
                </h6>
            }
        </div>

    </div>

    <div class="row">
        <table class="table">
            <thead class="text-center">
                <tr>
                    <th style="width: 2%">Mã SV</th>
                    <th style="width: 8%">Họ Tên</th>

                    @for (var i = 1; i <= thongtinlop.CountLessson; i++)
                    {
                        <th style="width: 6%">Bài @i</th>
                    }
                </tr>
            </thead>
            <tbody class="text-center">
                @*<div class="position-absolute top-50 start-50">
                    @if (flag == true)
                    {
                        <h6 class="col-md-2">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </h6>
                    }
                </div>*@
                @foreach (var item in CPList)
                {
                    <tr>
                        <td class="align-middle">
                            @item.StudentCode
                        </td>
                        <td class="align-middle">
                            @item.StudentName
                        </td>
                        @{
                            int i = 0;
                        }
                        @foreach (var item2 in item.Listidlesson)
                        {

                            @if (item2 == item.Link[i].Idbaihoc)
                            {
                                <td class="align-middle">
                                    <a class="btn btn-outline-primary" @onclick="() => OnButton(idclass,subjectId,item2.ToString(),item.IdStudent.ToString())">
                                        @_lsSubmit.Where(c=>c.IdClass == Guid.Parse(idclass) && c.IdSubject == Guid.Parse(subjectId) && c.IdLesson == item2 && c.IdStudent == item.IdStudent && c.Status == 1).Count()
                                        /
                                        @_lsSubmit.Where(c=>c.IdClass == Guid.Parse(idclass) && c.IdSubject == Guid.Parse(subjectId) && c.IdLesson == item2 && c.IdStudent == item.IdStudent).Count()
                                    </a> @*thongtinlop.Listidlesson[0].ToString(),CPList[4].IdStudent.ToString()*@
                                </td>
                            }
                            else
                            {
                                <td style="color : black; text-decoration: none" class="align-middle">Bài tập rỗng</td>
                            }
                            i++;
                        }

                    </tr>
                }
            </tbody>
        </table>

    </div>
}
else
{
    @if (encounter != 14)
    {
        <LoadingIndicator></LoadingIndicator>
    }
    else
    {
        <h5>Danh sách sinh viên trống</h5>
    }

}
<div class="footer text-muted">
    <div class="row mt-3">

        <span>
            <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
        </span>

    </div>
</div>

<ViewHomeworkStudents @ref="viewHomeworkStudents">
</ViewHomeworkStudents>

@code
{
    [Parameter]
    public string specializedIdNonDecrypt { get; set; }
    [Parameter]
    public string lecuIdNonDecrypt { get; set; }
    [Parameter]
    public string subjectIdNonDecrypt { get; set; }

    [Parameter]
    public string idclassNonDecrypt { get; set; }

    public string specializedId = "";

    public string lecuId = "";

    public string subjectId = "";

    public string idclass = "";

    private Thongtinlop thongtinlop = new Thongtinlop();
    private Thongtinlop listidlesson = new Thongtinlop();
    ViewHomeworkStudents viewHomeworkStudents { get; set; }

    private List<SubmitHomeWorkDtos> _ls = new List<SubmitHomeWorkDtos>();

    //public List<QuizSummit> Quiz = new List<QuizSummit>();
    public List<StudentStatisticsDtos> CPList { get; set; } = new List<StudentStatisticsDtos>();
    public MetaData MetaData { get; set; } = new MetaData();

    private List<SubmitHomeWorkDtos> _lsSubmit = new List<SubmitHomeWorkDtos>();

    private StudentStatisticListSearch _parameters = new StudentStatisticListSearch();
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public IStudentUPRepo _iStudentUPRepo { get; set; }
    [Inject]
    public ISubmitHomeWorkApiClient _iSubmitHomeWorkApiClient { get; set; }
    [Parameter]
    public EventCallback<StudentStatisticListSearch> OnSearch { set; get; }
    public List<SpecializedDto> lstSpecAll { get; set; } = new List<SpecializedDto>();
    [Inject]
    public ISpecializedCPRepo _iSpecializedClient { get; set; }

    [Inject]
    public IClassSubjectApiClient _iClassSubjectApiClient { get; set; }
    int counttong;
    //private StudentStatisticListSearch lessonContentListSearch = new StudentStatisticListSearch();
    private int encounter;
    public string Error { get; set; }
    bool flag { get; set; } = false;
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    protected async override Task OnInitializedAsync()
    {
        lecuId = _cryptoServices.Decrypt(lecuIdNonDecrypt.Replace("I0H", "/"));
        subjectId = _cryptoServices.Decrypt(subjectIdNonDecrypt.Replace("I0H", "/"));
        idclass = _cryptoServices.Decrypt(idclassNonDecrypt.Replace("I0H", "/"));
        specializedId = _cryptoServices.Decrypt(specializedIdNonDecrypt.Replace("I0H", "/"));

        thongtinlop = await _iStudentUPRepo.Thongtinlop(Guid.Parse(idclass), Guid.Parse(subjectId));
        listidlesson = await _iStudentUPRepo.Thongtinlop(Guid.Parse(idclass), Guid.Parse(subjectId));
        counttong = await _iClassSubjectApiClient.Soluongsinhvientronglop(Guid.Parse(idclass), Guid.Parse(subjectId));
        lstSpecAll = await _iSpecializedClient.GetAll();
        _lsSubmit = await _iSubmitHomeWorkApiClient.GetALl();
        await GetTasks();
    }
    public async Task SearchTask(StudentStatisticListSearch lessonContentListSearch)
    {
        flag = true;
        if (lessonContentListSearch.Masv == null)
        {
            listidlesson = new Thongtinlop();
            listidlesson = await _iStudentUPRepo.Thongtinlop(Guid.Parse(idclass), Guid.Parse(subjectId));
        }
        _parameters = lessonContentListSearch;
        await GetTasks();
    }
    private async Task RedirectToBaiHoc()
    {
        var url = Path.Combine($"/ListLessonClassUP/{idclass}/{specializedId}/{lecuId}/{subjectId}");
        NavigationManager.NavigateTo(url);
    }
    private async Task RedirectToDetails()
    {
        var url = Path.Combine($"/ViewChiTitet/{idclassNonDecrypt}/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        NavigationManager.NavigateTo(url);
    }
    private async Task RedirectToChitiet(Guid? idclass)
    {
        var url = Path.Combine($"/StudentStatisticsChitiet/{idclass}/{specializedId}/{lecuId}/{subjectId}");
        NavigationManager.NavigateTo(url);
    }
    private async Task Quaylai()
    {
        var url = Path.Combine($"/ViewChiTitet/{idclassNonDecrypt}/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        NavigationManager.NavigateTo(url);
    }
    private async Task Mon()
    {
        var url = Path.Combine($"/Giaovien/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        NavigationManager.NavigateTo(url);
    }
    private async Task ResToSpec()
    {
        var url = Path.Combine($"/LectuterSpecializedSubjectls/{lecuIdNonDecrypt}/{specializedIdNonDecrypt}");
        NavigationManager.NavigateTo(url);
    }
    private async Task GetTasks()
    {
        try
        {
            flag = true;
            for (var i = 0; i < 15; i++)
            {
                encounter = i;
            }
            var pagingResponse = await _iStudentUPRepo.StudentStatisticsDtos(Guid.Parse(idclass), Guid.Parse(subjectId), _parameters);
            CPList = pagingResponse.Items;
            MetaData = pagingResponse.MetaData;
            flag = false;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

    }


    private async Task SelectedPage(int page)
    {
        _parameters.PageNumber = page;
        await GetTasks();
    }

    public async Task SearchCode(string code)
    {
        _parameters.trangthai = code;
        await GetTasks();
    }

    private async Task OnButton(string idclass1, string subjectId, string idlesoon, string idstudent1)
    {
        viewHomeworkStudents.show(idclass1, subjectId, idlesoon, idstudent1);
        //idclass1 = idclass;
    }
    //private async Task pushTextAre(string idclass1)
    //{
    //    idclass1 = idclass;
    //}
    private async Task OnConfirmationUpdate(bool submitConfirmed)
    {
        if (submitConfirmed)
        {
            _ls.Clear();
        }
        else
        {
            _ls.Clear();
        }
    }
}
