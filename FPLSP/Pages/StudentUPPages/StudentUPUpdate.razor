@page "/StudentUPUpdate/{id:guid}"
@using Microsoft.AspNetCore.Components
@using FPLSP.Server.Infrastructure.ViewModels.StudentsUPVm
@using Blazored.Toast.Services
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Domain.Dtos.StudentUPDtos
@using FPLSP.Server.Domain.Entities.UserParts
@using Blazored.LocalStorage
@layout MainLayout2 

@attribute [Authorize(Roles = "LecturerFPLSP")]
<div class="row pt-3">
<h3>Cập Nhập thông tin</h3>
@if (_studentsUPUpdateVm != null)
{
    <EditForm Model="_studentsUPUpdateVm" OnValidSubmit="Update" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="text-danger"></div>
    <div class="form-group">
    <div class="row">
    <div class="col-2 pt-4">
        <div class="row">
            <img src="@_studentsUPUpdateVm.ImageUrl" onerror="this.src='./css/images/Others/logoFPT.png'" width=195px height=232px style="object-fit:contain">
        </div>
        <div class="row">
            <div class="form-group">
                <label for="image" class="col-12 col-form-label">Hình Ảnh</label>
                @if (@ImgUrl != null)
                {
                    <div class="col-12">
                        <ImageUpload OnChange="AssignImageUrl" />
                    </div>
                }
                else
                {
                    <div class="col-12">
                        <ImageUpload OnChange="AssignImageUrl" />
                    </div>
                }
            </div>
        </div>

    </div>
    <div class="col-10 pt-1">
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Mã Sinh Viên</label>
                <div class="col-md-12">
                    <input id="name" class="form-control" value="@_studentsUPUpdateVm.StudentCode" disabled />
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Tên Sinh Viên</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.StudentName" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.StudentName)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-3 col-form-label">Ngày sinh</label>
                <div class="col-12">
                    <InputDate id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.DateOfBirth" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.DateOfBirth)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Giới tính:</label>
                <div class="col-md-12">
                    <InputSelect class="form-select" @bind-Value="_studentsUPUpdateVm.Gender">
                        <option value="false">Nam</option>
                        <option value="true">Nữ</option>
                    </InputSelect>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Email</label>
                <div class="col-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.Email" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.Email)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Password</label>
                <div class="col-12">
                    <InputText id="name" type="password" class="form-control" @bind-Value="_studentsUPUpdateVm.Password" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.Password)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-3 col-form-label">Số điện thoại</label>
                <div class="col-12">
                    <InputText id="name"  class="form-control" @bind-Value="_studentsUPUpdateVm.PhoneNumber" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.PhoneNumber)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Địa chỉ</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.Address" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.Address)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-3 col-form-label">CCCD/CMT</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.IdentityCardNumber" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.IdentityCardNumber)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-3 col-form-label">Ngày cấp</label>
                <div class="col-md-12">
                    <InputDate id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.IssuedOn" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.IssuedOn)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Dân tộc</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.Ethnic" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.Ethnic)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Quê quán</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.HomeTown" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.HomeTown)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Tên Cha</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.FathersName" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.FathersName)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Tên Mẹ</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.MotherName" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.MotherName)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Mô tả</label>
                <div class="col-md-12">
                    <InputText id="name" class="form-control" @bind-Value="_studentsUPUpdateVm.Description" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _studentsUPUpdateVm.Description)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group pt-2 col-6">
                <label for="name" class="col-2 col-form-label">Trạng thái</label>
                <div class="col-md-12">
                    <InputSelect @bind-Value="_studentsUPUpdateVm.Status" class="form-select">
                        <option value="1">Đang Hoạt động</option>
                        <option value="0">Không Hoạt động</option>
                    </InputSelect>
                </div>
            </div>
        </div>
    </div>

    @*                        <div class="row">
                <div class="form-group pt-2 col-6">

                <label for="image" class="col-2 col-form-label">Hình Ảnh:</label>
                @if (flag == false)
                {
                <div class="form-group row">
                <img src="@_studentsUPUpdateVm.ImageUrl" alt="product image" style="width:100px;" />
                </div>
                }
                <div class="col-2">
                <ImageUpload OnChange="AssignImageUrl" />
                </div>
                </div>
                </div>
                <div class="row">*@

    <div class="row pt-2">
        <div class="col-4"></div>
        <div class="col-4" style="text-align: center">
            <button type="submit" class="btn btn-primary me-2">Cập Nhật</button>
            <button type="button" class="btn btn-success me-2" @onclick="Restore">Khôi Phục</button>
            <a class="btn btn-danger" @onclick="Exit">Quay Lại</a>
        </div>
        <div class="col-4"></div>
    </div>
    </div>
    </div>

    </EditForm>
}
else
{
    <LoadingIndicator></LoadingIndicator>
}
</div>
@code
{
    private StudentUpdateVM _studentsUPUpdateVm = new StudentUpdateVM();

    [Inject] private IToastService _toastService { get; set; }
    [Inject] private IStudentUPRepo studentUPRepo { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public ILocalStorageService _localStorage { get; set; }

    bool flag = false;

    [Parameter]
    public Guid Id { get; set; }
    public List<StudentUP> ListStudentUps { get; set; } = new List<StudentUP>();
    public string ImgUrl { get; set; }
    public string userEmail { get; set; }
    public bool ShowAuthError { get; set; }
    public StudentUpDto Student { get; set; } = new StudentUpDto();


    protected async override Task OnInitializedAsync()
    {
        await Get(); ListStudentUps = new List<StudentUP>();
        ListStudentUps = await studentUPRepo.GetAllStudentUPAsync();
        //var fistusername = await _localStorage.GetItemAsStringAsync("userlogin", null);
        //var UserNameDisPlay = fistusername.Split("@")[0];
        //UserNameDisPlay = UserNameDisPlay.Replace('"', ' ');
        //UserNameDisPlay = UserNameDisPlay.Replace('/', ' ');
        //UserNameDisPlay = UserNameDisPlay.Replace(" ", "");
        userEmail = Student.Email;
    }
    private async Task Get()
    {
        var studentUp = await studentUPRepo.GetStudentUPById(Id);
        var updateVm = new StudentsUPUpdateVm()
            {
                Email = studentUp.Email,
                Ethnic = studentUp.Ethnic=="default"? "":studentUp.Ethnic,
                Address = studentUp.Address == "default" ? "" : studentUp.Address,
                DateOfBirth = studentUp.DateOfBirth,
                Description = studentUp.Description == "default" ? "" : studentUp.Description,
                FathersName = studentUp.FathersName == "default" ? "" : studentUp.FathersName,
                Gender = studentUp.Gender,
                HomeTown = studentUp.HomeTown == "default" ? "" : studentUp.HomeTown,
                IdentityCardNumber = studentUp.IdentityCardNumber=="default"? "":studentUp.IdentityCardNumber,
                ImageUrl = studentUp.ImageUrl=="default"? "":studentUp.ImageUrl,
                IssuedOn = studentUp.IssuedOn,
                MotherName = studentUp.MotherName == "default" ? "" : studentUp.MotherName,
                Password = studentUp.Password,
                PhoneNumber = studentUp.PhoneNumber == "default" ? "" : studentUp.PhoneNumber,
                Status = studentUp.Status,
                StudentName = studentUp.StudentName == "default" ? "" :studentUp.StudentName,
                StudentCode = studentUp.StudentCode
            };
        _studentsUPUpdateVm = new StudentUpdateVM()
        {
            Email = updateVm.Email,
            Ethnic = updateVm.Ethnic,
            Address = updateVm.Address,
            DateOfBirth = updateVm.DateOfBirth,
            Description = updateVm.Description,
            FathersName = updateVm.FathersName,
            Gender = updateVm.Gender,
            HomeTown = updateVm.HomeTown,
            IdentityCardNumber = updateVm.IdentityCardNumber,
            ImageUrl = updateVm.ImageUrl,
            IssuedOn = updateVm.IssuedOn,
            MotherName = updateVm.MotherName,
            Password = updateVm.Password,
            PhoneNumber = updateVm.PhoneNumber,
            Status = updateVm.Status,
            StudentName = updateVm.StudentName,
            StudentCode = updateVm.StudentCode

            //Email = studentUp.Email,
            //Ethnic = studentUp.Ethnic,
            //Address = studentUp.Address,
            //DateOfBirth = studentUp.DateOfBirth,
            //Description = studentUp.Description,
            //FathersName = studentUp.FathersName,
            //Gender = studentUp.Gender,
            //HomeTown = studentUp.HomeTown,
            //IdentityCardNumber = studentUp.IdentityCardNumber,
            //ImageUrl = studentUp.ImageUrl,
            //IssuedOn = studentUp.IssuedOn,
            //MotherName = studentUp.MotherName,
            //Password = studentUp.Password,
            //PhoneNumber = studentUp.PhoneNumber,
            //Status = studentUp.Status,
            //StudentName = studentUp.StudentName,
            //StudentCode = studentUp.StudentCode
        };
        Student = studentUp;
        ImgUrl = studentUp.ImageUrl;
    }


    private async Task Update()
    {
        //if (CheckInfomationChanged(_studentsUPUpdateVm))
        //{
        //    Navigation.NavigateTo($"/StudentUPUpdate/{Id}");
        //}
        //else
        if (CheckCMT(_studentsUPUpdateVm.IdentityCardNumber) && (_studentsUPUpdateVm.IdentityCardNumber != Student.IdentityCardNumber))
        {
            _toastService.ShowError("CCCD bị trùng");
            ShowAuthError = true;
            Navigation.NavigateTo($"/StudentUPUpdate/{Id}");
        }
        else if (CheckPhoneNumber(_studentsUPUpdateVm.PhoneNumber) && (_studentsUPUpdateVm.PhoneNumber != Student.PhoneNumber))
        {
            _toastService.ShowError("Số điện thoại bị trùng");
            ShowAuthError = true;
            Navigation.NavigateTo($"/StudentUPUpdate/{Id}");
        }
        else if (CheckMail(_studentsUPUpdateVm.Email) && (_studentsUPUpdateVm.Email != Student.Email))
        {
            _toastService.ShowError("Email bị trùng");
            ShowAuthError = true;
            Navigation.NavigateTo($"/StudentUPUpdate/{Id}");
        }
        else
        {
            var result = await studentUPRepo.UpdateStudentUP(Id, _studentsUPUpdateVm);
            if (result != 1)
            {
                _toastService.ShowError("Lỗi không thêm được Sinh viên");
                ShowAuthError = true;
                Navigation.NavigateTo($"/StudentUPUpdate/{Id}");
            }
            else
            {
                _toastService.ShowSuccess("Sửa Thành Công");
                Navigation.NavigateTo($"/viewclass/{Student.Email.Replace(".","-")}");
            }
        }
    }

    private bool CheckInfomationChanged(StudentsUPUpdateVm _studentsUpUpdateVm)
    {
        var flag = false;
        if (_studentsUPUpdateVm.ImageUrl == Student.ImageUrl &&
            _studentsUPUpdateVm.StudentName == Student.StudentName &&
            _studentsUPUpdateVm.Address == Student.Address &&
            _studentsUPUpdateVm.DateOfBirth == Student.DateOfBirth &&
            _studentsUPUpdateVm.Description == Student.Description &&
            _studentsUPUpdateVm.Email == Student.Email &&
            _studentsUPUpdateVm.Ethnic == Student.Ethnic &&
            _studentsUPUpdateVm.FathersName == Student.FathersName &&
            _studentsUPUpdateVm.IdentityCardNumber == Student.IdentityCardNumber &&
            _studentsUPUpdateVm.Gender == Student.Gender &&
            _studentsUPUpdateVm.ImageUrl == Student.ImageUrl &&
            _studentsUPUpdateVm.MotherName == Student.MotherName &&
            _studentsUPUpdateVm.PhoneNumber == Student.PhoneNumber &&
            _studentsUPUpdateVm.HomeTown == Student.HomeTown &&
            _studentsUPUpdateVm.Password == Student.Password &&
            _studentsUPUpdateVm.IssuedOn == Student.IssuedOn &&
            _studentsUPUpdateVm.Status == Student.Status) flag = true;

        return flag;

    }
    private void AssignImageUrl(string Image)
    {
        _studentsUPUpdateVm.ImageUrl = Image;
        flag = true;
    }

    private void Exit()
    {
        Navigation.NavigateTo($"/viewclass/{Student.Email.Replace(".","-")}");
    }
    private async Task Restore()
    {
        await OnInitializedAsync();
    }
    private bool CheckMail(string mail)
    {
        var checkExited = ListStudentUps.Any(c => Equals(mail, c.Email));
        return checkExited;
    }
    private bool CheckCMT(string CCCD)
    {
        var checkExited = ListStudentUps.Any(c => Equals(CCCD, c.IdentityCardNumber));
        return checkExited;
    }
    private bool CheckPhoneNumber(string phoneNumber)
    {
        var checkExited = ListStudentUps.Any(c => Equals(phoneNumber, c.PhoneNumber));
        return checkExited;
    }
}
