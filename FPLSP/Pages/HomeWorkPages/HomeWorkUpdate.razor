@page "/Homeworkupdate/{idclass}/{subjectId}/{idlesson}/{lecuId}/{specializedId}/{idhomework}"
@using Blazored.Toast.Services
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Domain.Entities.UserParts
@using FPLSP.Server.Infrastructure.ViewModels.HomeWork
<div class="row pt-3">

    <h3>Cập nhật link bài tập</h3>

    @if (ShowAuthError)
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    <EditForm Model="sumit" OnValidSubmit="Update" class="card card-body bg-light mt-5">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="form-group pt-2 col-md-6">
                <div class="col-md-12">
                    <InputText placeholder="Nhập link bài tập" class="form-control" @bind-Value="sumit.LinkHomeWork"></InputText>
                    <ValidationMessage For="@(() => sumit.LinkHomeWork)" />
                </div>
            </div>
            <div class="form-group row pt-2 col-md-6">
                <div class="col-3">
                    <button type="submit" class="btn btn-success">Cập nhật</button>
                </div>
                <div class="col-3">
                    <a @onclick="()=>Quaylai()" class="btn btn-danger">Quay Lại</a>
                </div>
            </div>

        </div>
    </EditForm>

</div>
@code{
    [Parameter]
        public string specializedId { get; set; }
        [Parameter]
        public string lecuId { get; set; }
        [Parameter]
        public string subjectId { get; set; }

        [Parameter]
        public string idclass { get; set; }

        [Parameter]
        public string idlesson { get; set; }
        [Parameter]
        public string idhomework { get; set; }

        private HomeWorkUpdateVM sumit = new HomeWorkUpdateVM();
        private HomeWork home;
        [Inject]
        public NavigationManager Navigation { get; set; }

        [Inject]
        public IHomeWorkClient _iHomeWorkClient { get; set; }

        [Inject] private IToastService _toastService { get; set; }
        public bool ShowAuthError { get; set; }
        [Parameter]
        public string Error { get; set; }

        protected async override Task OnInitializedAsync()
        {
            home = new HomeWork();
            home = await  _iHomeWorkClient.Getbyid(Guid.Parse(idhomework));
            sumit.LinkHomeWork = home.LinkHomeWork;
        }
        private async Task Update()
        {
            ShowAuthError = false;
            var result = await _iHomeWorkClient.UpdateCP(Guid.Parse(idhomework),sumit);

            if (result != 1)
            {
                _toastService.ShowError("Bản ghi đã tồn tại !");
                Navigation.NavigateTo($"/Homeworkupdate/{idclass}/{subjectId}/{idlesson}/{lecuId}/{specializedId}/{idhomework}");
            }
            else
            {
                _toastService.ShowSuccess("Cập nhật thành công");
                Navigation.NavigateTo($"/HomeWorklist/{idclass}/{lecuId}/{subjectId}/{specializedId}/{idlesson}");
            }
        }

        private void ClearForm()
        {
            sumit.LinkHomeWork = "";
        }
        private void Quaylai()
        {
            Navigation.NavigateTo($"/HomeWorklist/{idclass}/{lecuId}/{subjectId}/{specializedId}/{idlesson}");
        }
}