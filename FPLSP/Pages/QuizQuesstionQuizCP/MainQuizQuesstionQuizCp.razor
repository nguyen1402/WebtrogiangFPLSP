@page "/quizQuesstionQuizCP/{idspecializedNonDecrypt}/{idsubjectNonDecrypt}/{idquizNonDecrypt}"
@using Blazored.Toast.Services
@using FPLSP.Components.QuizQuesstionQuizCPComponents
@using FPLSP.Data.Securities
@using FPLSP.Repositories
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Infrastructure.ViewModels.QuizQuesstionQuizCP
@using System.Text.RegularExpressions

@attribute [Authorize(Roles = "AdminCore,AdminCS")]

<div class="row">
    <h3 class="ps-0">Danh sách bộ câu hỏi của @nameQuiz</h3>
</div>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/SpecializedCP/@_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H")/@_cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")">Chuyên ngành</a></li>
        <li class="breadcrumb-item"><a href="/subjects/@_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")?@_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H")LDN01@_cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")">@namespecialized</a></li>
        <li class="breadcrumb-item"><a href="/MainQuizsCP/@_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")/@_cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H")?@_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H")LDN01@_cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")">Quizs</a></li>
        <li class="breadcrumb-item active" aria-current="page">@nameQuiz</li>
    </ol>
</nav>
<div class="row pt-3">
    <div class="col-3 ps-0">
        <a class="btn btn-outline-danger" @onclick="() => Quaylai()">Quay Lại</a>
        <a class="btn btn-primary" @onclick="() => RedirectToCreate()">Thêm Câu Hỏi</a> 
        <a class="btn btn-primary" title="Thêm câu hỏi bằng excel" @onclick="() => RedirectToCreateExcel()"><i class="fa-solid fa-file-excel"></i></a>
    </div>
    <div class="col-7 ps-0">
        <div class="row">
            <div class="col-4">
                <EditForm Model="_parameters">
                    <div class="col-12">
                        <InputSelect ValueExpression="@(()=>_parameters.Status)" Value="@_parameters.Status" ValueChanged="@((int newValue) => ChangeValue(newValue))" class="form-select">
                            <option value="3">Tất cả</option>
                            <option value="0">Không hoạt động</option>
                            <option value="1">Đang hoạt động</option>
                        </InputSelect>
                    </div>
                </EditForm>
            </div>
            <div class="col-8">
                <EditForm Model="_parameters">
                    <div class="row">
                        <div class="col-6 ps-0 pe-0">
                            <InputText placeholder="Nhập tên câu hỏi" class="form-control" @bind-Value="_parameters.Name"></InputText>
                        </div>
                        <div class="col-6">
                            <button @onclick="() => TimKiem()" class="btn btn-primary">Tìm kiếm</button>
                            <button class="btn btn-outline-success ms-2" @onclick="() => Undo()">Làm mới</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="col-2 ps-3">
        <div class="dropdown-center">
            <button class="btn btn-info ps-4 dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Chức Năng
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" @onclick="() => DeleteAll()">Xóa</a></li>
            </ul>
        </div>
    </div>
</div>
@if (ListQuizQuestionQuizCP.Count() > 0 || (tg = DateTime.Now - time).Days < 7)
{
<div class="row">

    <table class="table table-hover align-middle table-bordered mt-3" style="text-align:center">
        <thead class="table-success">
            <tr>
                <th><input type="checkbox" @bind="@Check" @onchange="EventArgs => { CheckAllExpense( EventArgs.Value); } " @bind:event="oninput"></th>
                <th width="15%">Mã câu hỏi</th>
                <th width="10%">Tên câu hỏi</th>
                <th width="40%">Nội dung câu hỏi</th>
                <th width="15%">Trạng thái</th>
                <th width="20%">Chức năng</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var item in ListQuizQuestionQuizCP.OrderBy(c => Convert.ToInt32(Regex.Match(c.QuestionName, @"\d+").Value)))
            {
                <tr>
                    <td><input type="checkbox" checked=@item.IsChecked @onchange="()=>CheckManual(item.QuizQuestionId,item.IsChecked)"></td>
                    <td>@item.QuestionCode</td>
                    <td>@item.QuestionName</td>
                    <td>@item.ContentQuestion</td>
                    @if (@item.StatusQuizQuiz == 0)
                    {
                        <td>Không hoạt động</td>
                    }
                    else
                    {
                        <td>Đang hoạt động</td>
                    }

                    <td class="text-center">
                        @*<a class="btn btn-info " type="button" title="Bộ câu hỏi" @onclick="()=>RedirectQuizQuestion(idspecialized,idsubject,item.Id)">
                            <i class="bi bi-question-circle"></i>
                            </a>*@
                        <a class="btn btn-primary " type="button" title="Sửa" id="show-emp"
                       @onclick="() => RedirectToUpdate(idspecialized,idsubject,idquiz,item.QuizQuestionId)">
                            <i class="fas fa-edit"></i>
                        </a>
                        <a class="btn btn-danger " type="button" title="Đổi trạng thái" @onclick="()=>DeleteQuiz(item.QuizQuestionId)">
                            <i class="bi bi-arrow-repeat"></i>
                        </a>

                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Comfirmation ConfirmationMessage="Bạn có chắc muốn đổi trạng thái không?"
                  ConfirmationTitle="Đổi trạng thái câu hỏi"
                  @ref="DeleteConfirmation"
                  ConfirmationChanged="OnConfirmationDelete"></Comfirmation>
</div>
<div class="footer text-muted">
    <div class="row mt-3">

        <span>
            <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
        </span>

    </div>
</div>
}
else
{
    <span>
        <LoadingIndicator></LoadingIndicator>
    </span>
}
@code {
    [Parameter]
    public string idquizNonDecrypt { get; set; }
    public string idquiz = "";
    [Parameter]
    public string idsubjectNonDecrypt { get; set; }
    public string idsubject = "";
    [Parameter]
    public string idspecializedNonDecrypt { get; set; }
    public string idspecialized = "";
    public List<QuizQuesstionQuizCPDto> ListQuizQuestionQuizCP { get; set; } = new List<QuizQuesstionQuizCPDto>();
    public MetaData MetaData { get; set; } = new MetaData();
    public DateTime time { get; set; }
    public TimeSpan tg;
    private QuizQuesstionQuizCPListSearch _parameters = new QuizQuesstionQuizCPListSearch();
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public IQuizQuesstionQuizCPClient _iQuizQuesstionQuizCPClient { get; set; }
    [Inject]
    public IQuizCPRepo _iQuizCPRepo { get; set; }
    [Parameter]
    public string Error { get; set; }
    public string nameQuiz { get; set; }

    private bool Check = false;
    [Inject] private IToastService _toastService { get; set; }

    private string _idQuizQuestionQuiz;
    protected Comfirmation DeleteConfirmation { get; set; }

    private List<Guid> _removeListQuizQuestionQuiz = new List<Guid>();

    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    private int stt = 0;

    private SubjectDto subject { get; set; } = new SubjectDto();
    [Inject]
    ISubjectClient _iSubjectClient { get; set; }
    public SpecializedDto specializedDto { get; set; } = new SpecializedDto();
    string namespecialized { get; set; }
    [Inject]
    public ISpecializedCPRepo _iSpecialized { get; set; }

    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";
    protected async override Task OnInitializedAsync()
    {
          uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }
        idquiz = _cryptoServices.Decrypt(idquizNonDecrypt.Replace("I0H", "/"));
        idsubject = _cryptoServices.Decrypt(idsubjectNonDecrypt.Replace("I0H", "/"));
        idspecialized = _cryptoServices.Decrypt(idspecializedNonDecrypt.Replace("I0H", "/"));
        specializedDto = await _iSpecialized.GetbyId(Guid.Empty, Guid.Parse(idspecialized));
        namespecialized = specializedDto.SpecializationName;
        subject = await _iSubjectClient.GetSubjectbyId(Guid.Parse(idsubject));
        var quiz = await _iQuizCPRepo.GetQuizById(Guid.Parse(idquiz));
        nameQuiz = quiz.QuizName;
        _parameters.Status = 3;
        await GetTasks();
    }
    private async Task Undo()
    {
        _parameters.Name = "";
        _parameters.Status = 3;
        _parameters.PageNumber = 1;
        await GetTasks();

    }
    private async Task TimKiem()
    {
        await GetTasks();
    }
    private async Task ChangeValue(int value)
    {
        _parameters.Status = value;
        _parameters.Name = _parameters.Name;
        await GetTasks();
    }
    public async Task SearchTask(QuizQuesstionQuizCPListSearch lessonContentListSearch)
    {
        var quiz =
        _parameters = lessonContentListSearch;
        Check = false;
        _parameters.PageNumber = 1;
        await GetTasks();
    }
    private async Task Quaylai()
    {
        var url = Path.Combine("/MainQuizsCP/" + _cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")  + "/" + _cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    }
    private async Task RedirectToCreate()
    {
        var url = Path.Combine("/createquizQuesstionQuizCP/" + _cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idquiz.ToString()).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    } 
    
    private async Task RedirectToCreateExcel()
    {
        var url = Path.Combine("/addExcelQuizQuestion/" + _cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idquiz.ToString()).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    }
    private void RedirectToDetails(Guid idQuesstion, Guid idQuiz)
    {

        var url = Path.Combine("/quizQuesstionDetailsQuizCp/", _cryptoServices.Encrypt((idQuesstion.ToString()).ToString()).Replace("/", "I0H"), _cryptoServices.Encrypt((idQuiz.ToString()).ToString()).Replace("/", "I0H"), _cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}" );
        NavigationManager.NavigateTo(url);
    }
    private void RedirectToUpdate(string idspecialized, string idsubject, string idquiz, Guid idQuizQuesstionQuiz)
    {

        var url = Path.Combine($"/quizQuesstionUpdateAnserQuiz/{_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idquiz).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idQuizQuesstionQuiz).ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    }

    private async Task RedirectToDelete(Guid Idspecialized, Guid Idlecturers)
    {
        var url = Path.Combine("/lectuterSpecializedDelete/", _cryptoServices.Encrypt((idquiz.ToString()).ToString()).Replace("/", "I0H"), _cryptoServices.Encrypt((idsubject.ToString()).ToString()).Replace("/", "I0H"), _cryptoServices.Encrypt((Idspecialized.ToString()).ToString()).Replace("/", "I0H"), _cryptoServices.Encrypt((Idlecturers.ToString()).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    }
    private async Task GetTasks()
    {
        try
        {
            var pagingResponse = await _iQuizQuesstionQuizCPClient.GetPagingParamets(Guid.Parse(idquiz), _parameters);
            ListQuizQuestionQuizCP = pagingResponse.Items;
            MetaData = pagingResponse.MetaData;
            time = DateTime.Now;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

    }

    private async Task SelectedPage(int page)
    {
        _parameters.PageNumber = page;
        Check = false;
        await GetTasks();
    }

    public async Task OnDelete(Guid id)
    {
        _idQuizQuestionQuiz = id.ToString();
        DeleteConfirmation.show();
    }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {

        stt = 0;
        if (deleteconfirmed && _idQuizQuestionQuiz == null && _removeListQuizQuestionQuiz.Count == 0)
        {
            _toastService.ShowError("Bạn chưa chọn đối tượng để đổi trạng thái");
            await GetTasks();
            NavigationManager.NavigateTo($"/quizQuesstionQuizCP/{_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idquiz).ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");

        }
        else if (deleteconfirmed && _idQuizQuestionQuiz != null)
        {
            var result = await _iQuizQuesstionQuizCPClient.Delete(Guid.Parse(_idQuizQuestionQuiz));
            if (result == 1)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                await GetTasks();
                NavigationManager.NavigateTo($"/quizQuesstionQuizCP/{_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idquiz).ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");
                await GetTasks();
                NavigationManager.NavigateTo($"/quizQuesstionQuizCP/{_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idquiz).ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");

            }
        }
        else if (deleteconfirmed && _removeListQuizQuestionQuiz != null)
        {

            var result = await _iQuizQuesstionQuizCPClient.DeleteListQuizQuestionQuiz(_removeListQuizQuestionQuiz);
            if (result == 1)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                await GetTasks();
                NavigationManager.NavigateTo($"/quizQuesstionQuizCP/{_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idquiz).ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");

            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");

                await GetTasks();
                NavigationManager.NavigateTo($"/quizQuesstionQuizCP/{_cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((idquiz).ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");

            }
        }
        _idQuizQuestionQuiz = null;
        _removeListQuizQuestionQuiz = null;
        Check = false;
    }
    public void DeleteQuiz(Guid id)
    {
        _idQuizQuestionQuiz = id.ToString();
        DeleteConfirmation.show();
    }
    void CheckManual(Guid reportId, bool check)
    {
        stt = 0;
        if (check == true)
        {
            foreach (var x in ListQuizQuestionQuizCP.Where(c => c.QuizQuestionId == reportId))
            {
                x.IsChecked = false;
            }
        }
        if (check == false)
        {
            foreach (var x in ListQuizQuestionQuizCP.Where(c => c.QuizQuestionId == reportId))
            {
                x.IsChecked = true;
            }
        }
    }
    void DeleteAll()
    {
        stt = 0;
        _removeListQuizQuestionQuiz = ListQuizQuestionQuizCP.Where(c => c.IsChecked == true).Select(c => c.QuizQuestionId).ToList();
        DeleteConfirmation.show();
    }
    void CheckAllExpense(object checkValue)
    {
        stt = 0;
        if (Convert.ToBoolean(checkValue) == false)
        {
            ListQuizQuestionQuizCP.ToList().ForEach(e => e.IsChecked = false);
        }
        else
        {
            ListQuizQuestionQuizCP.ToList().ForEach(e => e.IsChecked = true);
        }
    }
}
