@page "/lectuterSpecializedCreate/{id}/{idspecialized}"
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Domain.Entities.CoresParts
@using FPLSP.Server.Infrastructure.ViewModels.LectuterSpecializedCP
@attribute [Authorize(Roles = "AdminCS")]
<div class="row pt-3">
    @if (_specialized != null)
    {
        <h2>+ Giảng viên chuyên ngành hẹp<b> @_specialized.SpecializationName</b></h2>
    }
    @if (ShowAuthError)
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    <EditForm Model="lessonContent" OnValidSubmit="Create" class="card card-body bg-light mt-5">
        <DataAnnotationsValidator />
        <div class="form-group row pt-2">
            <label for="name" class="col-md-2 col-form-label">Giảng Viên:</label>
            <div class="col-md-10">
                <InputSelect class="form-control" @bind-Value="lessonContent.IdLectuter">
                    <option value="default">Chọn giảng viên</option>
                    @if (lsLectu != null)
                    {
                        @foreach (var item in lsLectu)
                        {
                            <option value="@item.Id">@item.Email</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
        <div class="form-group row pt-2">
            <label for="name" class="col-md-2 col-form-label">Trạng thái:</label>
            <div class="col-md-10">
                <InputSelect @bind-Value="lessonContent.Status" class="form-control">
                    <option value="0">Đang dạy</option>
                    <option value="1">Ngừng dạy</option>
                </InputSelect>
            </div>
        </div>

        <div class="row pt-2">
            <div class="col-md-6 text-center">
                <button type="submit" class="btn btn-success">Tạo mới</button>
            </div>
            <div class="col-md-6 text-center">
                <a @onclick="()=>Quaylai()" class="btn btn-danger">Quay Lại</a>
            </div>
        </div>
    </EditForm>

</div>

@code {
    private LectuterSpecializedCPCreateVM lessonContent = new LectuterSpecializedCPCreateVM();

    [Parameter]
    public string id { get; set; }

    [Parameter]
    public string idspecialized { get; set; }
    [Inject]
    public NavigationManager Navigation { get; set; }

    [Inject]
    public ILectuterSpecializedCPCilents _iLectuterSpecializedCPCilents { get; set; }


    [Inject]
    public ISpecializedCPRepo _iSpecializedClient { get; set; }

    private SpecializedDto _specialized;

    [Inject]
    public ILecturersCPRepo _iLecturersCPRepo { get; set; }

    private List<LecturersCP> lsLectu;
    protected override async Task OnInitializedAsync()
    {
        lsLectu = await _iLecturersCPRepo.GetAllLecturerAsync();
        _specialized = await _iSpecializedClient.GetbyId(Guid.Parse(idspecialized), Guid.Parse(id));
    }

    public bool ShowAuthError { get; set; }
    [Parameter]
    public string Error { get; set; }
    private async Task Create()
    {
        ShowAuthError = false;
        var result = await _iLectuterSpecializedCPCilents.Create(Guid.Parse(id), lessonContent);
        if (result != 1)
        {
            Error = "Lỗi";
            var url = Path.Combine("/lectuterSpecializedCreate", id, idspecialized);
            ShowAuthError = true;
            Navigation.NavigateTo(url);
        }
        else
        {
            var url = Path.Combine("/lectuterSpecialized", idspecialized, id);
            Navigation.NavigateTo(url);
        }
    }
    private async Task Quaylai()
    {
        var url = Path.Combine("/lectuterSpecialized", idspecialized, id);
        Navigation.NavigateTo(url);
    }}