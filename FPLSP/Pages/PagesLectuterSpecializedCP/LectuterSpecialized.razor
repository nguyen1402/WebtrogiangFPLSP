@page "/lectuterSpecialized/{idspecialized}/{id}"
@using FPLSP.Components
@using FPLSP.Components.LectuterSpecializedCP
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Infrastructure.ViewModels.LectuterSpecializedCP
@attribute [Authorize(Roles = "AdminCS")]
<div class="row pt-3">
    <div class="col-md-4">
        @if (_specialized != null)
        {
            <h2>Danh sách giảng viên chuyên ngành hẹp<b> @_specialized.SpecializationName</b></h2>
        }
    </div>
    <div class="col-md-5">
        <LectuterSpecializedCPSearch OnSearch="SearchTask"></LectuterSpecializedCPSearch>
    </div>
    <div class="col-md-3 float-end">
        <div class="row">
            <div class="col-md-6">
                <a class="btn btn-outline-primary" @onclick="()=> RedirectToCreat()"> +Giảng viên</a>
            </div>
            <div class="col-md-6">
                <a class="btn btn-outline-danger" @onclick="() => RedirectToLesson()">Về CN hẹp</a>
            </div>
        </div>
    </div>
</div>
@if (CPList == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <div class="row">
        @if (CPList.Count == 0)
        {
            <span>Danh sách giảng viên-chuyên ngành rỗng</span>
        }
        else
        {
            <table class="table">
                <thead class="text-center">
                    <tr>
                        <th scope="col">Hình Ảnh</th>
                        <th scope="col">Email</th>
                        <th scope="col">Số điện thoại</th>
                        <th scope="col">Địa chỉ</th>
                        <th scope="col">Trạng Thái</th>
                        <th scope="col">Chức năng</th>
                    </tr>
                </thead>
                <tbody class="text-center">
                    @foreach (var sj in CPList)
                    {
                        <tr>
                            <td class="align-middle">
                                <img src="@sj.ImageUrl" onerror="this.src='./css/images/Others/logoFPT.png'" alt="product image" style="width:100px;" />
                            </td>
                            <td class="align-middle">
                                @sj.Email
                            </td>
                            <td class="align-middle">
                                @sj.PhoneNumber
                            </td>
                            <td class="align-middle">
                                @sj.Address
                            </td>
                            @if (@sj.Status == 0)
                            {
                                <td class="align-middle">
                                    Đang dạy
                                </td>
                            }
                            else if (@sj.Status == 1)
                            {
                                <td class="align-middle">
                                    Ngừng dạy
                                </td>
                            }
                            else
                            {
                                <td class="align-middle">
                                    Không xác định
                                </td>
                            }
                            <td class="align-middle">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">

                                    </a>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                        <li><a class="dropdown-item" @onclick="() => RedirectToDetails(sj.Idspecialized,sj.Idlecturers)">Chi tiết</a></li>
                                        <li><a class="dropdown-item" @onclick="() => RedirectToUpdate(sj.Idspecialized,sj.Idlecturers)">Cập nhật</a></li>
                                        <li><a class="dropdown-item" @onclick="() => RedirectToDelete(sj.Idspecialized,sj.Idlecturers)">Xóa giảng viên</a></li>
                                    </ul>
                                </div>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <tfoot>
        <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
    </tfoot>
}

@code {
    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string idspecialized { get; set; }
    public List<LectuterSpecializedCPDto> CPList { get; set; } = new List<LectuterSpecializedCPDto>();
    public MetaData MetaData { get; set; } = new MetaData();

    private LectuterSpecializedCPListSearch _parameters = new LectuterSpecializedCPListSearch();
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public ILectuterSpecializedCPCilents _iLessonContentClient { get; set; }


    [Inject]
    public ISpecializedCPRepo _iSpecializedClient { get; set; }

    private SpecializedDto _specialized;

    public string Error { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _specialized = await _iSpecializedClient.GetbyId(Guid.Parse(idspecialized), Guid.Parse(id));
        await GetTasks();
    }
    public async Task SearchTask(LectuterSpecializedCPListSearch lessonContentListSearch)
    {
        _parameters = lessonContentListSearch;
        await GetTasks();
    }
    private async Task RedirectToCreat()
    {
        var url = Path.Combine("/lectuterSpecializedCreate/", id.ToString(), idspecialized.ToString());
        NavigationManager.NavigateTo(url);
    }
    private void RedirectToDetails(Guid Idspecialized, Guid Idlecturers)
    {

        var url = Path.Combine("/lectuterSpecializedDetails/", id.ToString(), idspecialized.ToString(), Idspecialized.ToString(), Idlecturers.ToString());
        NavigationManager.NavigateTo(url);
    }
    private void RedirectToUpdate(Guid Idspecialized, Guid Idlecturers)
    {

        var url = Path.Combine("/lectuterSpecializedUpdate/", id.ToString(), idspecialized.ToString(), Idspecialized.ToString(), Idlecturers.ToString());
        NavigationManager.NavigateTo(url);
    }

    private async Task RedirectToDelete(Guid Idspecialized, Guid Idlecturers)
    {
        var url = Path.Combine("/lectuterSpecializedDelete/", id.ToString(), idspecialized.ToString(), Idspecialized.ToString(), Idlecturers.ToString());
        NavigationManager.NavigateTo(url);
    }
    private async Task RedirectToLesson()
    {
        var url = Path.Combine("/specializedhep/", idspecialized.ToString());
        NavigationManager.NavigateTo(url);
    }
    private async Task GetTasks()
    {
        try
        {
            var pagingResponse = await _iLessonContentClient.Gets(Guid.Parse(id), _parameters);
            CPList = pagingResponse.Items;
            MetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

    }

    private async Task SelectedPage(int page)
    {
        _parameters.PageNumber = page;
        await GetTasks();
    }}