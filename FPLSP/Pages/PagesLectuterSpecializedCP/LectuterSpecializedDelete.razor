@page "/lectuterSpecializedDelete/{id}/{idBo}/{Idspecialized}/{Idlecturers}"
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Domain.Dtos
@attribute [Authorize(Roles = "AdminCS")]
<div class="row pt-3">
    <h2>Xóa Giảng Viên Ra Chuyên Ngành Hẹp</h2>

    @if (lessonContent != null)
    {
        <EditForm Model="lessonContent" OnValidSubmit="Delete" class="card card-body bg-light mt-5">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <label for="name" class="row">
                    <p>
                        <b style="color : red">You chắc chắn want delete to ?</b> giảng viên <b>@lessonContent.Email</b>
                        ???
                    </p>
                </label>

            </div>
            <div class="row pt-2">
                <div class="col-md-6 text-center">
                    <button type="submit" class="btn btn-danger">Xóa Luôn</button>
                </div>
                <div class="col-md-6 text-center">
                    <a @onclick="()=> Quaylai()" class="btn btn-primary">Quay Lại</a>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {

    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string idBo { get; set; }

    [Parameter]
    public string Idspecialized { get; set; }
    [Parameter]
    public string Idlecturers { get; set; }
    [Inject]
    public NavigationManager Navigation { get; set; }

    public LectuterSpecializedCPDto lessonContent;
    [Inject]
    public ILectuterSpecializedCPCilents _iLessonContentClient { get; set; }

    protected async override Task OnInitializedAsync()
    {
        lessonContent = await _iLessonContentClient.GetbyId(Guid.Parse(Idspecialized), Guid.Parse(Idlecturers));
    }
    public bool ShowAuthError { get; set; }
    [Parameter]
    public string Error { get; set; }
    private async Task Delete()
    {
        ShowAuthError = false;
        var result = await _iLessonContentClient.Delete(Guid.Parse(Idspecialized), Guid.Parse(Idlecturers));
        if (result != 1)
        {
            Error = "Lỗi";
            var url = Path.Combine("/lectuterSpecializedDelete", id, idBo, Idspecialized, Idlecturers);
            ShowAuthError = true;
            Navigation.NavigateTo(url);
        }
        else
        {
            var url = Path.Combine("/lectuterSpecialized", idBo, id);
            Navigation.NavigateTo(url);
        }
    }
    private async Task Quaylai()
    {
        var url = Path.Combine("/lectuterSpecialized", idBo, id);
        Navigation.NavigateTo(url);
    }
}