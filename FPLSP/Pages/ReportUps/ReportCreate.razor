@page "/reportcreate/{classUPId}"
@using FPLSP.Components
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Infrastructure.ViewModels
@using FPLSP.Server.Infrastructure.ViewModels.ReportClassUP
@using Microsoft.AspNetCore.Components
@using Blazored.Toast.Services

<h3>Thêm mới báo cáo</h3>

@if (classCode == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <EditForm Model="report" OnValidSubmit="Create" class="card card-body bg-light mt-6">
        <DataAnnotationsValidator />
        <div class="form-group">
            <div class="row">
                <div class="form-group pt-2 col-md-6">
                    <label for="Question" class="form-label">Lớp học:</label>
                    <div class="text-danger">
                        <InputText class="form-control" @bind-Value="@classCode" disabled=true></InputText>
                    </div>
                </div>
                <div class="form-group pt-2 col-md-6 ">
                    <label for="ReportAmount" class="form-label">Số lượt đáng giá:</label>
                    <div class="text-danger">
                        <InputNumber min="1" class="form-control" @bind-Value="report.ReportAmount"></InputNumber>
                        <ValidationMessage For="()=>report.ReportAmount"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group pt-2 col-md-6">
                    <label for="ReportLevel" class="form-label">Đánh giá:</label>
                    <div class="text-danger">
                        <InputSelect class="form-select" @bind-Value="report.ReportLevel">
                            <option value="0">Thấp</option>
                            <option value="1">Trung bình</option>
                            <option value="2">Cao</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="form-group pt-2 col-md-6">
                    <label for="Question" class="form-label">Câu hỏi:</label>
                    <div class="text-danger">
                        <InputText class="form-control" @bind-Value="report.Question"></InputText>
                        <ValidationMessage For="()=>report.Question"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group pt-2 col-md-6">
                    <label for="Answer" class="form-label">Câu trả lời:</label>
                    <div class="text-danger">
                        <InputText class="form-control" @bind-Value="report.Answer"></InputText>
                        <ValidationMessage For="()=>report.Answer"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group pt-2 col-md-6">
                    <label for="Describe" class="form-label">Mô tả:</label>
                    <div class="text-danger">
                        <InputText class="form-control" @bind-Value="report.Describe"></InputText>
                        <ValidationMessage For="()=>report.Describe"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group pt-2 col-md-6">
                    <label for="Note" class="form-label">Ghi chú:</label>
                    <div class="text-danger">
                        <InputTextArea class="form-control" @bind-Value="report.Note"></InputTextArea>
                        <ValidationMessage For="()=>report.Note"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group pt-2 col-md-6">
                    <label for="ReportLevel" class="form-label">Trạng thái:</label>
                    <div class="text-danger">
                        <InputSelect class="form-control" @bind-Value="report.Status">
                            <option value="0">Đang đánh giá</option>
                            <option value="1">Đã đánh giá </option>
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center mb-2">
                <div class="p-2">
                    <button type="submit" class="btn btn-success">Tạo mới</button>
                </div>
                <div class="p-2">
                    <a @onclick="()=> ClearForm()" class="btn btn-outline-primary">Clear Form</a>
                </div>
                <div class="p-2">
                    <a href="/reportlist/@classUPId" class="btn btn-outline-danger">Quay Lại</a>
                </div>
            </div>
        </div>
    </EditForm>
}
@code
{
    [Inject] private IReportClassUPRepo _reportClassUPRepo { get; set; }
    [Inject] private ITaskRepositories<ClassUPViewModel> _taskRepositories { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IToastService ToastService { get; set; }
    private string classCode { get; set; }

    [Parameter]
    public string classUPId { get; set; }
    private ReportUPViewModel report = new ReportUPViewModel();//Form phải khởi tạo
    protected override async Task OnInitializedAsync()
    {
        var allClass = await _taskRepositories.GetAllClass();
        classCode = allClass.FirstOrDefault(c => Equals(Guid.Parse(classUPId), c.Id)).ClassroomName + " - " + allClass.FirstOrDefault(c => Equals(Guid.Parse(classUPId), c.Id)).ClassroomName;
    }
    private async Task Create(EditContext context)
    {

        try
        {
            report.ClassId = Guid.Parse(classUPId);
            var result = await _reportClassUPRepo.CreateReportClassUP(report);
            if (result)
            {
               NavigationManager.NavigateTo($"reportlist/{classUPId}");
                ToastService.ShowSuccess("Tạo mới thành công");
            }
            else
            {
                ToastService.ShowError("Tạo mới thất bại, kiểm tra lại");
            }
        }
        catch (Exception)
        {

            ToastService.ShowError("Đã xảy ra lỗi, thử lại sau");
        }
    }
    void ClearForm()
    {
        report = new ReportUPViewModel();
    }
}


