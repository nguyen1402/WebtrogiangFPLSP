@page "/updatesubjectup/{idsubject}/{idspecializedUP}"
@using Blazored.Toast.Services
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Infrastructure.ViewModels.Subject


<div class="row pt-3">z
    <h3>Cập Nhật Môn Học </h3>

    @if (subject != null)
    {
        <EditForm Model="subject" OnValidSubmit="Update" class="card card-body bg-light mt-5">
            <DataAnnotationsValidator />
            <div class="form-group">
                <div class="row">
                    <div class="col-lg-2 pt-4 pl-3">
                        <img style="height: 230px;width: 190px; border-radius: 10px;" src="@subject.Image" />
                        <div class="form-group pt-2">
                            <label for="image" class="form-label">Đổi Ảnh:</label>
                            <div class="text-danger">
                                <ImageUpload OnChange=" AssignImageUrl" />
                                <ValidationMessage For="@(()=>subject.Image)"/>
                        </div>
                        </div>
                    </div>
                    <div class="col-lg-10">
                        <div class="row">
                            <div class="form-group pt-2 col-md-6">
                                <label for="name" class="col-md-2 col-form-label">Mã Môn:</label>
                                <div class="text-danger">
                                    <InputText id="name" class="form-control" @bind-Value="subject.SubjectCode" disabled />
                                    <ValidationMessage For="@(() => subject.SubjectCode)" />
                                </div>
                            </div>
                            <div class="form-group pt-2 col-md-6">
                                <label for="name" class="col-md-2 col-form-label">Tên Môn:</label>
                                <div class="text-danger">
                                    <InputText id="name" class="form-control" @bind-Value="subject.SubjectName" />
                                    <ValidationMessage For="@(() => subject.SubjectName)" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group pt-2 col-md-6">
                                <label for="name" class="col-md-3 col-form-label">Ngày bắt đầu:</label>
                                <div class="text-danger">
                                    <InputDate id="name" class="form-control" @bind-Value="subject.StartDay" />
                                    <ValidationMessage For="@(() => subject.StartDay)" />
                                </div>
                            </div>
                            <div class="form-group pt-2 col-md-6">
                                <label for="name" class="col-md-3 col-form-label">Ngày kết thúc:</label>
                                <div class="col-md-12 text-danger">
                                    <InputDate id="name" class="form-control" @bind-Value="subject.EndDay" />
                                    <ValidationMessage For="@(() => subject.EndDay)" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group pt-2 col-md-6">
                                <label for="name" class="col-md-2 col-form-label">Số buổi:</label>
                                <div class="text-danger">
                                    <InputNumber id="name" class="form-control" @bind-Value="subject.TotalOfSub" />
                                    <ValidationMessage For="@(() => subject.TotalOfSub)" />
                                </div>
                            </div>
                            <div class="form-group pt-2 col-md-6">
                                <label for="name" class="col-md-3 col-form-label">Trạng thái:</label>
                                <div class="text-danger">
                                    <InputSelect @bind-Value="subject.Status" class="form-control">
                                        <option value="0">Chưa bắt đầu</option>
                                        <option value="1">Đang giảng dạy</option>
                                        <option value="2">Hết hạn</option>
                                        <option hidden value="3">Ngưng hoạt động</option>
                                    </InputSelect>

                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="d-flex justify-content-center mb-2">
                        <div class="p-2">
                            <button type="submit" class="btn btn-success">Cập nhật</button>
                        </div>
                        <div class="p-2">
                            <a @onclick="()=> Resorte()" class="btn btn-outline-primary">Khôi phục</a>
                        </div>
                        <div class="p-2">
                            <a href="/listsubjects/@idspecializedUP" class="btn btn-outline-danger">Quay Lại</a>
                        </div>
                    </div>
                </div>

            </div>
        </EditForm>

    }
</div>

@code{
    private SubjectDto subject = new SubjectDto();
    private SubjectUpdateVM subjectVM = new SubjectUpdateVM();
    [Inject]
    public NavigationManager Navigation { get; set; }

    [Inject]
    private ISubjectUPRepo _subjectUPRepo { get; set; }
    [Inject] private IToastService ToastService { get; set; }

    [Parameter]
    public string idsubject { get; set; }
    [Parameter]
    public string idspecializedUP { get; set; }

    protected async override Task OnInitializedAsync()
    {
        subject = await _subjectUPRepo.GetSubjectbyId(Guid.Parse(idsubject));
    }
    private async Task Update()
    {
        try
        {
            subjectVM = new SubjectUpdateVM()
                {
                    SubjectCode = subject.SubjectCode,
                    SubjectName = subject.SubjectName,
                    TotalOfSub = subject.TotalOfSub,
                    StartDay = subject.StartDay,
                    EndDay = subject.EndDay,
                    Image = subject.Image,
                    Status = subject.Status,
                };
            var result = await _subjectUPRepo.UpdateSubject(Guid.Parse(idsubject), subjectVM);
            if (!result)
            {
                ToastService.ShowError("Cập nhật thất bại, kiểm tra lại");
            }
            else
            {
                Navigation.NavigateTo("/listsubjects");
                ToastService.ShowSuccess("Cập nhật thành công");
            }
        }

        catch (Exception)
        {
            ToastService.ShowError("Đã xảy ra lỗi, thử lại sau");
        }

    }
    private async Task Resorte()
    {
        subject = await _subjectUPRepo.GetSubjectbyId(Guid.Parse(idsubject));
    }

    private void AssignImageUrl(string Image) => subject.Image = Image;
}

