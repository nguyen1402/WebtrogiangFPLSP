@page "/AllDanhSachLopOfLecucu/{lecuidNonDecrypt}"
@using Blazored.LocalStorage
@using Blazored.Toast.Services
@using FPLSP.Components.GiaoVienLopUPComponets
@using FPLSP.Data.Securities;
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Domain.Entities.UserParts
@using FPLSP.Server.Domain.Entities.UsesParts
@using FPLSP.Server.Infrastructure.ViewModels
@using FPLSP.Server.Infrastructure.ViewModels.GiaoVienTaoLop
@using FPLSP.Server.Infrastructure.ViewModels.SpesializedUP
@inject ILocalStorageService _localStorageService
@*attribute [Authorize(Roles = "LecturerFPLSP")]*@
<div class="row">
    <p class="pt-2"><b>Danh sách lớp đã tạo</b></p>
</div>
<div class="d-flex flex-row mb-3">
    <div class="p-2">
        @if (_listChuyennganh != null)
        {
              @if (_listChuyennganh.Count() > 0)
         {
            <EditForm Model="@_listChuyennganh">
                <select class="form-select" @onchange="args=>SearchCode(args.Value.ToString()) ">
                    @if (_listChuyennganh.Count() > 0)
                    {
                        <option value="0">Chuyên Ngành</option>
                        @for (var i = 0; i < _listChuyennganh.Count(); i++)
                        {
                            <option value="@_listChuyennganh[i].Id">@_listChuyennganh[i].SpecializationName</option>
                        }
                    }
                </select>
            </EditForm>
          }
        }
      

    </div>
    <div class="p-2">
        <GiaoVienLopUPCPSearch OnSearch="SearchTask2"></GiaoVienLopUPCPSearch>
    </div>
</div>

<div class="mt-3">
    <div class="card text-center ">
        <div class="card-body">
            <div class="row">
                @if (CPList != null)
                {
                       @if (CPList.Count() > 0)
                {
                    @foreach (var iteam in CPList.OrderByDescending(c => c.CreatedDayClass))
                    {
                        <div class="col-lg-2 mb-5 single-product-item">
                            <div class="card border-2 border-info" style="height :304px">
                                <div class="row ">
                                    <div class="card-body" style="display: flex;
                                        flex-direction: column;">
                                        <h5 class="my-3">Tên lớp: @iteam.ClassroomName</h5>
                                        <h7 class="my-3">Môn học: @iteam.SubjectName</h7>
                                        @*<p class="text-muted mb-1">Mã lớp : @iteam.ClassroomCode</p>*@
                                        <p class="text-muted mb-1">Join Code : @iteam.JoinCode</p>
                                        <p class="text-muted mb-1">Ngày tạo : @iteam.CreatedDayClass.Day/@iteam.CreatedDayClass.Month/@iteam.CreatedDayClass.Year</p>
                                        <p class="text-muted mb-1">Tổng số : @iteam.Sinhvienthucte/@iteam.StudentAmount</p>
                                    </div>
                                </div>
                                @*<button class="align-self-middle btn btn-lg btn-block btn-primary btn-warning" style=" margin-top: auto;" @onclick="() => RedirectToChitiet(iteam.ClassId,iteam.SpecializedId, iteam.SubjectId)">Chi tiết</button>*@
                                <button class="align-self-middle btn btn-lg btn-block btn-primary btn-warning" style=" margin-top: auto;" @onclick="() => RedirectToDIem(_cryptoServices.Encrypt((iteam.ClassId).ToString()),_cryptoServices.Encrypt((iteam.SpecializedId).ToString()), _cryptoServices.Encrypt((iteam.SubjectId).ToString()))">Chi Tiết</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    @if (encounter != 14)
                    {
                        <LoadingIndicator></LoadingIndicator>
                    }
                    else
                    {
                        <h5>Danh sách lớp trống</h5>
                    }
                }
                }
             
            </div>
        </div>
        <div class="text-muted">
            <div class="row mt-3">

                <span>
                    <Pagingation MetaData="MetaData2" Spread="2" SelectedPage="SelectedPage2"></Pagingation>
                </span>

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string lecuidNonDecrypt { get; set; }
    [Inject]
    public NavigationManager Navigation { get; set; }
    public MetaData MetaData2 { get; set; } = new MetaData();

    public List<ClassSubjectUPDto> CPList { get; set; } = new List<ClassSubjectUPDto>();

    List<SpecializedUPViewModel> _listChuyennganh = new List<SpecializedUPViewModel>();
    private int encounter;
    [Inject]
    public IClassSubjectApiClient _iClassSubjectApiClient { get; set; }

    [Inject] private IToastService ToastService { get; set; }

    private SubjectServicesCPListSearch _parameters = new SubjectServicesCPListSearch();
    private UserInListRoles userRole = new UserInListRoles();
    [Inject] public IUserIdentityRepo _UserIdentityRepo { get; set; }
    [Inject]
    public CryptoServices _cryptoServices { get; set; }

    private string lecuid = "";
    protected override async Task OnInitializedAsync()
    {
        lecuid = _cryptoServices.Decrypt(lecuidNonDecrypt.Replace("I0H", "/"));
        CPList = new List<ClassSubjectUPDto>();
        _listChuyennganh = new List<SpecializedUPViewModel>();
        await GetTasksLopDaTonTai();
        await SearchTask2(_parameters);

    }
    public async Task SearchTask2(SubjectServicesCPListSearch lessonContentListSearch)
    {
        if (lessonContentListSearch.Name == null)
        {
            _listChuyennganh.Clear();
            _listChuyennganh = await _iClassSubjectApiClient.GetChuyenNganh(Guid.Parse(lecuid));
        }
        _parameters = lessonContentListSearch;
        await GetTasksLopDaTonTai();
    }
    private async Task SelectedPage2(int page)
    {
        _parameters.PageNumber = page;
        await GetTasksLopDaTonTai();
    }
    private async Task GetTasksLopDaTonTai()
    {
        try
        {

            for (var i = 0; i < 15; i++)
            {
                encounter = i;
            }
            var pagingResponse = await _iClassSubjectApiClient.GetPagingParamets(Guid.Empty, Guid.Parse(lecuid), Guid.Empty, _parameters);
            CPList = pagingResponse.Items;
            MetaData2 = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {
            CPList = null;
        }

    }
    private async Task RedirectToChitiet(Guid? idclass, Guid? specid, Guid? subjectId)
    {
        if (userRole.ListRoles.FirstOrDefault() == "AdminCore")
        {
            ToastService.ShowError("Bạn không có quyền truy cập");
            return;
        }
        var url = Path.Combine($"/StudentStatisticsChitiet/{idclass}/{specid}/{lecuid}/{subjectId}");
        Navigation.NavigateTo(url);
    }

    private async Task RedirectToDIem(string idclass, string specid, string subjectId)
    {
        if (userRole.ListRoles.FirstOrDefault() == "AdminCore")
        {
            ToastService.ShowError("Bạn không có quyền truy cập");
            return;
        }
        string a = "";
        string b = "";
        string c = "";

        a = idclass.Replace("/", "I0H");
        b = specid.Replace("/", "I0H");
        c = subjectId.Replace("/", "I0H");
        var url = Path.Combine($"/ViewChiTitet/{a}/{b}/{lecuidNonDecrypt}/{c}");
        Navigation.NavigateTo(url);
    }

    public async Task SearchCode(string idchuyennganh)
    {
        if (idchuyennganh != "0")
        {
            for (var i = 0; i < 15; i++)
            {
                encounter = i;
            }
            var pagingResponse = await _iClassSubjectApiClient.GetPagingParamets(Guid.Empty, Guid.Parse(lecuid), Guid.Parse(idchuyennganh), _parameters);
            CPList = pagingResponse.Items;
            MetaData2 = pagingResponse.MetaData;
        }
        else
        {
            var pagingResponse = await _iClassSubjectApiClient.GetPagingParamets(Guid.Empty, Guid.Parse(lecuid), Guid.Empty, _parameters);
            CPList = pagingResponse.Items;
            MetaData2 = pagingResponse.MetaData;
        }
    }
}
