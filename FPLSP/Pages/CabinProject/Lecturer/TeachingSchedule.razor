@page "/Cabin/lecturer/{idUserNonDecrypt}"
@attribute [Authorize(Roles = "Lecturer")]
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Diagnostics;
@using Blazored.Toast.Services;
@using FPLSP.Components;
@using FPLSP.Components.CabinProject;
@using FPLSP.Data.Securities;
@using FPLSP.Repositories.Interfaces.CabinProject;
@using FPLSP.Repositories.Interfaces;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.BookingCabin;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.ShiftOfCabin;
@using FPLSP.Server.Infrastructure.ViewModels;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.TeachingSchedule;
@using Microsoft.AspNetCore.SignalR.Client;
@inject SweetAlertService Swal;
@inject IJSRuntime JSRuntime

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" rel="stylesheet" />

<body>
    @if (listShift == null || listFullShift == null || listSchedule == null)
    {
        <LoadingIndicator></LoadingIndicator>
    }
    else
    {
        @if (listFullShift.Count() == 0 || listSchedule.Count() == 0)
        {
            <h3>Hiện chưa có lịch dạy online</h3>
        }
        else
        {
            <div class="modal-header">
                <h3>Lịch cabin @daysOfWeek[0].Item2.ToString("dd/MM/yyyy")-@daysOfWeek[daysOfWeek.Count() - 1].Item2.ToString("dd/MM/yyyy") (Kì @semesterName-@blockName)</h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                @onclick="() => ViewBookingRequest()">

                    <div style="color: #ff5f00;">
                        <h6>Thông báo</h6>
                        <h3 style="margin: 0;">
                            <i class="fa-regular fa-bell"></i>
                        </h3>
                    </div>
                </button>
                <BookingRequestForLecturerPage ConfirmationTitle="Thông Báo"
                                       IdLecturer=@(idUser.ToString())
                                       @ref="bookingRequestForLecturer">
                </BookingRequestForLecturerPage>
            </div>
            <div class="notification-modal-div py-3" style="display: @close;">
                <button @onclick="@Close" style="float:right;border: 0; margin: 0 10px;">✖️</button>
                <h4 style="padding-left: 50px;">Chụp ảnh xác nhận</h4>
                <div hidden="@loadCamera">
                    <img hidden="@viewImage" src="@image" style="width: 380px;height: 270px; margin: 0 5px;" alt="Alternate Text" />
                    <button hidden="@viewImage" class="btn btn-secondary mx-3 my-3" @onclick="ComeBack">Chụp lại</button>
                    <div hidden="@viewCamera" style="margin:0 auto;">
                        <div>
                            <div id="camera-cabin"></div>
                            <!-- A button for taking snaps -->
                        </div>
                    </div>
                    <button hidden="@viewCamera" class="btn btn-secondary mx-3 my-3" @onclick="Capture">Chụp ảnh</button>
                    <button class="btn btn-success mx-3 my-3" @onclick="Submit">Xác nhận</button>
                </div>

                <div style="background-color:aliceblue;">
                    <ConfirmCheckInCamera ConfirmationMessage="Bạn muốn thoát chụp xác nhận?"
                                  ConfirmationTitle="Chụp xác nhận"
                                  ConfirmationChanged="OnConfirmationClose" @ref="Confirmclose"></ConfirmCheckInCamera>
                </div>
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th style="text-align: center!important;"></th>
                            @foreach (var item in daysOfWeek)
                            {
                                <th style="text-align: center!important;">@item.Item1<br><small>@item.Item2.ToString("dd/MM/yyyy")</small></th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var shift in listShift.OrderBy(c => c.IndexOfShift))
                        {
                            <tr>
                                <td class="shift">@shift.ShiftName<br><small>@shift.StartTime.ToString(@"hh\:mm")-@shift.EndTime.ToString(@"hh\:mm")</small></td>
                                @foreach (var day in daysOfWeek.Select(c => c.Item2).ToList())
                                {

                                    @if (listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day) != null)
                                    {
                                        <td class="@(new DateTime(day.Year,day.Month,day.Day,shift.StartTime.Hours,shift.StartTime.Minutes,shift.StartTime.Seconds) <= DateTime.Now && DateTime.Now < new DateTime(day.Year,day.Month,day.Day,shift.EndTime.Hours,shift.EndTime.Minutes,shift.EndTime.Seconds) ? "today-schedule" : "")">
                                            <div @onclick="@(() => BookARoom(listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day)))">
                                                @if (listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdCabin != null)
                                                {
                                                    <div>
                                                        <div>
                                                            @if (listBookingCabin.FirstOrDefault(c => c.IdShift == shift.Id
                                                           && c.ClassId == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdClass
                                                           && c.SubjectId == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdSubject
                                                           && c.IdLectuter == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdLecturer
                                                           && c.DateCreated == new DateTime(listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Year, listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Month, listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Day)) != null)
                                                            {
                                                                @if (listBookingCabin.FirstOrDefault(c => c.IdShift == shift.Id
                                                               && c.ClassId == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdClass
                                                               && c.SubjectId == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdSubject
                                                               && c.IdLectuter == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdLecturer
                                                               && c.DateCreated == new DateTime(listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Year, listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Month, listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Day)).CheckinImage != null)
                                                                {
                                                                    <small style="float:left; font-size: 9px;">
                                                                        <i class="fas fa-check-circle" style="margin: 0 3px; color: greenyellow;"></i>
                                                                        <img src="@(Encoding.ASCII.GetString(listBookingCabin.FirstOrDefault(c => c.DateCreated == new DateTime(listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Year, listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Month, listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).TeachingDay.Value.Day) && c.IdShift == shift.Id && c.ClassId == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdClass && c.SubjectId == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdSubject && c.IdLectuter == listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).IdLecturer).CheckinImage))"
                                             style="width:16px;height:16px; object-fit:cover;">
                                                                        Đã CheckIn
                                                                    </small>
                                                                }
                                                            }
                                                        </div>
                                                        <div>
                                                            <small style="float:right; font-size: 9px;">
                                                                <i class="fas fa-circle" style="margin: 0 3px; color: greenyellow;"></i>@listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).CabinName
                                                            </small>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <small style="float:right; font-size: 9px;">
                                                        <i class="far fa-circle" style="margin: 0 3px; color: red;"></i>Chờ xếp phòng
                                                    </small>
                                                }

                                                <br>Lớp: @listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).ClassName
                                                <br>Môn: @listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day).SubjectCode
                                            </div>
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="@(new DateTime(day.Year,day.Month,day.Day,shift.StartTime.Hours,shift.StartTime.Minutes,shift.StartTime.Seconds) <= DateTime.Now && DateTime.Now < new DateTime(day.Year,day.Month,day.Day,shift.EndTime.Hours,shift.EndTime.Minutes,shift.EndTime.Seconds) ? "today-schedule" : "")" style="background-color: #f9fafb63;">
                                            <p style="text-align: center!important;">TRỐNG</p>
                                        </td>
                                    }

                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="py-2"></div>
            <DetailShift ConfirmationMessage="Chi Tiết Ca Dạy"
                 ConfirmationTitle="Xác Nhận"
                 IdClass=@IdClassForDetails
                 IdSubject=@IdSubjectForDetails
                 IdLecturer=@IdLecturerForDetails
                 IdShift=@IdShiftForDetails
                 IdCabin=@IdCabinForDetails
                 ClassSubjectName=@ClassSubjectNameForDetails
                 LecturerName=@LecturerNameForDetails
                 ShiftName=@ShiftNameForDetails
                 CabinName=@CabinNameForDetails
                 TeachingDay=@TeachingDayForDetails
                 StartShift=@StartShiftForDetails
                 EndShift=@EndShiftForDetails
                 @ref="bookingCabin"
                 ConfirmationChanged="OnConfirmationBooking">
            </DetailShift>
        }
    }

</body>

@code {
    [Parameter]
    public string idUserNonDecrypt { get; set; }
    public string idUser { get; set; }
    [Inject] public CryptoServices _cryptoServices { get; set; }
    [Inject] ITaskRepositories<ClassUPViewModel> subjectClassRepo { get; set; }
    [Inject] ITeachingScheduleApiClient teachingScheduleApiClient { get; set; }
    [Inject] public IBookingCabinApiClient _bookingCabinApiClient { get; set; }
    [Inject] IShiftOfCabinApiClient shiftOfCabinApiClient { get; set; }
    [Inject] IBlockRepo blockRepo { get; set; }
    [Inject] ISemesterRepo semesterRepo { get; set; }
    [Inject] private IToastService _toastService { get; set; }

    protected DetailShift bookingCabin { set; get; }
    protected BookingRequestForLecturerPage bookingRequestForLecturer { set; get; }

    private string image = "";
    private string close = "none";//dùng đóng mở tab chụp ảnh
    private bool loadCamera;
    private byte[] byteimage;//biến đế lưu ảnh theo kiểu byte
    private bool viewImage;
    private bool viewCamera;
    DateTime date;
    string blockName;
    string semesterName;
    List<(string, DateTime)> daysOfWeek = new List<(string, DateTime)>();
    List<ShiftOfCabinVM> listShift;
    List<ShiftOfCabinFullVM> listFullShift;
    //List<ClassUPViewModel> listSubClass;
    List<TeachingScheduleVM> listSchedule;
    List<BookingCabinVM> listBookingCabin;

    protected ConfirmCheckInCamera Confirmclose { get; set; }

    public Guid IdClassForDetails = Guid.Empty;
    public Guid IdSubjectForDetails = Guid.Empty;
    public Guid IdLecturerForDetails = Guid.Empty;
    public Guid IdShiftForDetails = Guid.Empty;
    public Guid? IdCabinForDetails = null;
    public string ClassSubjectNameForDetails;
    public string LecturerNameForDetails;
    public string ShiftNameForDetails;
    public string CabinNameForDetails;
    public DateTime TeachingDayForDetails;
    public TimeSpan StartShiftForDetails;
    public TimeSpan EndShiftForDetails;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            idUser = _cryptoServices.Decrypt(idUserNonDecrypt.Replace("cabin","/"));
            try
            {
                string url = "http://localhost:5001/SignalRCabinHub";
                HubConnection _connection = null;
                bool isConnected = false;
                string connectionStatus = "Closed";
                _connection = new HubConnectionBuilder()
                    .WithUrl(url)
                    .Build();

                await _connection.StartAsync();
                isConnected = true;
                connectionStatus = "Connected :-)";

                _connection.Closed += async (s) =>
                {
                    isConnected = false;
                    connectionStatus = "Disconnected";
                    await _connection.StartAsync();
                    isConnected = true;
                };

                _connection.On<string>("SignalRCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRGroupCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRBookingCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRTeachingSchedules", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRSemesterBlocks", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });
            }
            catch (Exception ex)
            {

            }
            finally
            {
                //listSubClass = await subjectClassRepo.GetAllClass();
                //listSubClass = listSubClass.Where(c => c.HomeroomLecturerId == Guid.Parse(idUser)).ToList();

                listSchedule = await teachingScheduleApiClient.GetAll();
                listSchedule = listSchedule == null ? new List<TeachingScheduleVM>() : listSchedule.Where(c => c.Status == 0 && c.IdLecturter == Guid.Parse(idUser)).ToList();

                var listBlock = await blockRepo.GetAll();
                var listSemester = await semesterRepo.GetAll();

                date = DateTime.Now;
                blockName = listBlock.FirstOrDefault(c => c.Status == 0 && c.Id == listSchedule.FirstOrDefault(c => c.Status == 0).IdBlock).NameOfBlock;
                semesterName = listSemester.FirstOrDefault(c => c.Status == 0 && c.Id == listSchedule.FirstOrDefault(c => c.Status == 0).IdSemester).NameofSemester;
                LoadDaysOfWeek(date);

                listShift = await shiftOfCabinApiClient.GetAll();
                listShift = listShift == null ? new List<ShiftOfCabinVM>() : listShift.Where(c => c.Status != 1).ToList();

                listFullShift = await shiftOfCabinApiClient.GetAllInformationOfShiftOfCabin();
                listFullShift = listFullShift == null ? new List<ShiftOfCabinFullVM>() : listFullShift.Where(c => c.IdLecturer == Guid.Parse(idUser)).ToList();

                listBookingCabin = await _bookingCabinApiClient.GetAll();
                listBookingCabin = listBookingCabin.Where(c => c.Status != 1).ToList();
            }
        }
        catch
        {
            // Lịch học rỗng
            listSchedule = new List<TeachingScheduleVM>();
            listShift = new List<ShiftOfCabinVM>();
            listFullShift = new List<ShiftOfCabinFullVM>();
        }
    }

    private async Task Submit()
    {
        if (image == "")
        {
            _toastService.ShowError("Bạn chưa chụp ảnh");
        }
        else
        {
            close = "none";
            byteimage = Encoding.ASCII.GetBytes(image);//Chuyển image -> byte
            await StoreInDatabase(byteimage);
        }
    }


    private async Task StoreInDatabase(byte[] imageBytes)//lưu ảnh dạng byte vào database
    {
        //Thời gian chụp = DateTime.Now
        //var imageByte = Encoding.ASCII.GetString(imageBytes);
        var listBookingCabin = await _bookingCabinApiClient.GetAll();
        var objForUpdate = listBookingCabin.FirstOrDefault(c => c.Status == 0 && c.SubjectId == IdSubjectForDetails && c.ClassId == IdClassForDetails && c.IdShift == IdShiftForDetails && c.IdLectuter == IdLecturerForDetails && c.IdCabin == IdCabinForDetails && c.DateCreated == new DateTime(TeachingDayForDetails.Year, TeachingDayForDetails.Month, TeachingDayForDetails.Day));
        var obj = new BookingCabinUpdateVM()
            {
                SubjectId = IdSubjectForDetails,
                ClassId = IdClassForDetails,
                IdCabin = Guid.Parse(IdCabinForDetails.ToString()),
                IdShift = IdShiftForDetails,
                IdLectuter = IdLecturerForDetails,
                CheckinImage = imageBytes,
                CheckinTime = DateTime.Now,
                CheckoutTime = objForUpdate.CheckoutTime,
                DateCreated = objForUpdate.DateCreated,
                Note = "Checkin vào cabin",
                Status = 0
            };

        var res = await _bookingCabinApiClient.Update(objForUpdate.Id, Guid.Parse(IdCabinForDetails.ToString()), IdSubjectForDetails, IdClassForDetails, IdShiftForDetails, obj);

        if (res)
        {
            await Swal.FireAsync("Check In", "Check In Thành Công", SweetAlertIcon.Success);
        }
        else
        {
            await Swal.FireAsync("Check In", "Check In Thất Bại", SweetAlertIcon.Error);
        }
        await OnInitializedAsync();
    }
    public async Task Capture()
    {
        viewImage = false;//hiện ảnh
        viewCamera = true;//ẩn camera
        image = await JSRuntime.InvokeAsync<string>("take_snapshot_cabin");//đẩy ảnh vừa chụp
        await StopCamera();
    }
    private async Task ComeBack()
    {
        viewImage = true;//Đổi trạng thái khi ấn chụp ảnh
        viewCamera = false;
        image = "";
        await LoadCamera();
    }

    private async Task OpenCamera()//bật tắt tab chụp ảnh
    {
        try
        {
            viewImage = true;//Đổi trạng thái khi ấn chụp ảnh
            viewCamera = false;
            loadCamera = true;
            close = "block";
            await LoadCamera();
        }
        catch(Exception ex)
        {
            await OnConfirmationClose(true);
            _toastService.ShowError("Có lỗi xảy ra khi bật camera. Vui lòng kiểm tra và thử lại");
        }

    }

    public async Task ViewBookingRequest()
    {
        await bookingRequestForLecturer.show();
    }

    public async Task BookARoom(ShiftOfCabinFullVM obj)
    {
        /*
        * obj = null -> Mở ExchangeTeachingSchedule
        * So sánh DateTime.Now với khoảng ca, thứ
        * Trong khoảng -> Mở CheckIn
        * Ngoài khoảng -> Mở DetailShift
        *
        */
        // DetailShift (Booking)
        IdClassForDetails = Guid.Parse(obj.IdClass.ToString());
        IdSubjectForDetails = Guid.Parse(obj.IdSubject.ToString());
        IdLecturerForDetails = Guid.Parse(obj.IdLecturer.ToString());
        IdShiftForDetails = Guid.Parse(obj.IdShiftOfCabin.ToString());
        IdCabinForDetails = obj.IdCabin == null ? null : Guid.Parse(obj.IdCabin.ToString());
        ClassSubjectNameForDetails = obj.ClassName + " - " + obj.SubjectCode;
        LecturerNameForDetails = obj.LecturerUserName;
        ShiftNameForDetails = obj.ShiftName;
        CabinNameForDetails = obj.CabinName;
        TeachingDayForDetails = obj.TeachingDay.Value;
        StartShiftForDetails = obj.StartTimeOfShift.Value;
        EndShiftForDetails = obj.EndTimeOfShift.Value;

        if (obj == null)
        {
            // ExchangeTeachingSchedule
        }
        else
        {
            DateTime startTime = new DateTime(obj.TeachingDay.Value.Year, obj.TeachingDay.Value.Month, obj.TeachingDay.Value.Day, obj.StartTimeOfShift.Value.Hours, obj.StartTimeOfShift.Value.Minutes, obj.StartTimeOfShift.Value.Seconds);
            DateTime endTime = new DateTime(obj.TeachingDay.Value.Year, obj.TeachingDay.Value.Month, obj.TeachingDay.Value.Day, obj.EndTimeOfShift.Value.Hours, obj.EndTimeOfShift.Value.Minutes, obj.EndTimeOfShift.Value.Seconds);
            var objForUpdate = listBookingCabin.FirstOrDefault(c => c.Status == 0 && c.SubjectId == IdSubjectForDetails && c.ClassId == IdClassForDetails && c.IdShift == IdShiftForDetails && c.IdLectuter == IdLecturerForDetails && c.IdCabin == IdCabinForDetails && c.DateCreated == new DateTime(TeachingDayForDetails.Year, TeachingDayForDetails.Month, TeachingDayForDetails.Day));

            if (DateTime.Now >= startTime && DateTime.Now < endTime && IdCabinForDetails != null && objForUpdate.CheckinImage == null)
            {
                // CheckIn
                await OpenCamera();
            }
            else
            {
                await bookingCabin.show();
            }
        }
    }
    private async Task Close()//Thoát chụp ảnh
    {
        Confirmclose.show();
    }

    private async Task LoadCamera()
    {
        image = "";
        await JSRuntime.InvokeVoidAsync("ready_cabin", this);//Bật camera
        TimeLoad();

    }

    private async Task StopCamera()//tắt camera
    {
        await JSRuntime.InvokeVoidAsync("stop_cabin", this);
    }

    private void TimeLoad()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        Thread.Sleep(700);//Cho camera load 0.7s
        stopwatch.Stop();
        loadCamera = false;
    }
    public async Task OnConfirmationClose(bool deleteconfirmed)//xác nhận thoát tab chụp ảnh
    {
        if (deleteconfirmed)
        {
            close = "none";
            await StopCamera();
        }
    }

    private async Task OnConfirmationBooking(int result)
    {
        if (result == 1)
        {
            await Swal.FireAsync("Xếp Phòng", "Xếp Phòng Cho Lớp Học Thành Công", SweetAlertIcon.Success);
        }
        if (result == 2)
        {
            await Swal.FireAsync("Xếp Phòng", "Xếp Phòng Cho Lớp Học Thất Bại", SweetAlertIcon.Error);
        }

        await OnInitializedAsync();
    }

    #region Load DaysOfWeek
    public void LoadDaysOfWeek(DateTime date)
    {
        date = new DateTime(date.Year, date.Month, date.Day);
        daysOfWeek = new List<(string, DateTime)>();

        var dayOfWeek = date.DayOfWeek;
        DateTime monday = new DateTime();
        if (dayOfWeek == DayOfWeek.Sunday)
        {
            //xét chủ nhật là đầu tuần
            //return date.AddDays(1);

            //xét chủ nhật là ngày cuối tuần
            monday = date.AddDays(-6);
        }
        else
        {
            int offset = dayOfWeek - DayOfWeek.Monday;
            monday = date.AddDays(-offset);
        }
        daysOfWeek.Add(new("Thứ 2", monday));
        for (int i = 1; i < 7; i++)
        {
            if (i == 6)
            {
                daysOfWeek.Add(new($"Chủ Nhật", monday.AddDays(i)));
            }
            else
            {
                daysOfWeek.Add(new($"Thứ {i + 2}", monday.AddDays(i)));
            }
        }
    }

    #endregion

}
