@page "/Cabin/directorOfTraining/{idTrainingFacilityNonDecrypt}"
@attribute [Authorize(Roles = "DirectorOfTraining")]

@using FPLSP.Data.Securities;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Diagnostics;
@using Blazored.Toast.Services;
@using FPLSP.Components;
@using FPLSP.Components.CabinProject;
@using FPLSP.Repositories.Interfaces.CabinProject;
@using FPLSP.Repositories.Interfaces;
@using FPLSP.Server.Domain.Dtos;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.Cabin;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.GroupCabin;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.ShiftOfCabin;
@using FPLSP.Server.Infrastructure.ViewModels;
@using FPLSP.Server.Infrastructure.ViewModels.CabinProject.TeachingSchedule;
@using Microsoft.AspNetCore.SignalR.Client;
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" rel="stylesheet" />

<body>
    @if (listSemesterBlock == null || listCabinActive == null)
    {
        <LoadingIndicator></LoadingIndicator>
    }
    else
    {
        <EditForm Model="_Model" class="row">
            <div class="row m-0 p-0 mb-3">
                <div class="col-6">
                    <label style="font-weight:bolder;">Chọn kì học - block</label>
                    <InputSelect id="time" class=" form-select" placeholder="Chọn kì học - block" ValueExpression="@(()=>semesterBlock)" Value="@semesterBlock" ValueChanged="@((string? value) => CheckSemesterBlock(value))">
                        <option disabled value="@(nullString)">Chọn kì học - block</option>
                        @if (listSemesterBlock.Count() != 0)
                        {
                            @foreach (var item in listSemesterBlock)
                            {
                                if (listSemBlock.FirstOrDefault(c => c.IdSemester == Guid.Parse(item.Item1.Split(" * ")[0]) && c.IdBlock == Guid.Parse(item.Item1.Split(" * ")[1])).Status != 1)
                                {
                                    <option selected value="@(item.Item1)">@(item.Item2)</option>
                                }
                                else
                                {
                                    <option value="@(item.Item1)">@(item.Item2)</option>
                                }
                            }
                        }

                    </InputSelect>
                </div>
                <div class="col-6">
                    <label style="font-weight:bolder;">Chọn tuần</label>
                    <InputSelect class="form-select" disabled="@(semesterBlock == null)" placeholder="Chọn tuần" ValueExpression="@(()=>week)" Value="@week" ValueChanged="@((string? value) => CheckDateRange(value))">
                        <option disabled value="@(nullString)">Chọn tuần</option>
                        @foreach (var item in listWeekOfBlock)
                        {
                            @if (item == week) @*(DateTime.Now >= new DateTime(Convert.ToInt32(item.Split(" - ")[0].Split("/")[0]), Convert.ToInt32(item.Split(" - ")[0].Split("/")[1]), Convert.ToInt32(item.Split(" - ")[0].Split("/")[2])) &&
                    DateTime.Now < new DateTime(Convert.ToInt32(item.Split(" - ")[1].Split("/")[0]), Convert.ToInt32(item.Split(" - ")[1].Split("/")[1]), Convert.ToInt32(item.Split(" - ")[1].Split("/")[2])))*@
                            {
                                <option selected value="@item">@item</option>
                            }
                            else
                            {
                                <option value="@item">@item</option>
                            }
                        }
                    </InputSelect>
                </div>
            </div>
        </EditForm>

        @if (daysOfWeek.Count() == 0)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            @if (listSemesterBlock.Count() == 0)
            {
                <h3>Hiện tại không có kì học - block nào hoạt động</h3>
            }
            else
            {
                <div>
                    <button class="btn btn-primary mb-4" @onclick="NavigateToViewSchedule">Xem lịch dạy của giảng viên</button>
                </div>
                <div class="table-container mb-3">
                    <table>
                        <thead>
                            <tr>
                                <th style="text-align: center!important;"></th>
                                @foreach (var item in daysOfWeek)
                                {
                                    <th style="text-align: center!important; width: @(100/daysOfWeek.Count())%;">@item.Item1<br><small>@item.Item2.ToString("dd/MM/yyyy")</small></th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var shift in listShift.OrderBy(c => c.IndexOfShift))
                            {
                                <tr>
                                    <td class="shift">@shift.ShiftName<br><small>@shift.StartTime.ToString(@"hh\:mm")-@shift.EndTime.ToString(@"hh\:mm")</small></td>
                                    @foreach (var day in daysOfWeek.Select(c => c.Item2).ToList())
                                    {

                                        @if (listFullShift.FirstOrDefault(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day) != null)
                                        {
                                            @if (listFullShift.Where(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day && c.IdCabin != null).Count() != 0)
                                            {
                                                <td @onclick="@(() => NavigateToListDetails(shift.Id,day))">
                                                    <b style="text-align: center!important;">
                                                        ĐÃ XẾP PHÒNG: @(listFullShift.Where(c => c.IdShiftOfCabin == shift.Id && c.TeachingDay == day && c.IdCabin != null).Count())/@(allCabin)
                                                    </b>
                                                    <br />
                                                    @foreach (var group in listGroupCabin.GroupBy(c => c.IdSpec))
                                                    {
                                                        @listSpec.FirstOrDefault(c=>c.Id == group.Key).SpecializationName

                                                        @(
                                                            ": "
                                                            ) @(
                                                          BookedCabinInAllCabin(group.Key, shift.Id, day)
                                                          )
                                                        <br />
                                                    }

                                                    @foreach (var group in listFullShift.GroupBy(c => new { c.IdSpecialized, c.SpecializedName }))
                                                    {
                                                        if (group.Key.IdSpecialized == null)
                                                        {
                                                            @(
                                                                "Khác: "
                                                                ) @(
                                                              BookedCabinInAllCabin(null, shift.Id, day)
                                                              )
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                            @*@group.Key.SpecializedName@(":") @(BookedCabinInAllCabin(Guid.Parse(group.Key.IdSpecialized.ToString()), shift.Id, day))*@
                                                        }
                                                        <br />
                                                    }
                                                </td>
                                            }
                                            else
                                            {
                                                <td @onclick="@(() => NavigateToListDetails(shift.Id,day))" style="background-color: #f9fafb63;">
                                                    <b style="text-align: center!important;">ĐÃ XẾP PHÒNG: 0/@(allCabin)</b>
                                                    <br>
                                                </td>
                                            }
                                        }
                                        else
                                        {
                                            <td @onclick="@(() => NavigateToListDetails(shift.Id,day))" style="background-color: #f9fafb63;">
                                                <b style="text-align: center!important;">ĐÃ XẾP PHÒNG: 0/@(allCabin)</b>

                                                <br>
                                            </td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
    }

</body>

@code {
    [Parameter]
    public string idTrainingFacilityNonDecrypt { get; set; }
    public string idTrainingFacility { get; set; }
    [Inject] public CryptoServices _cryptoServices { get; set; }
    [Inject] IShiftOfCabinApiClient shiftOfCabinApiClient { get; set; }
    [Inject] ISemesterRepo semesterRepo { get; set; }
    [Inject] IBlockRepo blockRepo { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] ISemesterBlockRepo semesterBlockRepo { get; set; }
    [Inject] IGroupCabinRepo groupCabinRepo { get; set; }
    [Inject] ISpecializedUPRepo specializedUPRepo { get; set; }
    List<GroupCabinViewModel> listGroupCabin { get; set; }
    List<CabinViewModel> listCabinActive;
    [Inject] ICabinRepo cabinRepo { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    DateTime startDateOfBlock;
    List<(string, DateTime)> daysOfWeek = new List<(string, DateTime)>();
    List<ShiftOfCabinVM> listShift;
    List<SpecializedDto> listSpec;

    private string nullString = null;

    private string semesterBlock;
    private string week;

    List<ShiftOfCabinFullVM> listFullShift = new List<ShiftOfCabinFullVM>();
    ShiftOfCabinFullVM _Model = new ShiftOfCabinFullVM();

    List<(string, string)> listSemesterBlock = new List<(string, string)>();
    List<string> listWeekOfBlock = new List<string>();
    List<SemesterBlockDto> listSemBlock;
    int allCabin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            idTrainingFacility = _cryptoServices.Decrypt(idTrainingFacilityNonDecrypt.Replace("cabin", "/"));
            try
            {
                string url = "http://localhost:5001/SignalRCabinHub";
                HubConnection _connection = null;
                bool isConnected = false;
                string connectionStatus = "Closed";
                _connection = new HubConnectionBuilder()
                    .WithUrl(url)
                    .Build();

                await _connection.StartAsync();
                isConnected = true;
                connectionStatus = "Connected :-)";

                _connection.Closed += async (s) =>
                {
                    isConnected = false;
                    connectionStatus = "Disconnected";
                    await _connection.StartAsync();
                    isConnected = true;
                };

                _connection.On<string>("SignalRCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRGroupCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRBookingCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRTeachingSchedules", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRSemesterBlocks", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });
            }
            catch (Exception ex)
            {


            }
            finally
            {
                listCabinActive = await cabinRepo.GetAllCabinAsync();
                listCabinActive = listCabinActive.Where(c => c.Status != 1 && c.IdTrainingFacility == Guid.Parse(idTrainingFacility)).ToList();
                allCabin = listCabinActive.Count();

                listShift = await shiftOfCabinApiClient.GetAll();
                listShift = listShift.Where(c => c.Status == 0).ToList();


                //listSubClass = await subjectClassRepo.GetAllClass();
                //listSubClass = listSubClass.Where(c => c.HomeroomLecturerId == Guid.Parse(idUser)).ToList();
                listGroupCabin = await groupCabinRepo.GetAllGroupCabinAsync();
                listGroupCabin = listGroupCabin.Where(c => c.Status == 0).ToList();

                listSpec = await specializedUPRepo.GetAll();


                listFullShift = await shiftOfCabinApiClient.GetAllInformationOfShiftOfCabin();
                listFullShift = listFullShift.Where(c => c.IdTrainingFacility == Guid.Parse(idTrainingFacility)).ToList();

                listSemesterBlock.Clear();
                var listGrouping = listFullShift.GroupBy(c => new { c.IdSemester, c.IdBlock, c.SemesterName, c.BlockName })./*Select(c => new($"{c.Key.IdSemester.ToString()} * {c.Key.IdBlock.ToString()}", $"{c.Key.SemesterName} - {c.Key.BlockName}")).*/ToList();

                listSemBlock = await semesterBlockRepo.GetAll();
                if (listSemBlock != null)
                {
                    listSemBlock = listSemBlock.Where(c => c.Status == 0).ToList();

                    var listSem = await semesterRepo.GetAll();
                    var listBlock = await blockRepo.GetAll();
                    foreach (var group in listSemBlock.GroupBy(c => new { c.IdSemester, c.IdBlock }))
                    {
                        listSemesterBlock.Add(new($"{group.Key.IdSemester.ToString()} * {group.Key.IdBlock.ToString()}", $"{listSem.FirstOrDefault(c => c.Id == group.Key.IdSemester).NameofSemester} - {listBlock.FirstOrDefault(c => c.Id == group.Key.IdBlock).NameOfBlock}"));
                    }
                    foreach (var group in listGrouping)
                    {
                        if (group.Key.IdSemester != null && group.Key.IdBlock != null)
                        {
                            if (listSemBlock.FirstOrDefault(c => c.IdSemester == group.Key.IdSemester && c.IdBlock == group.Key.IdBlock) != null)
                            {
                                if (listSemBlock.FirstOrDefault(c => c.IdSemester == group.Key.IdSemester && c.IdBlock == group.Key.IdBlock).Status != 1)
                                {
                                    semesterBlock = $"{group.Key.IdSemester.ToString()} * {group.Key.IdBlock.ToString()}";
                                }
                            }
                        }
                    }
                    await CheckSemesterBlock(semesterBlock);
                    LoadDaysOfWeek(DateTime.Now);
                    week = $"{daysOfWeek[0].Item2.ToString("dd/MM/yyyy")} - {daysOfWeek[0].Item2.AddDays(6).ToString("dd/MM/yyyy")}";

                    await LoadFullShift();
                }
            }
        }
        catch
        {
            // Lịch học rỗng
            listFullShift = new List<ShiftOfCabinFullVM>();
        }
    }

    private string BookedCabinInAllCabin(Guid? idSpec, Guid idShift, DateTime day)
    {
        var booked = listFullShift.Where(c => c.IdShiftOfCabin == idShift && c.TeachingDay == day && c.IdSpecialized == idSpec && c.IdCabin != null).Count().ToString();
        var all = listGroupCabin.Where(c => c.IdSpec == idSpec && listCabinActive.Any(x => x.Id == c.IdCabin)).Count().ToString();
        if (idSpec == null)
        {
            return booked + "/" + listCabinActive.Count(c => !listGroupCabin.Any(x => x.IdCabin == c.Id));
        }
        return booked + "/" + all;
    }

    private async Task LoadFullShift()
    {
        //if (semesterBlock != null && week != null)
        //{
        listFullShift = await shiftOfCabinApiClient.GetAllInformationOfShiftOfCabin();

        //date = listFullShift.FirstOrDefault().TeachingDay == null ? new DateTime(1, 1, 1) : listFullShift.FirstOrDefault().TeachingDay;
        //}
        //else
        //{

        //}
    }

    public async Task CheckSemesterBlock(string value)
    {
        semesterBlock = value;
        if (semesterBlock == null)
        {
            listWeekOfBlock.Clear();
        }
        week = null;
        await LoadWeeksOfBlock(semesterBlock);
    }


    public async void CheckDateRange(string value)
    {
        week = value;
        if (week != null)
        {
            var date = week.Split(" - ")[0];
            var day = date.Split("/")[0];
            var month = date.Split("/")[1];
            var year = date.Split("/")[2];
            LoadDaysOfWeek(new DateTime(Convert.ToInt32(year), Convert.ToInt32(month), Convert.ToInt32(day)));
        }
        else
        {
            daysOfWeek = new List<(string, DateTime)>();
        }
    }

    public async Task LoadWeeksOfBlock(string semesterBlockInput)
    {
        if (semesterBlockInput != null)
        {
            var idSemester = semesterBlockInput.Split(" * ")[0];
            var idBlock = semesterBlockInput.Split(" * ")[1];

            var semesterBlockSearch = await semesterBlockRepo.GetById(idBlock, idSemester);
            var startDate = new DateTime(semesterBlockSearch.StartTime.Year, semesterBlockSearch.StartTime.Month, semesterBlockSearch.StartTime.Day);
            var endDate = new DateTime(semesterBlockSearch.EndTime.Year, semesterBlockSearch.EndTime.Month, semesterBlockSearch.EndTime.Day);

            startDate = FindMonDay(startDate);
            endDate = FindMonDay(endDate).AddDays(6);
            var diff = (endDate - startDate).Days;
            listWeekOfBlock.Clear();

            for (int i = 0; i < diff; i += 7)
            {
                listWeekOfBlock.Add($"{startDate.AddDays(i).ToString("dd/MM/yyyy")} - {startDate.AddDays(i + 6).ToString("dd/MM/yyyy")}");
            }
        }
    }

    private async Task NavigateToListDetails(Guid idShift, DateTime day)
    {
        //<a href="/listCabin/@(shift.Id)/@($"{day.Day}-{day.Month}-{day.Year}")"></a>

        _navigationManager.NavigateTo($"/listCabin/{_cryptoServices.Encrypt(idTrainingFacility.ToString()).Replace("/", "cabin")}/{_cryptoServices.Encrypt(idShift.ToString()).Replace("/", "cabin")}/{$"{day.Day}-{day.Month}-{day.Year}"}");
    }

    private async Task NavigateToViewSchedule()
    {
        //<a href="/listCabin/@(shift.Id)/@($"{day.Day}-{day.Month}-{day.Year}")"></a>

        _navigationManager.NavigateTo($"/Cabin/directorOfTraining/viewSchedule/{idTrainingFacilityNonDecrypt}");
    }

    #region Load DaysOfWeek
    public void LoadDaysOfWeek(DateTime date)
    {
        date = new DateTime(date.Year, date.Month, date.Day);
        daysOfWeek = new List<(string, DateTime)>();

        var dayOfWeek = date.DayOfWeek;
        DateTime monday = new DateTime();
        if (dayOfWeek == DayOfWeek.Sunday)
        {
            //xét chủ nhật là đầu tuần
            //return date.AddDays(1);

            //xét chủ nhật là ngày cuối tuần
            monday = date.AddDays(-6);
        }
        else
        {
            int offset = dayOfWeek - DayOfWeek.Monday;
            monday = date.AddDays(-offset);
        }

        daysOfWeek.Add(new("Thứ 2", monday));
        for (int i = 1; i < 7; i++)
        {
            if (i == 6)
            {
                daysOfWeek.Add(new($"Chủ Nhật", monday.AddDays(i)));
            }
            else
            {
                daysOfWeek.Add(new($"Thứ {i + 2}", monday.AddDays(i)));
            }
        }
    }
    #endregion

    #region Tìm thứ 2
    public DateTime FindMonDay(DateTime date)
    {
        date = new DateTime(date.Year, date.Month, date.Day);
        daysOfWeek = new List<(string, DateTime)>();

        var dayOfWeek = date.DayOfWeek;
        DateTime monday = new DateTime();
        if (dayOfWeek == DayOfWeek.Sunday)
        {
            //xét chủ nhật là đầu tuần
            //return date.AddDays(1);

            //xét chủ nhật là ngày cuối tuần
            monday = date.AddDays(-6);
        }
        else
        {
            int offset = dayOfWeek - DayOfWeek.Monday;
            monday = date.AddDays(-offset);
        }

        return monday;
    }

    #endregion
}
