@using FPLSP.Repositories.Interfaces
@using FPLSP.Repositories.Interfaces.CabinProject
@if (ShowConfirmation)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@ConfirmationTitle</h5>

                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                        @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @ConfirmationMessage
                    @foreach (var item in nameLec)

                    {
                        <h4>@item</h4>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"
                        @onclick="() => OnConfirmationChange(false)">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger"
                        @onclick="() => OnConfirmationChange(true)">
                        Xác nhận
                    </button>
                </div>
            </div>
        </div>
    </div>
}





@code {
    [Inject] NavigationManager _navigationManager { get; set; }
    protected bool ShowConfirmation { get; set; }

    [Parameter]
    public string ConfirmationTitle { get; set; } = "Confirm Delete";

    [Parameter]
    public string ConfirmationMessage { get; set; } = "Are you sure you want to delete";

    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }

    List<string> nameLec = new List<string>();
    [Inject] private IBookingCabinApiClient _bookingCabinApiClient { get; set; }
    [Inject] private ILecturersCPRepo lecturersCPRepo { get; set; }
    public async Task show(Guid Id)
    {
        nameLec = new List<string>();
        var bkcb = await _bookingCabinApiClient.GetAll();
        bkcb = bkcb.Where(x => x.IdCabin == Id).Where(x => x.Status == 0 && DateTime.Now < x.CheckinTime).ToList();
        var lec = await lecturersCPRepo.GetAllLecturerAsync();
        bkcb = bkcb.Where(x => x.IdCabin == Id).ToList();

        foreach (var item in bkcb)
        {
            var takeLec = lec.FirstOrDefault(x => x.Id == item.IdLectuter);
            if (takeLec != null)
            {
                nameLec.Add(takeLec.Email.Replace("@fpt.edu.vn",""));
            }

        }
        if (nameLec.Count != 0)
        {
            ShowConfirmation = true;
            StateHasChanged();
        }
        else
        {
            ShowConfirmation = false;
            StateHasChanged();
            await ConfirmationChanged.InvokeAsync(true);
        }

    }
    protected async Task OnConfirmationChange(bool value)
    {
        ShowConfirmation = false;

        await ConfirmationChanged.InvokeAsync(value);

    }
}

