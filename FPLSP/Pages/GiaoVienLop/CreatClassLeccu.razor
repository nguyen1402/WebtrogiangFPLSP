@page "/Creat/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}"
@using Blazored.Toast.Services
@using FPLSP.Data
@using FPLSP.Data.Securities;
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Domain.Dtos.StudentUPDtos
@using FPLSP.Server.Domain.Entities.UserParts
@using FPLSP.Server.Infrastructure.ViewModels.GiaoVienTaoLop
@using FPLSP.Server.Infrastructure.ViewModels.StudentClassUPVm
@using FPLSP.Server.Infrastructure.ViewModels.StudentQuizUPVm
@using FPLSP.Server.Infrastructure.ViewModels.StudentsUPVm
@using FPLSP.Server.Infrastructure.ViewModels.Subject
@attribute [Authorize(Roles = "LecturerFPLSP")]
<div class="row pt-3">

    <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">Chuyên ngành: <a style="color:blue;box-shadow: 0 1px" @onclick="() => ResToSpec()">@lstSpecAll.Where(c=>c.Id == Guid.Parse(specializedId)).Select(c=>c.SpecializationName).FirstOrDefault()</a> </li>
        <li  class="breadcrumb-item">Môn: <a style="color:blue;box-shadow: 0 1px" @onclick="() => Quaylai()"> @SubjectUPList.Where(c=>c.Id == Guid.Parse(subjectId)).Select(c=>c.SubjectName).FirstOrDefault()</a> </li>
        <li  class="breadcrumb-item active" aria-current="page">Thêm lớp học</li>
    </ol>
</nav>
    <h3 class="text-center pt-2 pb-2">Thông tin lớp học</h3>

    @if (ShowAuthError)
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    <EditForm Model="subjectClassVM" OnValidSubmit="Create" class="card card-body bg-light">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="form-group pt-2 col-md-12">
                <label for="exampleFormControlInput1" class="col-md-2 col-form-label">Tên Lớp:</label>
                <div class="col-md-12">
                    <input rows="2" cols="50" class="form-control" @bind="@subjectClassVM.ClassroomName"
                               autocomplete="off"
                               id="exampleFormControlInput1"
                               @oninput="((ChangeEventArgs e)=>ChangedClassName(e))"
                               list="txt"
                               placeholder="Vui lòng nhập tên lớp"></input>
                    <ValidationMessage For="@(() => subjectClassVM.ClassroomName)" />
                </div>
            </div>
            <div class="row d-flex justify-content-center">
        <div class="row d-flex justify-content-center">
        <datalist id="txt">
            @if (_lsclassUps.Count != 0)
            {
                @foreach (var x in _lsclassUps.GroupBy(c => c.ClassroomName))
                {
                    @foreach (var z in x)
                    {
                        <option value="@z.ClassroomName"></option>
                        break;
                    }
                }
            }
        </datalist>
    </div>
    </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-md-6">
                <label for="name" class="col-md-2 col-form-label">Tòa nhà:</label>
                <div class="col-md-12">
                    <InputText class="form-control" @bind-Value="subjectClassVM.Building"></InputText>
                    <ValidationMessage For="@(() => subjectClassVM.Building)" />
                </div>
            </div>
            <div class="form-group pt-2 col-md-6">
                <label for="name" class="col-md-4 col-form-label">Số lượng sinh viên:</label>
                <div class="col-md-12">
                    <InputNumber class="form-control" @bind-Value="subjectClassVM.StudentAmount"></InputNumber>
                    <ValidationMessage For="@(() => subjectClassVM.StudentAmount)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group pt-2 col-md-6">
                <label for="name" class="col-md-3 col-form-label">Ngày bắt đầu: </label>
                <div class="col-md-12">
                    <InputDate id="name" class="form-control" @bind-Value="subjectClassVM.DateStarted" />
                    <ValidationMessage For="@(() => subjectClassVM.DateStarted)" />
                </div>
            </div>
            <div class="form-group pt-2 col-md-6">
                <label for="name" class="col-md-3 col-form-label">Ngày kết thúc: </label>
                <div class="col-md-12">
                    <InputDate id="name" class="form-control" @bind-Value="subjectClassVM.EndDate" />
                    <ValidationMessage For="@(() => subjectClassVM.EndDate)" />
                </div>
            </div>
        </div>
        <div class="row pt-2">
            <div class="col-md-6">

            </div
            <div class="col-md-6">
                  <div class="d-flex flex-row-reverse">
                     <div class="p-2">
                             <button type="submit" class="btn btn-success">Tạo mới</button>
                     </div>
                     
                      <div class="p-2">
                           <a class="btn btn-outline-primary" title="Thêm sinh viên bằng email" @onclick="()=>OnText(testAre)">Thêm bằng Email</a>
                      </div>
                      
                      <div class="p-2">
                           <a @onclick="()=>Quaylai()" class="btn btn-danger">Quay Lại</a>
                      </div> 
                  </div>
            </div>
           
        </div>
       
        @*<div class="row">
            <InputFile title="Danh sách sinh viên excel" enctype="multipart/form-data" OnChange="@((InputFileChangeEventArgs args) => OnFileSelected(args))" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"></InputFile>
        </div>*@
    </EditForm>

</div>

<div class="row">
    <div class="">
        <h3 class="text-center pb-2">Danh sách sinh viên</h3>

    </div>
</div>
@if (_lststudentUpDtosALL.Count() > 0 )
{
    <div class="row">
        <div class="col-md-12">
            <FPLSP.Pages.StudentUPPages.StudentUPSearch OnSearch="SearchStudentUP"></FPLSP.Pages.StudentUPPages.StudentUPSearch>
        </div>
    </div>


    <div class="mt-3">
        <table class="table table-hover table-bordered js-copytextarea " cellpadding="0" cellspacing="0" border="0"
           id="sampleTable">
            <thead class="text-center">
                <tr>
                    <th width="5%">
                        <input type="checkbox" class="form-check-input"
                           @bind="@Check" @onchange="EventArgs => {CheckAllExpense( EventArgs.Value);} " @bind:event="oninput" id="flexCheckDefault">
                    </th>
                    <th>Mã Sinh Viên</th>
                    <th>Tên Sinh Viên</th>
                    <th>Ảnh</th>
                    <th>Email</th>

                </tr>
            </thead>
            <tbody class="text-center">
                @foreach (var item in _lststudentUpDtosALL)
                {
                    <tr>
                        <td width="10" class="text-center">
                            <input type="checkbox" class="form-check-input" checked=@item.IsChecked
                           @onclick="() => CheckManual(item.Id,item.IsChecked)">
                        </td>
                        <td>@item.StudentCode</td>
                        <td>@item.StudentName</td>
                        <td><img src="@item.ImageUrl" alt="product image" onerror="this.src='./css/images/Others/logoFPT.png'" height=190 width=170></td>
                        <td>@item.Email</td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="footer text-muted">
    <div class="row mt-3">
        <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
    </div>
</div>
    </div>
    <AddsutdentInClassTextAre ConfirmationMessage="Xác nhận thêm"
                          ConfirmationTitle="Danh sách email sinh viên"
                          @ref="addsutdentInClassText"
                          Confirmation="pushTextAre"
                          ConfirmationChanged="OnConfirmationUpdate"
>
</AddsutdentInClassTextAre>
}
else
{
   @if (encounter != 14)
                    {
                        <LoadingIndicator></LoadingIndicator>
                    }
                    else
                    {
                        <h5>Danh sách sinh viên trống</h5>
                    }
}
<PopUpConfirm ConfirmationMessage="Bạn Có Chắc Muốn Sử Dụng Thuộc Tính Của Lớp Đang tồn tại không ?"
                  ConfirmationTitle="Xác nhận của bạn ?"
                  @ref="DeleConfirmation"
                  ConfirmationChanged="OnConfirmationDelete">

</PopUpConfirm>

@code{
    [Parameter]
    public string specializedIdNonDecrypt { get; set; }
    [Parameter]
    public string lecuIdNonDecrypt { get; set; }
    [Parameter]
    public string subjectIdNonDecrypt { get; set; }


    public string specializedId  = "";

    public string lecuId = "";

    public string subjectId = "";
    [Parameter]
    public string Error { get; set; }

    public string bindtext;
    [Inject]
    public IStudentUPRepo _studentUPRepo { get; set; }

    private List<ClassUp> _lsclassUps;
    private ClassUp CP = new ClassUp();
    protected PopUpConfirm DeleConfirmation { set; get; }

    [Inject]
    public IStudentClassUPRepo _reportStudentClassUPRepo { get; set; }
    [Inject]
    public IStudentQuizUPRepo _studentQuizUPRepo { get; set; }
    [Inject]
    public ICopySubjectInClassRepo ICopySubjectInClassRepo { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }
    [Inject]
    public IClassSubjectApiClient _iClassSubjectApiClient { get; set; }
    [Inject] private IToastService _toastService { get; set; }
     [Inject]
    public ILecturersCPRepo _lecturersCPRepo { get; set; }
    private SubjectClassVM subjectClassVM { get; set; } = new SubjectClassVM();
    AddsutdentInClassTextAre addsutdentInClassText { get; set; }
    public List<StudentUpDto> _lststudentUpDtosALL { get; set; } = new List<StudentUpDto>();

    public List<StudentUpDto> _liststudentClassJoin { get; set; } = new List<StudentUpDto>();
    public List<StudentClassUP> _studentClassUPDtos { get; set; } = new List<StudentClassUP>();
    public List<SubjectClassUP> _lstsubjectClassUPs { get; set; } = new List<SubjectClassUP>();
    public List<ClassUp> _lstClassUps { get; set; } = new List<ClassUp>();
    public List<StudentUpDto> _lstStudentUpDtosExist { get; set; } = new List<StudentUpDto>();
    public List<StudentUpDto> _lstStudentUpDtosShow { get; set; } = new List<StudentUpDto>();
    public List<Guid?> lstGuidIdStudent { get; set; } = new List<Guid?>();
    private List<ExcelErrors> _lstErrr = new List<ExcelErrors>();
    public List<SubjectClassUP> _lstSubjectClassUPsAll { get; set; } = new List<SubjectClassUP>();
    public List<StudentUpDto> _lstStudentUpCheck { get; set; } = new List<StudentUpDto>();


    public List<StudentUpDto> _lststudentUpDtosExcel { get; set; } = new List<StudentUpDto>();

    public ListIdQuiz _listIdQuizzes = new ListIdQuiz();
    private StudentUPListSearchVm studentUPListSearchVm = new StudentUPListSearchVm();
    private StudentClassUPCreateVm _studentClassUPCreateVm = new StudentClassUPCreateVm();
    private StudentQuizCreateUPVM _studentQuizCreateUPVM = new StudentQuizCreateUPVM();
    private string JoinCodeSubjectClass = string.Empty;
    private Random random = new Random();
    public List<StudentClassUP> _lstStudentClassUPDtos { get; set; } = new List<StudentClassUP>();
    private int encounter;
    public bool ShowAuthError { get; set; }
    IBrowserFile selectedFiles;
    //Guid IDClass;
    public MetaData MetaData { get; set; } = new MetaData();
    private bool Check = false;

    public List<SpecializedDto> lstSpecAll { get; set; } = new List<SpecializedDto>();
    [Inject]
    public ISpecializedCPRepo _iSpecializedClient { get; set; }

    [Inject] public ISubjectUPRepo _subjectUPRepo { get; set; }
    public List<SubjectDto> SubjectUPList { get; set; } = new List<SubjectDto>();
    private SubjectListSearch SubjectListSearch = new SubjectListSearch();
    public string testAre { get; set; }
    [Inject]
    public CryptoServices _cryptoServices { get; set; }

    protected async override Task OnInitializedAsync()
    {
        lecuId = _cryptoServices.Decrypt(lecuIdNonDecrypt.Replace("I0H", "/"));
        subjectId = _cryptoServices.Decrypt(subjectIdNonDecrypt.Replace("I0H", "/"));
        specializedId = _cryptoServices.Decrypt(specializedIdNonDecrypt.Replace("I0H", "/"));


        _lsclassUps = await _iClassSubjectApiClient.GetAllClass();
        _lstStudentUpCheck = await _studentUPRepo.GetAllStudentDtosAsync();
        await GetTasks();
    }
    private async Task OnText(string textAre1)
    {

        addsutdentInClassText.show();
        testAre = textAre1;
    }
    private async Task OnConfirmationUpdate(bool submitConfirmed)
    {
        if (submitConfirmed)
        {
            _lststudentUpDtosExcel.Clear();
             var LectureById = await _lecturersCPRepo.GetLecturerListById(Guid.Parse(lecuId));
            var idTrain = LectureById.TrainingFacilitiesId.Value;
            _lststudentUpDtosExcel = await _reportStudentClassUPRepo.GetListSTTestAre(testAre,idTrain);
            _toastService.ShowSuccess($"Thêm danh sách tạm thành công {_lststudentUpDtosExcel.Count()} sinh viên");
        }
        else
        {
            _toastService.ShowError($"Thêm danh sách thất bại");
        }

        await OnInitializedAsync();
    }
    private async Task pushTextAre(string text)
    {
        testAre = text;
    }
    private async Task GetTasks()
    {
        try
        {
            for (var i = 0; i < 15; i++)
            {
                encounter = i;
            }
            var SubjectUPListpagingResponse1 = await _subjectUPRepo.GetSubjects(Guid.Parse(specializedId), SubjectListSearch);
            SubjectUPList = SubjectUPListpagingResponse1.Items;
            lstSpecAll = await _iSpecializedClient.GetAll();
            _studentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
            _lststudentUpDtosALL = await _studentUPRepo.GetAllStudentDtosAsync();
            var pagingResponse = await _studentUPRepo.GetStudentUPList(studentUPListSearchVm);
            _lstStudentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
            //var pagingResponse = await _studentUPRepo.GetStudentUPList(studentUPListSearchVm);
            //_lststudentUpDtosALL = pagingResponse.Items;

            var items = await _studentUPRepo.GetAllStudentDtosAsync();
            _lstSubjectClassUPsAll = await _iClassSubjectApiClient.GetAllSubjectClass();

            _listIdQuizzes = await _iClassSubjectApiClient.GetListIDQuiz(Guid.Parse(subjectId));

            _lstClassUps = await _iClassSubjectApiClient.GetlstClassUP(Guid.Parse(subjectId));

            foreach (var ClassUP in _lstClassUps)
            {
                var lsjoicode = _lstSubjectClassUPsAll.Where(c => c.SubjectId == Guid.Parse(subjectId)).Select(c => c.JoinCode).ToList();
                var lstGuidIdStudent = _lstStudentClassUPDtos.Where(c => lsjoicode.Contains(c.JoinCodeAsign)).Select(c => c.StudentId).ToList();

                var Lststudents = items.Where(c => lstGuidIdStudent.Contains(c.Id)).ToList();


                foreach (var student in Lststudents)
                {
                    _lstStudentUpDtosExist.Add(student);
                }
            }

            _lststudentUpDtosALL = items;
            //List<StudentUpDto> a = new List<StudentUpDto>();


            //var b = a .Count();
            for (int i = 0; i < _lststudentUpDtosALL.Count(); i++)
            {
                foreach (var studentExist in _lstStudentUpDtosExist)
                {
                    if (_lststudentUpDtosALL.Any(c => c.Id == studentExist.Id))

                    {
                        _lststudentUpDtosALL.Remove(studentExist);
                    }

                }
            }
            foreach (var item in _lststudentUpDtosALL.Where(c=>c.StudentName == null).ToList())
            {
                _lststudentUpDtosALL.Remove(item);
            }
            if (string.IsNullOrEmpty(studentUPListSearchVm.Status) == false)
            {
                _lststudentUpDtosALL = _lststudentUpDtosALL.Where(x => x.Status == Convert.ToInt32(studentUPListSearchVm.Status)).ToList();
            }
            if (studentUPListSearchVm.NameStudent != null)
            {
                _lststudentUpDtosALL = _lststudentUpDtosALL.Where(x => x.StudentName.ToLower().Contains(studentUPListSearchVm.NameStudent.ToLower()) || x.StudentCode.ToLower().Contains(studentUPListSearchVm.NameStudent.ToLower())).ToList();
            }
            var data = _lststudentUpDtosALL.Skip((studentUPListSearchVm.PageNumber - 1) * studentUPListSearchVm.PageSize).Take(studentUPListSearchVm.PageSize).ToList();
            var lstpage = new PageList<StudentUpDto>(data,
                _lststudentUpDtosALL.Count(),
                studentUPListSearchVm.PageNumber,
                studentUPListSearchVm.PageSize);
            _lststudentUpDtosALL = lstpage.Items;
            MetaData = lstpage.MetaData;
            //_liststudentClassJoin = (from studentClass in _studentClassUPDtos
            //                         join student in _lststudentUpDtosALL on studentClass.StudentId equals student.Id
            //                         where studentClass.ClassId == IDClass
            //                         select student).ToList();
            if (_lstStudentUpCheck.Count() > 0)
            {
                foreach (var item in _lststudentUpDtosALL)
                {
                    if (_lstStudentUpCheck.Any(c => c.Id == item.Id))
                    {

                        var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
                        item.IsChecked = a.IsChecked;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

    }
    private async Task SelectedPage(int page)
    {
        foreach (var item in _lststudentUpDtosALL)
        {
            var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
            a.IsChecked = item.IsChecked;
        }
        studentUPListSearchVm.PageNumber = page;
        Check = false;
        await GetTasks();
    }
    private async Task Create()
    {
        ShowAuthError = false;
        var idclaass = _lsclassUps.Where(c => c.ClassroomName == subjectClassVM.ClassroomName && c.Building == subjectClassVM.Building).Select(c => c.Id).FirstOrDefault();
        if (idclaass == Guid.Empty)
        {
            subjectClassVM.ClassId = Guid.NewGuid();
        }else{
            subjectClassVM.ClassId = idclaass;
        }

        subjectClassVM.HomeroomLecturer = Guid.Parse(lecuId);
        subjectClassVM.SpecializedOfClass = Guid.Parse(specializedId);
        subjectClassVM.SubjectId = Guid.Parse(subjectId);
        subjectClassVM.ClassroomName = subjectClassVM.ClassroomName.ToUpper();
        var copyCPtoUP = await ICopySubjectInClassRepo.Copy( Guid.Parse(subjectId));
        var result = await _iClassSubjectApiClient.Create(subjectClassVM);

        if (result != 1)
        {
            _toastService.ShowError("Tên lớp đã tồn tại không thể tạo mới hoặc trong môn học đã tồn tại lớp");
            Navigation.NavigateTo($"/Creat/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        }
        //else
        //{

        //}

        //if (result != 1)
        //{
        //    Error = "Lỗi";
        //    var url = Path.Combine($"/Creat/{specializedId}/{lecuId}/{subjectId}");
        //    ShowAuthError = true;
        //    Navigation.NavigateTo(url);
        //}
        else
        {
            foreach (var item in _lststudentUpDtosALL)
            {
                var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
                a.IsChecked = item.IsChecked;
            }
            int countDouble = 0;
            //_lststudentUpDtosExcel = await _reportStudentClassUPRepo.LoadingBigData(selectedFiles);

            //_lstErrr = await _reportStudentClassUPRepo.GetListErr();
            _lstSubjectClassUPsAll = await _iClassSubjectApiClient.GetAllSubjectClass();
            JoinCodeSubjectClass = _lstSubjectClassUPsAll.Where(c => c.ClassId == subjectClassVM.ClassId && c.SubjectId == Guid.Parse(subjectId)).Select(c => c.JoinCode).FirstOrDefault();
            var AllStudenInClass = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
            var countStudentInClass = AllStudenInClass.Where(c => c.JoinCodeAsign == JoinCodeSubjectClass).ToList().Count();
            var subjecclassUPls = await _iClassSubjectApiClient.GetAllSubjectClass();
            var subjecclss = subjecclassUPls.Where(c => c.JoinCode == JoinCodeSubjectClass).FirstOrDefault();
            if (_lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() + countStudentInClass > subjecclss.StudentAmount)
            {
                _toastService.ShowError("Số lượng sinh viên hiện tại là:" + countStudentInClass + "Thêm " + _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() + "sinh viên " + "đã vượt số lượng hạn mức là:" + subjecclss.StudentAmount);
                return;
            }
            if (_lststudentUpDtosExcel != null)
            {
                if (_lststudentUpDtosALL.Where(c => c.IsChecked == true).ToList().Count() + _lststudentUpDtosExcel.Count() + countStudentInClass > subjecclss.StudentAmount)
                {
                    _toastService.ShowError("Số lượng sinh viên hiện tại là:" + countStudentInClass + "Thêm " + _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() + "sinh viên và bằng excel" + _lststudentUpDtosExcel.Count() + "đã vượt số lượng hạn mức là:" + subjecclss.StudentAmount);
                    return;
                }
            }

            if (_lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() > 0)
            {
                foreach (var x in _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList())
                {
                    _studentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
                    if (_studentClassUPDtos.Any(c => c.JoinCodeAsign == JoinCodeSubjectClass && c.StudentId == x.Id))
                    {
                        countDouble++;
                        continue;
                    }
                    //var AllStudenInClass =await _reportStudentClassUPRepo.GetAllStudentUPAsync();
                    //var countStudentInClass = AllStudenInClass.Where(c => c.ClassId == IDClass).ToList().Count();
                    //var classUP =await _iClassSubjectApiClient.GetClassUPByIdClass(IDClass);
                    //if (countStudentInClass >= classUP.StudentAmount)
                    //{
                    //    continue;
                    //}
                    _studentClassUPCreateVm = new StudentClassUPCreateVm()
                        {
                            ClassId = subjectClassVM.ClassId,
                            JoinCodeAsign = JoinCodeSubjectClass,
                            StatusOfStudent = 1,
                            Status = 0,
                            StudentId = x.Id
                        };
                    _reportStudentClassUPRepo.CreateStudentClassUP(_studentClassUPCreateVm);
                    //foreach (var item in _listIdQuizzes.idquiz)
                    //{
                    //    _studentQuizCreateUPVM = new StudentQuizCreateUPVM()
                    //        {
                    //            CounterTurn = 0,
                    //            QuizId = item,
                    //            StudentId = x.Id,
                    //            ScoreQuizOfStudent = 0,
                    //            Status = 0
                    //        };
                    //    _studentQuizUPRepo.Create(_studentQuizCreateUPVM);
                    //}
                }
            }

                if (_lststudentUpDtosExcel != null)
                {
                    foreach (var x in _lststudentUpDtosExcel)
                    {
                        foreach (var studentUpDtosALL in _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList())
                        {
                            if (x.Email == studentUpDtosALL.Email)
                            {
                                countDouble++;
                                continue;
                            }
                        }
                        _studentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
                    if (_studentClassUPDtos.Any(c => c.ClassId == subjectClassVM.ClassId && c.StudentId == x.Id))
                        {
                            continue;
                        }

                        //_studentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
                        //if (_studentClassUPDtos.Any(c => c.ClassId == IDClass && c.StudentId == x.Id)) continue;
                //        var AllStudenInClass =await _reportStudentClassUPRepo.GetAllStudentUPAsync();
                //var countStudentInClass = AllStudenInClass.Where(c => c.ClassId == IDClass).ToList().Count();
                //var classUP =await _iClassSubjectApiClient.GetClassUPByIdClass(IDClass);
                //if (countStudentInClass >= classUP.StudentAmount)
                //{
                //    continue;
                //}
                        _studentClassUPCreateVm = new StudentClassUPCreateVm()
                        {
                            ClassId = subjectClassVM.ClassId,
                            JoinCodeAsign = JoinCodeSubjectClass,
                            StatusOfStudent = 1,
                            Status = 0,
                            StudentId = x.Id
                        };
                        _reportStudentClassUPRepo.CreateStudentClassUP(_studentClassUPCreateVm);
                        //foreach (var item in _listIdQuizzes.idquiz)
                        //{
                        //    _studentQuizCreateUPVM = new StudentQuizCreateUPVM()
                        //    {
                        //        CounterTurn = 0,
                        //        QuizId = item,
                        //        StudentId = x.Id,
                        //        ScoreQuizOfStudent = 0,
                        //        Status = 0
                        //    };
                        //    _studentQuizUPRepo.Create(_studentQuizCreateUPVM);
                        //}


                    }
                }

              
                //var url = Path.Combine($"/Giaovien/{specializedId}/{lecuId}/{subjectId}");
                //Navigation.NavigateTo(url);
                 int count = _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() - countDouble;
            if (_lststudentUpDtosExcel.Count() > 0)
            {
                count += _lststudentUpDtosExcel.Count();
            }
            _toastService.ShowSuccess($"Thêm thành công {count} vào lớp {subjectClassVM.ClassroomName} và có {countDouble} sinh viên trùng");

                Navigation.NavigateTo($"/Giaovien/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
            }
       }
        private async Task ResToSpec()
    {
        var url = Path.Combine($"/LectuterSpecializedSubjectls/{lecuIdNonDecrypt}/{specializedIdNonDecrypt}");
        Navigation.NavigateTo(url);
    }
        private async void OnFileSelected(InputFileChangeEventArgs e)
        {
            _lststudentUpDtosExcel.Clear();
            selectedFiles = e.File;
            this.StateHasChanged();
        }
        public string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            return new string(Enumerable.Repeat(chars, length)
                .Select(s => s[random.Next(s.Length)]).ToArray());
        }
        //private void CreateAll()
        //{
        //    foreach (var x in _lststudentUpDtosALL.Where(c => c.IsChecked == true).ToList())
        //    {
        //        if (_studentClassUPDtos.Any(c => c.ClassId == IDClass && c.StudentId == x.Id)) continue;
        //        _reportStudentClassUPRepo.CreateStudentClassUP(new StudentClassUPCreateVm()
        //        {
        //            ClassId = IDClass,
        //            JoinCodeAsign =JoinCodeSubjectClass,
        //            StatusOfStudent = 0,
        //            Status = 0,
        //            StudentId = x.Id
        //        });
        //    }

        //}
        //private async void AddStudenClass(ClassRoomDto classRoomDto)
        //{
        //    IDClass = classRoomDto.Id;
        //    CreateAll();

        //}

        void CheckAllExpense(object checkValue)
        {
            if (Convert.ToBoolean(checkValue) == false)
            {
                _lststudentUpDtosALL.ToList().ForEach(e => e.IsChecked = false);
            }
            else
            {
                _lststudentUpDtosALL.ToList().ForEach(e => e.IsChecked = true);
            }
        }
        void CheckManual(Guid st, bool check)
        {
            if (check == true)
            {
                foreach (var x in _lststudentUpDtosALL.Where(c => c.Id == st))
                {
                    x.IsChecked = false;
                }
            }
            if (check == false)
            {
                foreach (var x in _lststudentUpDtosALL.Where(c => c.Id == st))
                {
                    x.IsChecked = true;
                }
            }
        }
        private async Task Quaylai()
        {
            var url = Path.Combine($"/Giaovien/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
            Navigation.NavigateTo(url);
        }


        public async Task SearchStudentUP(StudentUPListSearchVm studentUPListSearch)
        {
            studentUPListSearchVm = studentUPListSearch;
            foreach (var item in _lststudentUpDtosALL)
        {
            var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
            a.IsChecked = item.IsChecked;
        }
            await GetTasks();
        }

    private async void ChangedClassName(ChangeEventArgs args)
    {
        bindtext = Convert.ToString(args.Value);
        if (_lsclassUps.Any(c => c.ClassroomName == Convert.ToString(args.Value)))
        {
            DeleConfirmation.show();
        }

    }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {
        if (deleteconfirmed)
        {
            for (int i = 0; i < _lsclassUps.Count; i++)
            {
                if (_lsclassUps[i].ClassroomName == bindtext)
                {
                    CP = await _iClassSubjectApiClient.GetClassUPByIdClass(_lsclassUps[i].Id);
                }
            }

            subjectClassVM = new SubjectClassVM()
                {
                    ClassroomName = CP.ClassroomName,
                    Building = CP.Building,
                };
            
        }
    }

}

