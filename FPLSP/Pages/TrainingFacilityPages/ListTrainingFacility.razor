@page "/listtf"
@using Blazored.Toast.Services
@using FPLSP.Components;
@using FPLSP.Data.Securities
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Infrastructure.ViewModels
@using FPLSP.Server.Infrastructure.ViewModels.TrainingFacilitiesCPVm
@attribute [Authorize(Roles = "AdminCore,AdminCS")]
<div class="row">
    <h3>CƠ SỞ ĐÀO TẠO</h3>
</div>
<div class="row pt-3">
    <div class="col-md-2 float-end">
        @if (maxlevel != "6")
        {
            <a class="btn btn-outline-primary" @onclick="NavigateToCreateTrainingFacility">Thêm Cơ sở</a>
        }
    </div>
    <div class="col-md-8 text-right">
        <TrainingFacilityListSearch OnSearch="SearchTrainingFacilitiesCP"></TrainingFacilityListSearch>
    </div>
    <div class="col-2 ps-3">
        @if (maxlevel != "6")
        {
            <div class="dropdown-center">
                <button class="btn btn-info ps-4 dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Chức Năng
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" @onclick="() => DeleteAll()">Đổi trạng thái</a></li>
                </ul>
            </div>
        }
    </div>
</div>
@if (_lstTF == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <div class="row">
        @if (_lstTF.Count == 0)
        {
            <span>Danh sách cơ sở đào tạo đang rỗng</span>
        }
        else
        {
            <table class="table table-hover align-middle table-bordered mt-3" style="text-align:center">
                <thead class="table-success">
                    <tr>
                        <th><input type="checkbox" @bind="@Check" @onchange="EventArgs => { CheckAllExpense( EventArgs.Value); } " @bind:event="oninput"></th>
                        <th width="20%">Ảnh</th>
                        <th width="15%">Mã</th>
                        <th width="20%">Tên</th>
                        <th width="20%">Trạng thái</th>
                        <th width="20%">Chức năng</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in _lstTF)
                    {
                        <tr>
                            <td><input type="checkbox" checked=@item.IsChecked @onchange="()=>CheckManual(item.ID,item.IsChecked)"></td>
                            <td><img src="./css/images/TrainingFacilityCP/@item.ImageUrl" onerror="this.src='./css/images/Others/logoFPT.png'" alt="@item.ImageUrl" height=150px width=150px style="object-fit:contain"></td>
                            <td>@item.TrainingFacilitiesCode</td>
                            <td>@item.TrainingInstitutionName</td>
                            <td>@(item.Status == 0 ? "Hoạt động" : "Không hoạt động")</td>

                            <td class="text-center">

                                @if (maxlevel != "6")
                                {
                                    <a class="btn btn-primary m-2 " type="button" title="Sửa" id="show-emp"
                       @onclick="@(() => { NavigateToUpdateTrainingFacility(item); })">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a class="btn btn-danger m-2 " type="button" title="Xóa" @onclick="() => OnDelete(item.ID)">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                }

                                <a class="btn btn-success m-2" type="button" title="Giảng viên" id="show-emp"
                       @onclick="@(() => { NavigateToLecturer(item.ID); })">
                                    <i class="bi bi-people-fill"></i>
                                </a>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="footer text-muted">
        <div class="row mt-3">

            <span>
                <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
            </span>

        </div>
    </div>
}
<Comfirmation ConfirmationMessage="Bạn có chắc muốn đổi trạng thái không?"
              ConfirmationTitle="Đổi trạng thái cơ sở đào tạo"
              @ref="DeleteConfirmation"
              ConfirmationChanged="OnConfirmationDelete"></Comfirmation>


@code {
    [Inject]
    public ITrainingFacilitiesCPRepo tfRepositories { get; set; }
    private List<TrainingFacilitiesCPViewModel> _lstTF;
    private PagingParameters _pagingParameters;
    private int _counter;
    private int stt = 0;
    private List<Guid> _removeSubject = new List<Guid>();

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [CascadingParameter]
    private Error _error { get; set; }
    public MetaData MetaData { get; set; } = new MetaData();
    public ListTrainingFacility()
    {
        _lstTF = new List<TrainingFacilitiesCPViewModel>();
        _pagingParameters = new PagingParameters();
    }
    protected Comfirmation DeleteConfirmation { get; set; }
    private string deleteID { get; set; }
    public TrainingFacilitiesCPListSearch _trainingFacilitiesCPListSearch { get; set; } = new TrainingFacilitiesCPListSearch();
    [Inject]
    public IToastService ToastService { get; set; }
    private bool Check = false;
    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    protected override async Task OnInitializedAsync()
    {
        uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }

        await GetTrainingFacilityList();
    }
    public void OnDelete(Guid id)
    {
        deleteID = id.ToString();
        DeleteConfirmation.show();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await tfRepositories.DeleteTrainingFacility(Guid.Parse(deleteID));
            if (result)
            {
                ToastService.ShowSuccess("Đổi trạng thái cơ sở đào tạo thành công", "Success");
                await GetTrainingFacilityList();
            }
            else
            {
                ToastService.ShowError("Đổi trạng thái cơ sở đào tạo thất bại", "Error");
            }
        }
    }

    public async Task SearchTrainingFacilitiesCP(TrainingFacilitiesCPListSearch trainingFacilitiesCPListSearch)
    {
        _trainingFacilitiesCPListSearch = trainingFacilitiesCPListSearch;
        await GetTrainingFacilityList();
    }

    private async Task GetTrainingFacilityList()
    {
        try
        {
            _counter = 4;
            var pagingResponse = await tfRepositories.GetTrainingFacilityList(_trainingFacilitiesCPListSearch);
            _lstTF = pagingResponse.Items;
            if (maxlevel == "6")
            {
                _lstTF = _lstTF.Where(c => c.ID == Guid.Parse(IdCoSo)).ToList();

            }

            _lstTF = _lstTF.OrderBy(x => x.TrainingFacilitiesCode).ToList();
            MetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {

            _error.ProcessError(ex);
        }
    }

    private async Task SelectedPage(int page)
    {
        _trainingFacilitiesCPListSearch.PageNumber = page;
        Check = false;
        await GetTrainingFacilityList();
    }

    private async void NavigateToCreateTrainingFacility()
    {
        NavigationManager.NavigateTo($"createtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        GetTrainingFacilityList();
    }
    private async void NavigateToLecturer(Guid Id)
    {
        NavigationManager.NavigateTo($"/lecturercp/{Id}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
    }
    private async void NavigateToUpdateTrainingFacility(TrainingFacilitiesCPViewModel tfCPViewModel)
    {
        var id = tfCPViewModel.ID;

        NavigationManager.NavigateTo($"updatetf/{id}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        GetTrainingFacilityList();
    }
    private async void Delete(TrainingFacilitiesCPViewModel tfCPViewModel)
    {
        var id = tfCPViewModel.ID;
        await tfRepositories.DeleteTrainingFacility(id);

        NavigationManager.NavigateTo($"listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}", true);
    }
    private async Task<Guid> GetId(TrainingFacilitiesCPViewModel tfCPViewModel)
    {
        var tfCollection = await tfRepositories.GetTrainingFacilitiesAsync();
        var id = tfCollection.First(c => c.TrainingFacilitiesCode == tfCPViewModel.TrainingFacilitiesCode).Id;
        return id;
    }
    void CheckManual(Guid reportId, bool check)
    {
        stt = 0;
        if (check == true)
        {
            foreach (var x in _lstTF.Where(c => c.ID == reportId))
            {
                x.IsChecked = false;
            }
        }
        if (check == false)
        {
            foreach (var x in _lstTF.Where(c => c.ID == reportId))
            {
                x.IsChecked = true;
            }
        }
    }
    void DeleteAll()
    {
        stt = 0;
        _removeSubject = _lstTF.Where(c => c.IsChecked == true).Select(c => c.ID).ToList();
        DeleteConfirmation.show();
    }
    void CheckAllExpense(object checkValue)
    {
        stt = 0;
        if (Convert.ToBoolean(checkValue) == false)
        {
            _lstTF.ToList().ForEach(e => e.IsChecked = false);
        }
        else
        {
            _lstTF.ToList().ForEach(e => e.IsChecked = true);
        }
    }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {

        stt = 0;
        if (deleteconfirmed && deleteID == null && _removeSubject.Count == 0)
        {
            ToastService.ShowError("Bạn chưa chọn đối tượng để thay đổi");
            await GetTrainingFacilityList();
            NavigationManager.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        }
        else if (deleteconfirmed && deleteID != null)
        {
            var result = await tfRepositories.DeleteTrainingFacility(Guid.Parse(deleteID));
            if (result == true)
            {
                ToastService.ShowSuccess("Đổi trạng thái thành công");
                deleteID = null;
                await GetTrainingFacilityList();
                NavigationManager.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
            }
            else
            {
                ToastService.ShowError("Đổi trạng thái thất bại");
                deleteID = null;
                await GetTrainingFacilityList();
                NavigationManager.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
            }
        }
        else if (deleteconfirmed && _removeSubject != null)
        {

            var result = await tfRepositories.RemoveListTF(_removeSubject);
            if (result)
            {
                ToastService.ShowSuccess("Đổi trạng thái thành công");
                deleteID = null;
                _removeSubject = null;
                await GetTrainingFacilityList();
                NavigationManager.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
            }
            else
            {
                ToastService.ShowError("Đổi trạng thái thất bại");
                deleteID = null;
                _removeSubject = null;
                await GetTrainingFacilityList();
                NavigationManager.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
            }
        }
        else
        {
            deleteID = null;
            _removeSubject = null;
        }
        Check = false;
    }
}