@page "/createSpecializedCP/"
@using Blazored.Toast.Services
@using FPLSP.Data.Securities;
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Infrastructure.ViewModels.Specialized
@attribute [Authorize(Roles = "AdminCore,AdminCS")]
<h3>TẠO MỚI CHUYÊN NGÀNH</h3>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/SpecializedCP/@_cryptoServices.Encrypt((maxlevel).ToString()).Replace(" / ", " I0H" ) /@_cryptoServices.Encrypt((IdCoSo).ToString()).Replace(" / ", " I0H" )">Chuyên ngành</a></li>
        <li class="breadcrumb-item"><a href="/manageSpecializedCP?@_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H" )LDN01@_cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H" )">Quản lý chuyên ngành</a></li>
        <li class="breadcrumb-item active" aria-current="page">Tạo mới chuyên ngành</li>
    </ol>
</nav>
<EditForm Model="@request" OnValidSubmit="@Create" class="card card-body bg-light mt-5" id="create-form">
    <DataAnnotationsValidator />
    <div class="form-group">
        <div class="row">
            <div class="col-2 pt-4">
                <div class="row">
                    <img src="@request.Image" width=195px height=232px style="object-fit:contain">
                </div>
                <div class="row">
                    <div class="form-group">
                        <label for="image" class="col-12 col-form-label">Hình Ảnh:</label>
                        @if (@image != null)
                        {
                            <div class="col-12">
                                <ImageUpload OnChange="AssignImageUrl" />
                                <div class="text-danger"><ValidationMessage For="@(() => request.Image)" /></div>
                            </div>
                        }
                        else
                        {
                            <div class="col-12">
                                <ImageUpload OnChange="AssignImageUrl" />
                                <div class="text-danger"><ValidationMessage For="@(() => request.Image)" /></div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-10 pt-1">
                <div class="row">
                    <div class="form-group pt-2 col-md-6">
                        <label for="name" class="col-md-4 col-form-label">Mã Chuyên ngành:</label>
                        <div class="col-md-12">
                            <InputText id="name" class="form-control" @bind-Value="@request.SpecializedCode" />
                            <div class="text-danger"><ValidationMessage For="@(() => request.SpecializedCode)" /></div>
                        </div>
                    </div>
                    <div class="form-group pt-2 col-md-6">
                        <label for="name" class="col-md-4 col-form-label">Tên Chuyên ngành:</label>
                        <div class="col-md-12">
                            <InputText id="name" class="form-control" @bind-Value="@request.SpecializationName" />
                            <div class="text-danger"><ValidationMessage For="@(() => request.SpecializationName)" /></div>
                        </div>
                    </div>

                </div>


                <div class="row">
                    <div class="form-group pt-2 col-md-6">
                        <label for="name" class="col-md-4 col-form-label">Chuyên ngành lớn:</label>
                        <div class="col-md-12">
                            <InputSelect @bind-Value="_parentId" class="form-select">
                                <option value="@Guid.Empty">Chọn chuyên ngành lớn</option>
                                @if (_lstLevel0 != null)
                                {
                                    @foreach (var item in _lstLevel0)
                                    {
                                        <option value="@item.Id">@item.SpecializationName</option>
                                    }
                                }
                            </InputSelect>

                        </div>
                    </div><div class="form-group pt-2 col-md-6">
                        <label for="name" class="col-md-4 col-form-label">Trạng thái:</label>
                        <div class="col-md-12">
                            <InputSelect @bind-Value="request.Status" class="form-select">
                                <option value="0">Hoạt động</option>
                                <option value="1">Không Hoạt động</option>
                            </InputSelect>
                            <div class="text-danger"><ValidationMessage For="@(() => request.Status)" /></div>
                        </div>
                    </div>
                </div>


            </div>
        </div>

    </div>

    <div class="row pt-4">
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-primary" form="create-form">Thêm Mới</button>
            <a class="btn btn-outline-success ms-2" @onclick="() => clearForm()">Làm mới</a>
            <a class="btn btn-outline-danger ms-2" href="/manageSpecializedCP?@_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H" )LDN01@_cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H" )">Quay lại</a>
        </div>
    </div>
</EditForm>
<FPLSP.Components.Comfirmation ConfirmationMessage="Bạn có chắc muốn tạo thêm môn cho chuyên ngành này không ?"
                               ConfirmationTitle="Tạo môn học"
                               ConfirmationChanged="OnConfirmation" @ref="Confirmation"></FPLSP.Components.Comfirmation>

@code {

    [Parameter]
    public string image { get; set; }

    [Inject]
    public ISpecializedCPRepo _specializedCPRepo { get; set; }
    public SpecializedVM request = new SpecializedVM();
    public List<SpecializedDto> _lstLevel0 = new List<SpecializedDto>();
    public Guid _parentId = new Guid();
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    [Parameter]
    public string _error { get; set; }
    [Inject]
    public IToastService ToastService { get; set; }
    public int _level { get; set; } = 0;
    protected Comfirmation Confirmation { get; set; }
    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";

    protected override async Task OnInitializedAsync()
    {
        uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }

        _lstLevel0 = await _specializedCPRepo.GetAll();
        _lstLevel0 = _lstLevel0.Where(x => x.Level == 0).ToList();

    }
    public bool checkName(string x)
    {
        foreach (char c in x)
        {
            if (!Char.IsLetter(c) && c.ToString() != " ")
                return false;
        }
        return true;
    }
    public bool checkCode(string x)
    {
        foreach (char c in x)
        {
            if (!Char.IsLetter(c) && !Char.IsDigit(c) && c.ToString() != "#")
                return false;
        }
        return true;
    }
    public bool checkNumber(string x)
    {
        foreach (char c in x)
        {
            if (!Char.IsDigit(c))
                return false;
        }
        return true;
    }
    private async Task Create()
    {
        var lstSpecializedCP = await _specializedCPRepo.GetAll();
        request.Id = Guid.NewGuid();
        if (!checkName(request.SpecializationName))
        {
            ToastService.ShowError("Tên không được chứa số và ký tự đặc biệt", "Error");
        }
        else if (_parentId == Guid.Empty)
        {
            if (string.IsNullOrEmpty(request.SpecializedCode))
            {
                ToastService.ShowError("Mã không được để trống", "Error");
            }
            else if (!checkCode(request.SpecializedCode))
            {
                ToastService.ShowError("Mã không được chứa khoảng trắng và ký tự đặc biệt", "Error");
            }
            else
            {
                var temp = lstSpecializedCP.FirstOrDefault(x => (x.SpecializationName == request.SpecializationName || x.SpecializedCode == request.SpecializedCode) && x.Level == 0);

                if (temp != null)
                {
                    ToastService.ShowError("Chuyên ngành đã tồn tại", "Error");
                    Navigation.NavigateTo("/createSpecializedCP");
                }
                else
                {
                    var result = await _specializedCPRepo.Create(Guid.Empty, request);

                    if (result != 1)
                    {
                        ToastService.ShowError("Tạo chuyên ngành lớn thất bại", "Error");
                        Navigation.NavigateTo("/createSpecializedCP");
                    }
                    else
                    {
                        ToastService.ShowSuccess("Tạo chuyên ngành lớn thành công", "Success");
                        Confirmation.show();
                    }
                }
            }

        }
        else if (_parentId != Guid.Empty)
        {
            var test = lstSpecializedCP.FirstOrDefault(x => x.SpecializedCode == request.SpecializedCode && x.Id == _parentId);
            if (test == null)
            {
                var temp = lstSpecializedCP.FirstOrDefault(x => (x.SpecializationName == request.SpecializationName || x.SpecializedCode == request.SpecializedCode) && x.Level == 1 && x.IdSpeciality == _parentId);

                if (temp != null)
                {
                    ToastService.ShowError("Chuyên ngành đã tồn tại", "Error");
                    Navigation.NavigateTo("/createSpecializedCP");
                }
                else
                {
                    var result = await _specializedCPRepo.Create(_parentId, request);

                    if (result != 1)
                    {
                        ToastService.ShowError("Tạo chuyên ngành hẹp thất bại", "Error");
                        Navigation.NavigateTo("/createSpecializedCP");
                    }
                    else
                    {
                        ToastService.ShowSuccess("Tạo chuyên ngành hẹp thành công", "Success");
                        Confirmation.show();
                    }
                }
            }
            else
            {
                ToastService.ShowError("Mã chuyên ngành hẹp không được trùng với chuyên ngành lớn", "Error");
            }


        }
        else
        {
            ToastService.ShowError("Tạo chuyên ngành hẹp thất bại", "Error");
        }

    }
    public async Task OnConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            var idspecNonDecrypt = _cryptoServices.Encrypt((request.Id.ToString()).ToString()).Replace("/", "I0H");
            var url = Path.Combine($"/subjects/{idspecNonDecrypt}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
            Navigation.NavigateTo(url);
        }
        else
        {
            Navigation.NavigateTo("/createSpecializedCP");
        }
    }
    public void clearForm()
    {
        request.SpecializedCode = null;
        request.SpecializationName = null;
        request.Status = 0;
        request.Image = null;
        _level = 0;
        _parentId = Guid.Empty;

    }
    private void AssignImageUrl(string imgUrl)
    {
        request.Image = imgUrl;
    }
}