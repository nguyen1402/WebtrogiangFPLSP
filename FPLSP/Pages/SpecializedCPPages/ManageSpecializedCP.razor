@page "/manageSpecializedCP"
@using Blazored.Toast.Services
@using FPLSP.Data.Securities;
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Infrastructure.ViewModels.Specialized
@attribute [Authorize(Roles = "AdminCore,AdminCS")]
<div class="row">
    <h3>QUẢN LÝ CHUYÊN NGÀNH</h3>
</div>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/SpecializedCP/@_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H" )/@_cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H" )">Chuyên ngành</a></li>
        <li class="breadcrumb-item active" aria-current="page">Quản lý chuyên ngành</li>
    </ol>
</nav>
<div class="row pt-3">
    <div class="col-md-5 float-end">
        <a class="btn btn-outline-danger me-3" @onclick="RedirectToSpecList">Quay Lại</a>
        <a class="btn btn-outline-primary" @onclick="RedirectToCreate">Thêm Chuyên Ngành</a>
    </div>
    <div class="col-md-5 text-right">
        <SpecializedCPListSearch OnSearch="SearchSpecializedCP"></SpecializedCPListSearch>
    </div>
    @*<div class="col-2 ps-3">
    <div class="dropdown-center">
    <button class="btn btn-info ps-4 dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
    Chức Năng
    </button>
    <ul class="dropdown-menu">
    <li><a class="dropdown-item" @onclick="() => DeleteAll()">Xóa</a></li>
    </ul>
    </div>
    </div>*@
</div>

@if (_lstSpecializedCP == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <div class="row">
        @if (_lstSpecializedCP.Count == 0)
        {
            <span>Danh sách chuyên ngành rỗng</span>
        }
        else
        {
            <table class="table table-hover align-middle table-bordered mt-3" style="text-align:center">
                <thead class="table-success">
                    <tr>
                        @*<th><input type="checkbox" @bind="@Check" @onchange="EventArgs => { CheckAllExpense( EventArgs.Value); } " @bind:event="oninput"></th>*@
                        <th>Ảnh</th>
                        <th>Mã</th>
                        <th>Tên</th>
                        <th>Chuyên ngành lớn</th>
                        <th>Trạng thái</th>
                        <th>Chức năng</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in _lstSpecializedCP)
                    {
                        <tr>
                            @*<td><input type="checkbox" checked=@item.IsChecked @onchange="()=>CheckManual(item.ID,item.IsChecked)"></td>*@
                            <td><img src="@item.Image" onerror="this.src='./css/images/Others/logoFPT.png'" alt="@item.Image" height=150px width=150px style="object-fit:contain"></td>
                            <td>@item.SpecializedCode</td>
                            <td>@item.SpecializationName</td>
                            <td>
                                @if (item.IdSpeciality != null)
                                {
                                    @_lstSpecializedCPAll.FirstOrDefault(x => x.Id == item.IdSpeciality).SpecializationName
                                }
                                else
                                {
                                }
                            </td>

                            <td>@(item.Status == 0 ? "Hoạt động" : "Không hoạt động")</td>

                            <td class="text-center">
                                <a class="btn btn-primary " type="button" title="Sửa" id="show-emp"
                       @onclick="@(() => { NavigateToUpdate(_cryptoServices.Encrypt((item.Id.ToString()))); })">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a class="btn btn-danger " type="button" title="Xóa" @onclick="() => OnDelete(item.Id)">
                                    <i class="fas fa-trash-alt"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="footer text-muted">
        <div class="row mt-3">

            <span>
                <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
            </span>

        </div>
    </div>
}
<Comfirmation ConfirmationMessage="Bạn có chắc muốn xóa chuyên ngành không?"
              ConfirmationTitle="Xóa"
              @ref="DeleteConfirmation"
              ConfirmationChanged="OnConfirmationDelete"></Comfirmation>


@code {
    [Inject]
    public ISpecializedCPRepo _specializedCPRepo { get; set; }
    private List<SpecializedDto> _lstSpecializedCP = new List<SpecializedDto>();
    private List<SpecializedDto> _lstSpecializedCPAll = new List<SpecializedDto>();
    private List<SpecializedDto> _lstSpecializedLevel0 = new List<SpecializedDto>();
    private List<Guid> _removeSpecializedCP = new List<Guid>();
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    [CascadingParameter]
    private Error _error { get; set; }
    public MetaData MetaData { get; set; } = new MetaData();
    public SpecializedListSearch _specializedListSearch { get; set; } = new SpecializedListSearch();
    protected Comfirmation DeleteConfirmation { get; set; }
    private string deleteID { get; set; }
    [Inject]
    public IToastService ToastService { get; set; }
    private bool Check = false;
    private string idTran = string.Empty;
 
    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";
    protected override async Task OnInitializedAsync()
    {
        uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }
      
        _lstSpecializedCP = await _specializedCPRepo.GetAll();
        _lstSpecializedCPAll = await _specializedCPRepo.GetAll();
        _lstSpecializedLevel0 = await _specializedCPRepo.GetAll();
        _lstSpecializedLevel0 = _lstSpecializedLevel0.Where(x => x.Level == 0).ToList();
        //uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        //idTran = uri.Query.Split('?')[0];
        await GetSpecializedCPList();
    }

    private async Task SelectedPage(int page)
    {
        _specializedListSearch.PageNumber = page;
        Check = false;
        await GetSpecializedCPList();
    }

    public async Task SearchSpecializedCP(SpecializedListSearch search)
    {
        _specializedListSearch = search;
        await GetSpecializedCPList();
    }

    private async Task GetSpecializedCPList()
    {
        try
        {
            var pagingResponse = await _specializedCPRepo.GetsAll(_specializedListSearch);
            _lstSpecializedCP = pagingResponse.Items;
            _lstSpecializedCP = _lstSpecializedCP.OrderBy(x => x.SpecializedCode).ToList();
            MetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {

            _error.ProcessError(ex);
        }
    }
    public void OnDelete(Guid id)
    {
        deleteID = id.ToString();
        DeleteConfirmation.show();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await _specializedCPRepo.Delete(Guid.Empty, Guid.Parse(deleteID));
            if (result == 1)
            {
                ToastService.ShowSuccess("Xóa chuyên ngành thành công", "Success");
                await GetSpecializedCPList();
            }
            else
            {
                ToastService.ShowError("Xóa chuyên ngành thất bại", "Error");
            }
        }
    }
    void CheckManual(Guid reportId, bool check)
    {
        if (check == true)
        {
            foreach (var x in _lstSpecializedCP.Where(c => c.Id == reportId))
            {
                x.IsChecked = false;
            }
        }
        if (check == false)
        {
            foreach (var x in _lstSpecializedCP.Where(c => c.Id == reportId))
            {
                x.IsChecked = true;
            }
        }
    }
    void DeleteAll()
    {
        _removeSpecializedCP = _lstSpecializedCP.Where(c => c.IsChecked == true).Select(c => c.Id).ToList();
        DeleteConfirmation.show();
    }
    void CheckAllExpense(object checkValue)
    {
        if (Convert.ToBoolean(checkValue) == false)
        {
            _lstSpecializedCP.ToList().ForEach(e => e.IsChecked = false);
        }
        else
        {
            _lstSpecializedCP.ToList().ForEach(e => e.IsChecked = true);
        }
    }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {
        if (deleteconfirmed && deleteID == null && _removeSpecializedCP.Count == 0)
        {
            ToastService.ShowError("Bạn chưa chọn đối tượng để xóa");
            await GetSpecializedCPList();
            NavigationManager.NavigateTo($"/manageSpecializedCP");
        }
        else if (deleteconfirmed && deleteID != null)
        {
            var result = await _specializedCPRepo.Delete(Guid.Empty, Guid.Parse(deleteID));
            if (result == 1)
            {
                ToastService.ShowSuccess("Xóa thành công");
                deleteID = null;
                await GetSpecializedCPList();
                NavigationManager.NavigateTo($"/manageSpecializedCP");
            }
            else
            {
                ToastService.ShowError("Xóa thất bại");
                deleteID = null;
                await GetSpecializedCPList();
                NavigationManager.NavigateTo($"/manageSpecializedCP");
            }
        }
        else if (deleteconfirmed && _removeSpecializedCP != null)
        {
            //var result = await _specializedCPRepo.RemoveSpecializedCP(_removeSpecializedCP);
            //if (result)
            //{
            //    ToastService.ShowSuccess("Xóa thành công");
            //    deleteID = null;
            //    _removeSpecializedCP = null;
            //    await GetSpecializedCPList();
            //    NavigationManager.NavigateTo($"/SpecializedCP");
            //}
            //else
            //{
            //    ToastService.ShowError("Xóa thất bại");
            //    deleteID = null;
            //    _removeSpecializedCP = null;
            //    await GetSpecializedCPList();
            //    NavigationManager.NavigateTo($"/SpecializedCP");
            //}
        }
        else
        {
            deleteID = null;
            _removeSpecializedCP = null;
        }
        Check = false;
    }

    private void RedirectToCreate()
    {
        NavigationManager.NavigateTo("/createSpecializedCP");
    }

    private void NavigateToUpdate(string id)
    {

        var idNonDecrypt = id.Replace("/", "I0H");
        NavigationManager.NavigateTo($"/updateSpecializedCP/{idNonDecrypt}");
    }

    private void NavigateToSubjectCP(string id)
    {
        NavigationManager.NavigateTo($"/subjects/{id}");
    }

    private void RedirectToSpecList()
    {
        NavigationManager.NavigateTo($"/SpecializedCP/{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
    }
}
