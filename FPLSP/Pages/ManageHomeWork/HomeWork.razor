@page "/homework/{userEmailNonDec}"
@layout MainLayout
@using Blazored.LocalStorage
@using FPLSP.Components;
@using FPLSP.Data.Securities;
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.Toast.Services;
@using FPLSP.Repositories.Interfaces;
@using FPLSP.Server.Data.SeedWork;
@using FPLSP.Server.Domain.Dtos;
@using FPLSP.Server.Domain.Entities.CoresParts;
@using FPLSP.Server.Domain.Entities.UserParts;
@using FPLSP.Server.Domain.Entities.UsesParts;
@using FPLSP.Server.Infrastructure.ViewModels;
@using FPLSP.Server.Infrastructure.ViewModels.LessonUP;
@using FPLSP.Server.Infrastructure.ViewModels.NewFeed;
@using FPLSP.Server.Infrastructure.ViewModels.SubmitHomeWorkVM;
@using FPLSP.Shared;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Identity;
@using MudBlazor;
@using System.Text.RegularExpressions
@inject IJSRuntime jsRuntime;
@inject ILocalStorageService _localStorageService;
@if (_lstClass == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <div class="">
        @if (encounter != 14)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        <div class="mt-3">
            <div class="card text-center">
                <div class="card-header fs-6  panel-transparent">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="exampleInputEmail1" class="form-label">Tiêu Đề Thông Báo</label>
                                        <input value="@GetTitle" @onchange="@((ChangeEventArgs args)=>GetMessOfTitle(args))" type="text" class="form-control" id="exampleInputEmail1" aria-describedby="Please Type Your Titile">
                                    </div>
                                    <div class="mb-3">
                                        <label for="exampleFormControlTextarea1" class="form-label">Link Tham Khảo</label>
                                        <textarea value="@GetMess" class="form-control" @onchange="@((ChangeEventArgs args)=>GetMessOfText(args))" id="exampleFormControlTextarea1" rows="3"></textarea>
                                    </div>
                                    <div>
                                        @* <select class="form-select" aria-label="Default select example" @onchange="@((ChangeEventArgs args)=>SelectType(args))">
                                    <option value="@Guid.NewGuid">Loại Thông Báo</option>
                                    @foreach (var noti in _lstnewfeed)
                                    {
                                    <option value="@noti.Id">@noti.Title</option>
                                    }
                                    </select>*@
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <button class="btn btn-danger" @onclick="@MakeADeadLine">Gửi <i class="fa-regular fa-paper-plane"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-9">
                            <h4 class="text-center">Bảng Thêm Bài Tập Cho Các Lớp</h4>
                            <table class="table">
                                <thead class="table-warning">
                                    <tr>
                                        <th scope="col">
                                            <input type="checkbox" class="form-check-input" checked
                                               @onchange="EventArgs => { CheckAllExpense( EventArgs.Value); }" value="" id="flexCheckDefault">
                                            <label class="form-check-label" for="flexCheckDefault">
                                                Select All
                                            </label>
                                        </th>
                                        <th>Tên Lớp-Môn</th>
                                        <th>Bài Học</th>
                                        <th>Vô Hạn</th>
                                        <th>Thời Gian Bắt Đầu</th>
                                        <th>Thời Gian Kết Thúc</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var x in _lstClassHomeWork.Where(c => c.IsChecked == true))
                                    {
                                        <tr>
                                            <td>
                                                <div class="form-check" style="margin-top: 16px;">
                                                  
                                                
                                                    <input type="checkbox" id="@x.JoinCode" class="form-check-input mx-3" @bind="x.IsChecked"
                                                   @onclick="() => CheckManual(x.IdClass,x.IdSubject,x.IsChecked)" />
                                                  
                                                </div>
                                           
                                            </td>
                                            <td><small style="margin-top: 16px; font-size: 16px;">@x.ClassNanme - @x.SubjectName</small></td>
                                            <td>
                                                <select class="form-select" aria-label="Default select example" @onchange="@((ChangeEventArgs args)=>SelectLesson(args,x.IdClass,x.IdSubject))">
                                                    <option value="@Guid.Empty">Chọn Bài Học</option>
                                                    @foreach (var less in _lstlessUP.Where(c => c.SubjectId == x.IdSubject))
                                                    {
                                                        <option value="@less.Id">@less.LessonName</option>
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <div class="form-check" style="margin-top: 16px;">
                                                    <input type="checkbox" class="form-check-input mx-3"
                                                 @onclick="() => VoHan(x.IdClass,x.IdSubject,run)" />
                                                </div>
                                              
                                            </td>
                                           
                                            <td>
                                           @if (x.StartedDate == Convert.ToDateTime("1/1/0001 12:00:00 AM") && x.EndTime == Convert.ToDateTime("1/1/0001 12:00:00 AM")){

                                            }
                                            else
                                            {
                                                <input  class="form-control" value="2022-10-13" type="date" @onchange="@((ChangeEventArgs args)=>SelectStartOfDeadline(args,x.IdClass,x.IdSubject))" />
                                                
                                            }
                                            </td>
                                            <td>
                                                @if (x.StartedDate != Convert.ToDateTime("1/1/0001 12:00:00 AM"))
                                                {
                                                    <input class="form-control" value="2022-10-16" type="date" @onchange="@((ChangeEventArgs args)=>SelectEndOfDeadline(args,x.IdClass,x.IdSubject))" />
                                                }
                                               else{

                                               }
                                                </td>
                                            
                                         
                                        </tr>
                                      
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="card-body  panel-transparent">
                    <div class="row">
                        @foreach (var item in _lstClass)
                        {
                            <div class="col-lg-3 mb-5 single-product-item">
                                <div class="card border-2 border-info">
                                    <div class="row m-0">
                                        <div class="card-body">
                                            <div class="row m-0">
                                                <div class="row m-0">
                                                    <div class="col-lg-9">
                                                    </div>
                                                    <div class="col-lg-3">
                                                        <MudIconButton OnClick="()=>AddToBookMark(item.Id,item.SubjectId,item.ClassroomName,item.SubjectName,item.JoinCode)" Icon="@Icons.Filled.BookmarkAdd" Size="Size.Large" Color="Color.Warning" aria-label="add to favorite"></MudIconButton>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="">
                                                <img src="./css/images/Others/logoFPT.png" onerror="this.src='./css/images/Others/logoFPT.png'" class="card-img" style="width: 150px; height: 60px; object-fit: cover;">
                                            </div>
                                            <div class="row mt-3">
                                                <span class=" card-title fs-6 text-wrap ">Lớp :  @item.ClassroomName</span>
                                                <hr>
                                                <div class="row">
                                                    <div class="col-lg-3"></div>
                                                    <div class="col-lg-6">
                                                       @* <p class="card-text badge rounded-pill bg-info text-black mb-3">Class Code : @item.ClassroomCode</p>*@
                                                    </div>
                                                    <div class="col-lg-3"></div>
                                                </div>
                                                <p class="card-text">Môn học : @item.SubjectName</p>
                                                <p class="card-text">Giảng viên : @item.HomeroomLecturer</p>
                                                <p class="card-text ">Join Code : @item.JoinCode</p>
                                                <p class="card-text">Sĩ số <span class="badge rounded-pill bg-info">@item.ActualNumberOfStudent /@item.StudentAmount</span></p>
                                                <hr>
                                            </div>
                                        </div>
                                    </div>
                                                                    <a @onclick="() => RedirectToChitiet(_cryptoServices.Encrypt((item.Id).ToString()),_cryptoServices.Encrypt((item.SpecializedId).ToString()),_cryptoServices.Encrypt((item.HomeroomLecturerId).ToString()),_cryptoServices.Encrypt((item.SubjectId).ToString()))" class="btn btn-warning">Đến lớp</a>

                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-footer text-muted">
                    <div class="row mt-3">
                        @*  <span>
                    <Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagingation>
                    </span>*@
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {
    int run = 0;
    string color = "";
    private MudDateRangePicker _picker;
    private bool CheckVoHan = false;
    private bool _autoClose;
    private DateTime GetStart;
    private DateTime GetEnd;
    [Parameter]
    public string userEmailNonDec { get; set; }

    public string userEmail = "";
    private List<BookMarkClass> _bookMarkClasses = new List<BookMarkClass>();
    public StudentUP student = new StudentUP();
    public LecturersCP lecturer = new LecturersCP();
    [Inject]
    public ITaskRepositories<ClassUPViewModel> _taskRepositories { get; set; }
    private List<ClassUPViewModel> _lstClass;

    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    [Inject]
    public NavigationManager navigationManager { get; set; }
    private bool IsHiden = false;
    private ClassSearchDTO _searchDTO = new ClassSearchDTO();
    private int _counter;
    private int _count;
    [CascadingParameter]
    private Error _error { get; set; }
    public MetaData MetaData { get; set; } = new MetaData();

    [Inject]
    public IStudentUPRepo _studentUPRepo { get; set; }
    [Inject]
    public ILecturersCPRepo _lecturersCPRepo { get; set; }

    //
    private List<SubjectUP> _lstSub = new List<SubjectUP>();
    private List<SpecializedDto> _lstSpec = new List<SpecializedDto>();
    private List<LecturersCPViewModel> _lstLec = new List<LecturersCPViewModel>();
    //
    [Inject] IToastService _toast { get; set; }
    [Inject]
    public IBookMarkClassRepo _bookMarker { get; set; }
    //
    [Inject]
    public ILessonUPRepo _IlessonUPRepo { get; set; }
    [Inject] public ISubmitHomeworkForStudentRepo _ISubmiter { get; set; }
    private List<LessonUPViewModel> _lstlessUP = new List<LessonUPViewModel>();
    private List<SetMultipleClass> _lstClassHomeWork = new List<SetMultipleClass>();
    //
    private string pattern = @"^(http|https|ftp|)\://|[a-zA-Z0-9\-\.]+\.[a-zA-Z](:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*[^\.\,\)\(\s]$";
    private string GetMess;
    private string GetTitle;
    private Guid GetIdType;
    [Inject] public ISenderNotification _ISender { get; set; }
    [Inject] public ITypeOfNewFeedRepo _IType { get; set; }
    [Inject]
    public UserManager<UserSignIn> _userManager { get; set; }
    private List<TypeOfNewFeed> _lstnewfeed = new List<TypeOfNewFeed>();
    private List<StudentUP> _lstStudent = new List<StudentUP>();
    [Inject] public IToastService ToastService { get; set; }
    //
    [Inject] public IHttpContextAccessor _httpContextAccessor { get; set; }
    private int encounter;

    protected override async Task OnInitializedAsync()
    {
        userEmail = _cryptoServices.Decrypt(userEmailNonDec.Replace("I0H", "/"));

        _lstlessUP = await _IlessonUPRepo.GetAll();
        //_count = await _taskRepositories.CountAsync();
        _lstSub = await _taskRepositories.GetAllSub();
        _lstLec = await _taskRepositories.GetAllLec();
        _lstSpec = await _taskRepositories.GetAllSpec();
        _lstnewfeed = await _IType.GetNewFeedsAsync();
        _lstStudent = await _studentUPRepo.GetAllStudentUPAsync();


        await GetClassList();
        await GetLecturerByEmail();
    }
    //private async Task SelectType(ChangeEventArgs args)
    //{
    //    GetIdType = Guid.Parse(args.Value.ToString());
    ////}
    private async Task GetLecturerByEmail()
    {
        for (var i = 0; i < 15; i++)
        {
            encounter = i;
        }
        var listLecturer = await _lecturersCPRepo.GetAllLecturerAsync();
        lecturer = listLecturer.FirstOrDefault(x => x.Email == userEmail.Replace("-", "."));


    }
    private async Task GetClassList()
    {

        // Check id user thuoc class => hien thi
        if (userEmail != null)
        {
            _lstClass = await _taskRepositories.GetListClassDetailForLec(userEmail.Replace("-", "."));

            _count = _lstClass.Count;
        }
        else
        {
            _toast.ShowWarning("Bạn chưa có lớp học nào của riêng mình cả");
        }
    }
    private async Task GetMessOfText(ChangeEventArgs args)
    {
        GetMess = Convert.ToString(args.Value);
    }
    private async Task GetMessOfTitle(ChangeEventArgs args)
    {
        GetTitle = Convert.ToString(args.Value);
    }
    void CheckAllExpense(object checkValue)
    {
        //if (Convert.ToBoolean(checkValue) == false)
        //{
        //    _lstStudents.ToList().ForEach(e => e.IsChecked = false);
        //}
        //else
        //{
        //    _lstStudents.ToList().ForEach(e => e.IsChecked = true);
        //}
    }
    public async Task SelectStartOfDeadline(ChangeEventArgs args, Guid idclass, Guid idsub)
    {
        foreach (var x in _lstClassHomeWork.Where(c => c.IdClass == idclass && c.IdSubject == idsub))
        {
            x.StartedDate = Convert.ToDateTime(args.Value);
            GetStart = Convert.ToDateTime(args.Value);
        }
    }
    public async Task SelectEndOfDeadline(ChangeEventArgs args, Guid idclass, Guid idsub)
    {
        foreach (var x in _lstClassHomeWork.Where(c => c.IdClass == idclass && c.IdSubject == idsub))
        {
            x.EndTime = Convert.ToDateTime(args.Value);
            GetEnd = Convert.ToDateTime(args.Value);
        }
    }
    //public async Task SelectDateRange(ChangeEventArgs args, Guid idclass, Guid idsub)
    //{
    //    DateRange dateRange = (DateRange)args.Value;

    //    foreach (var x in _lstClassHomeWork.Where(c => c.IdClass == idclass && c.IdSubject == idsub))
    //    {
    //        x.StartedDate =Convert.ToDateTime( dateRange.Start);
    //        x.EndTime =Convert.ToDateTime( dateRange.End);
    //    }
    //}
    public async Task SelectLesson(ChangeEventArgs args, Guid idclass, Guid idsub)
    {
        if (args.Value != Guid.Empty.ToString())
        {
            foreach (var x in _lstClassHomeWork.Where(c => c.IdClass == idclass && c.IdSubject == idsub))
            {
                x.IdLesson = Guid.Parse(args.Value.ToString());
            }
        }
    }
    void CheckManual(Guid cl, Guid sb, bool check)
    {
        if (check == true)
        {
            foreach (SetMultipleClass x in _lstClassHomeWork.ToList().Where(c => c.IdClass == cl && c.IdSubject == sb))
            {
                _lstClassHomeWork.Remove(_lstClassHomeWork.Find(c => c.IdClass == cl && c.IdSubject == sb));
            }
        }
        if (check == false)
        {
            foreach (SetMultipleClass x in _lstClassHomeWork.ToList().Where(c => c.IdClass == cl && c.IdSubject == sb))
            {
                x.IsChecked = true;
            }
        }
    }
    async void VoHan(Guid cl, Guid sb,int run)
    {
        if (_lstClassHomeWork.ToList().Where(c => c.IdClass == cl && c.IdSubject == sb).Any(c => c.StartedDate== Convert.ToDateTime("1/1/0001 12:00:00 AM")&& c.EndTime == Convert.ToDateTime("1/1/0001 12:00:00 AM") )==false){


            foreach (SetMultipleClass x in _lstClassHomeWork.ToList().Where(c => c.IdClass == cl && c.IdSubject == sb))
            {
                x.StartedDate = Convert.ToDateTime("1/1/0001 12:00:00 AM");
                x.EndTime = Convert.ToDateTime("1/1/0001 12:00:00 AM");

            }
            CheckVoHan = true;
        }
        else
        {


            foreach (SetMultipleClass x in _lstClassHomeWork.ToList().Where(c => c.IdClass == cl && c.IdSubject == sb))
            {
                if (GetEnd == Convert.ToDateTime("1/1/0001 12:00:00 AM") && GetStart == Convert.ToDateTime("1/1/0001 12:00:00 AM")){
                    x.StartedDate = Convert.ToDateTime("10/13/2022 12:00:00 AM");
                    x.EndTime = Convert.ToDateTime("10/16/2022 12:00:00 AM");
                }
                else{
                    x.StartedDate = GetStart;
                    x.EndTime = GetEnd;
                }



            }
            CheckVoHan = false;
        }





    }
    private async Task GetFavoriteClass()
    {
        _bookMarkClasses = await _bookMarker.GetListBookMarkForUser(student.Id);
    }
    private async Task MakeADeadLine()
    {
        if (_lstClassHomeWork.Count != 0 && _lstClassHomeWork!=null){
            foreach (var x in _lstClassHomeWork)
            {
                if (x.IdLesson == Guid.Empty)
                {
                    _toast.ShowError($"Bạn Chưa Chọn Bài Học Cho Lớp {x.ClassNanme}-{x.SubjectName}  !");
                    return;
                }

                var result = DateTime.Compare(x.StartedDate, x.EndTime);
                if (x.StartedDate != Convert.ToDateTime("1/1/0001 12:00:00 AM")){
                    if (result > 0)
                    {   
                        _toast.ShowError($"Bạn Không Thể Để Thời Gian Bắt Đầu Lớn Hơn Thời Gian Kết Thúc {x.ClassNanme}-{x.SubjectName}  !");
                        return;
                    }
                }



            }
            if (String.IsNullOrEmpty(GetTitle))
            {
                _toast.ShowError($"Bạn Chưa Điền Tiêu Đề Thông Báo !");
                return;
            }
            if (String.IsNullOrEmpty(GetMess))
            {
                _toast.ShowError($"Link Tham Khảo Không Được Để Trống !");
                return;
            }
            Regex reg = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);

            if (!reg.IsMatch(GetMess))
            {
                _toast.ShowError($"Link Không Phù Hợp");
                return;
            }

            var GetIdUser = _userManager.Users.Where(c => c.Email == userEmail.Replace("-", ".")).Select(c => c.Id).FirstOrDefault();
            var res = await _ISubmiter.AddMultipleDeadLine(new ListHomeWorkForStudent()
            {
                Id = Guid.NewGuid(),
                setMultipleClasses = _lstClassHomeWork.Where(c => c.IsChecked == true).ToList(),
                SubmitTime = DateTime.Now,
                SubmitLink = "",
                Titile = GetTitle,
                Status = 0,
                IdStudent = Guid.NewGuid(),

            });

            if (res)
            {
                foreach (var x in _lstClassHomeWork)
                {
                    NewFeedVM newFeedVM = new NewFeedVM()
                    {
                        Id = Guid.NewGuid(),
                        Title = GetTitle,
                        Content = GetMess,
                        Image = "HomeWork",
                        Status = 0,
                        CratedTime = DateTime.Now,
                        EndDate = x.EndTime,
                        Priority = 1,
                        IdLesson = x.IdLesson,
                        IsReaded = false,
                        IdClass = x.IdClass,
                        IdSubject = x.IdSubject,
                        IdTypeOfNewFeed = Guid.Parse("9A0CCC99-F28A-4608-8BD4-48EE2BD2E0FB"),
                        IdUser = _userManager.Users.ToList().Where(c => c.Email.ToLower() == userEmail.Replace("-", ".")).Select(c => c.Id).FirstOrDefault()
                    };
                    var ress = await _ISender.SendAsync(newFeedVM);


                }
                _lstClassHomeWork.Clear();
                GetTitle = "";
                GetMess = "";
                _toast.ShowSuccess(" Thêm Deadline Thành Công !");
                return;
            }
            else
            {
                _toast.ShowError(" Thêm Deadline Thất Bại  !");
                return;
            }
        }
        else{
            _toast.ShowError("Bạn Chưa Chọn Lớp Để Thêm Deadline");
            return;
        }

    }




    private async Task SelectedPage(int page)
    {
        _searchDTO.PageNumber = page;
        await GetClassList();
    }

    private async Task AddToBookMark(Guid IdClass, Guid? IdSubjct, string classromm, string subject, string JoinCode)
    {

        if (_lstlessUP.Any(c => c.SubjectId == IdSubjct) == false)
        {
            ToastService.ShowError("Môn Học Này Chưa Có Bài Học, Không Thể Tạo DeadLine Được");
            return;
        }
        if (_lstClass.Where(c => c.Id == IdClass && c.SubjectId == IdSubjct).Select(c => c.ListStudent).FirstOrDefault().Count() == 0)
        {
            ToastService.ShowError("Lớp Học Này Không Có Sinh Viên Để Gia Hạn");
            return;
        }
        if (_lstClassHomeWork.Any(c => c.IdClass == IdClass && c.IdSubject == IdSubjct) == false)
        {

            _lstClassHomeWork.Add(new SetMultipleClass()
                {
                    IdClass = IdClass,
                    SubjectName = subject,
                    ClassNanme = classromm,
                    StartedDate = DateTime.Now,
                    JoinCode = JoinCode,
                    EndTime = Convert.ToDateTime(DateTime.Now.AddDays(3)),
                    IdSubject = Guid.Parse(IdSubjct.ToString()),
                    IsChecked = true
                });
            ToastService.ShowSuccess("Đã Thêm Thành Công Lớp Vào Danh Sách Deadline");
            return;
        }
    }
    private async Task RedirectToChitiet(string idclass, string specializedId, string lecuId, string subjectId)
    {
        string a = "";
        string b = "";
        string c = "";
        string d = "";

        a = idclass.Replace("/", "I0H");
        b = specializedId.Replace("/", "I0H");
        c = lecuId.Replace("/", "I0H");
        d = subjectId.Replace("/", "I0H");

        var url = Path.Combine($"/ViewChiTitet/{a}/{b}/{c}/{d}");
        navigationManager.NavigateTo(url);
    }
}