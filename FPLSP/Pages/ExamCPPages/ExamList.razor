@page "/ExamList"
@using Blazored.Toast.Services
@using FPLSP.Repositories.Interfaces
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Infrastructure.ViewModels.Exams

<main class="app-content">
    <div class="app-title">
        <ul class="app-breadcrumb breadcrumb side">
            <li class="breadcrumb-item active"><a class="btn" href="ExamList"><b><h3>Danh sách Đề Thi</h3></b></a></li>
        </ul>
        <div id="clock"></div>
    </div>

    @* <div class="row">
    <div class="col-md-12">
    <div class="tile">
    <div class="tile-body">

    <div class="row element-button">
    <div class="col-sm-2">

    <a class="btn btn-success" href="/ExamCreate" title="Thêm">
    <i class="fas fa-plus"></i>
    Tạo mới đề thi
    </a>
    </div>
    </div>

    <div class="col">
    </div>
    <div class="col-md-12 pt-2">
    <div id="sampleTable_filter" class="dataTables_filter">
    <ExamCPSearch OnSearch="Search"></ExamCPSearch>
    </div>
    </div>
    <div class="col-2 ps-3">
    <div class="dropdown-center">
    <button class="btn btn-info dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
    Chức Năng
    </button>
    <ul class="dropdown-menu">
    @*<li><a class="dropdown-item" @onclick="() => Undo()">Khôi Phục</a></li>*@
    @*        <li><a class="dropdown-item" @onclick="() => DeleteAll()">Xóa</a></li>
    </ul>
    </div>
    </div>*@
    <div class="row pt-3">
        <div class="col-3" style="text-align: left;">
            <a class="btn btn-danger me-3" href="">Quay Lại</a>
            <a class="btn btn-outline-primary me-3" href="/ExamCreate">Thêm đề thi</a>
            @*<a type="button" class="btn btn-danger" @onclick="()=>DeleteAll()">Xóa tất cả</a>*@
        </div>
        <div class="col-7 pe-5" stype="text-aline:center">
            <ExamCPSearch OnSearch="Search"></ExamCPSearch>
        </div>
        <div class="col-1">
            <div class="dropdown-center">
                <button class="btn btn-info dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Chức Năng
                </button>
                <ul class="dropdown-menu">
                    @*<li><a class="dropdown-item" @onclick="() => Undo()">Khôi Phục</a></li>*@
                    <li><a class="dropdown-item" @onclick="() => DeleteAll()">Xóa</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="mt-3">
        <table class="table table-hover align-middle table-bordered mt-3" style="text-align:center">
            <thead class="table-success text-center">
                <tr>
                    <th><input type="checkbox" @bind="@Check" @onchange="EventArgs => { CheckAllExpense( EventArgs.Value);} " @bind:event="oninput"></th>
                    <th width="20%">Mã đề thi</th>
                    <th width="40%">Tên đề thi</th>
                    <th width="20%">Trạng thái đề thi</th>
                    <th width="15%">Tính năng</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _lstdto)
                {
                    <tr>
                        <td><input type="checkbox" checked=@item.IsChecked @onchange="()=>CheckManual(item.Id,item.IsChecked)"></td>
                        <td>@item.ExamCode</td>
                        <td>@item.ExamName</td>
                        <td class="text-center">@(@item.Status == 1 ? "Mở" : "Chưa mở")</td>
                        <td class="text-center">
                            <a class="btn btn-primary " type="button" title="Sửa" id="show-emp" href="/ExamUpdate/@item.Id">

                                <i class="fas fa-edit"></i>
                            </a>
                            <a class="btn btn-danger " type="button" title="Xóa" @onclick="()=>DeleteStuden(item.Id)">
                                <i class="fas fa-trash-alt"></i>
                            </a>
                            <a class="btn btn-info" type="button" title="Chi Tiết" href="/ExamDetail/@item.Id">
                                <i class="bi bi-book"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>

    <div class="d-flex justify-content-center">
        <tfoot>
            <FPLSP.Components.Pagingation MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></FPLSP.Components.Pagingation>
        </tfoot>
    </div>
</main>

<FPLSP.Components.Comfirmation ConfirmationMessage="Bạn có chắc muốn xóa không ?"
                               ConfirmationTitle="Xóa đề thi"
                               ConfirmationChanged="OnConfirmationDelete " @ref="DeleteConfirmation"></FPLSP.Components.Comfirmation>

@code{
    [Inject] private IExamCPServicesRepo _examApiClient { get; set; }
    [Inject] private NavigationManager _navier { get; set; }
    [Inject] public IToastService NotifiToastService { get; set; }


    private ExamListSearchVm _examListSearchVm;
    private List<ExamCPDto> _lstdto;
    private List<Guid> _lstIDRemoveRange;
    private bool Check = false;

    public MetaData MetaData { get; set; } = new MetaData();

    protected Comfirmation DeleteConfirmation { get; set; }

    private Guid idExam;

    public ExamList()
    {
        _examListSearchVm = new ExamListSearchVm();
        _lstdto = new List<ExamCPDto>();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetExams();
    }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {
        if (deleteconfirmed && _lstIDRemoveRange.Count == 0)
        {
            NotifiToastService.ShowError("Bạn chưa chọn!");
            await GetExams();
            _navier.NavigateTo($"/ExamList");
        }
        else if (deleteconfirmed && _lstIDRemoveRange != null)
        {
            foreach (var VARIABLE in _lstIDRemoveRange)
            {
                var result = await _examApiClient.DeleteExamCP(VARIABLE);
                if (result)
                {
                    NotifiToastService.ShowSuccess("Xóa thành công");
                }
                else
                {
                    NotifiToastService.ShowError("Xóa thất bại");
                }
            }
            await GetExams();
            _navier.NavigateTo($"/ExamList");
            _lstIDRemoveRange = new List<Guid>();
        }
        Check = false;
    }
    async void DeleteAll()
    {
        _lstIDRemoveRange = new List<Guid>();
        _lstIDRemoveRange = _lstdto.Where(c => c.IsChecked == true).Select(c => c.Id).ToList();
        DeleteConfirmation.show();
        await GetExams();
    }
    void CheckAllExpense(object checkValue)
    {

        if (Convert.ToBoolean(checkValue) == false)
        {
            _lstdto.ToList().ForEach(e => e.IsChecked = false);
        }
        else
        {
            _lstdto.ToList().ForEach(e => e.IsChecked = true);
        }
    }
    private async Task GetExams()
    {
        var pagingResponse = await _examApiClient.GetExamCPList(_examListSearchVm);
        _lstdto = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }

    private async Task SelectedPage(int page)
    {
        _examListSearchVm.PageNumber = page;
        await GetExams();
    }
    public async Task DeleteStuden(Guid id)
    {
        _lstIDRemoveRange = new List<Guid>();
        _lstIDRemoveRange.Add(id);
        DeleteConfirmation.show();
        await GetExams();
        Check = false;
    }
    void CheckManual(Guid reportId, bool check)
    {

        if (check == true)
        {
            foreach (var x in _lstdto.Where(c => c.Id == reportId))
            {
                x.IsChecked = false;
            }
        }
        if (check == false)
        {
            foreach (var x in _lstdto.Where(c => c.Id == reportId))
            {
                x.IsChecked = true;
            }
        }
    }
    public async Task OnConfirmationRemove(bool deleteconfirmed)
    {
        if (deleteconfirmed)
        {
            await _examApiClient.DeleteExamCP(idExam);
            await GetExams();
            _navier.NavigateTo($"/ExamList");
        }
    }
    public async Task Search(ExamListSearchVm examListSearchVm)
    {
        _examListSearchVm = examListSearchVm;
        await GetExams();
    }
}