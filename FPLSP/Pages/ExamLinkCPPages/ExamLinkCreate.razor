@page "/ExamLinkCreate"
@using FPLSP.Server.Data.SeedWork
@using FPLSP.Server.Domain.Dtos
@using FPLSP.Server.Domain.Entities.CoresParts
@using FPLSP.Server.Infrastructure.ViewModels.ExamLinks
@using FPLSP.Server.Infrastructure.ViewModels.Exams
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Blazored.Toast.Services
@using FPLSP.Repositories.Interfaces

<h3>Thêm Link Đề Thi</h3>
<div class="row">
    <div class="col-1">
    </div>
    <div class="d-flex justify-content-center col-10 ">
        <EditForm Model="_examCreate" OnValidSubmit="Create" class="card card-body bg-light mt-5">
            <DataAnnotationsValidator />
            <div class="form-group row mt-2">
                <label for="name" class="col-md-2 col-form-label"><i class="fa-solid fa-code"></i> Mã link Đề Thi:</label>
                <div class="col-md-10">
                    <InputText id="name" class="form-control" @bind-Value="_examCreate.ExamLinkCode" />
                    <div class="text-danger"><ValidationMessage For="@(() => _examCreate.ExamLinkCode)"></ValidationMessage></div>
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="name" class="col-md-2 col-form-label"><i class="fas fa-regular fa-cloud"></i> Link Đề Thi:</label>
                <div class="col-md-10">
                    <InputText id="name" class="form-control" @bind-Value="_examCreate.Path" />
                    <div class="text-danger"><ValidationMessage For="@(() => _examCreate.Path)"></ValidationMessage></div>
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="name" class="col-md-2 col-form-label"><i class="fa-solid fa-calendar-days"></i> Ngày Tạo:</label>
                <div class="col-md-10">
                    <InputDate id="name" class="form-control" @bind-Value="_examCreate.CreatedDay" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _examCreate.CreatedDay)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="name" class="col-md-2 col-form-label"><i class="fa-solid fa-calendar-days"></i> Ngày Đóng:</label>
                <div class="col-md-10">
                    <InputDate id="name" class="form-control" @bind-Value="_examCreate.ExpirationDate" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => _examCreate.ExpirationDate)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="name" class="col-md-2 col-form-label"><i class="fa-solid fa-check"></i> Trạng Thái:</label>
                <div class="col-md-10">
                    <InputSelect class="form-select" @bind-Value="_examCreate.Status">
                        <option value="1">Mở</option>
                        <option value="0">Đóng</option>
                    </InputSelect>
                </div>
            </div>

            <div class="form-group row mt-2">
                <label for="name" class="col-md-2 col-form-label"><i class="fa-regular fa-file"></i> Đề Thi:</label>
                <div class="col-md-10">
                    <InputSelect class="form-control" @bind-Value="_examCreate.ExamId">
                        @if (_lstExam != null)
                        {
                            @foreach (var item in _lstExam)
                            {
                                <option value="@item.Id">@item.ExamName</option>
                            }
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="row">
                        <div class="col-3"></div>
                        <div class="col-6 mt-2 pt-4" style="text-align: center">
                            <button type="submit" class="btn btn-primary me-2">Tạo Mới</button>
                            <button type="button" class="btn btn-outline-success me-2" @onclick="() => ClearForm()">Clear Form</button>
                            <a href="/ExamLinkList" class="btn btn-danger">Quay Lại</a>
                        </div>
                        <div class="col-3"></div>
                    </div>
                </div>
            </div>


        </EditForm>
    </div>
    <div class="col-1">
    </div>
</div>

@code {
    [Inject] private IExamLinkCPRepo examLinkApiClient { get; set; }

    [Inject] private IExamCPServicesRepo examApiClient { get; set; }
    [Inject] private NavigationManager _navier { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    private ExamLinkCreateVm _examCreate = new ExamLinkCreateVm();

    protected bool IsDisabled { get; set; }


    private List<ExamCPDto> _lstExam;
    private List<ExamLinkCP> ExamDtos = new List<ExamLinkCP>();


    private ExamListSearchVm _examListSearchVm;

    public ExamLinkCreate()
    {
        _examListSearchVm = new ExamListSearchVm();
        _lstExam = new List<ExamCPDto>();
    }

    public MetaData MetaData { get; set; } = new MetaData();


    private async Task Create(EditContext editContext)
    {
        if (CheckCode(_examCreate.ExamLinkCode))
        {
            _toastService.ShowError("Lỗi! mã đề bị trùng");
            _navier.NavigateTo($"/ExamLinkCreate");
        }
        else
        {
            var result = await examLinkApiClient.CreateExamLinkCP(_examCreate);
            if (result)
            {
                _toastService.ShowSuccess("Thêm Thành Công");
                _navier.NavigateTo("/ExamLinkList");
            }
            else
            {
                _toastService.ShowError("Lỗi! Không thể thêm được Link bài kiểm tra");
                _navier.NavigateTo("/ExamLinkCreate");
            }
        }
    }


    protected async override Task OnInitializedAsync()
    {
        ExamDtos = await examLinkApiClient.GetExamLinkCP();
        Get();
    }

    public async void Get()
    {
        var pagingResponseExam = await examApiClient.GetExamCPList(_examListSearchVm);
        _lstExam = pagingResponseExam.Items;

    }
    public void ClearForm()
    {
        _examCreate.ExamLinkCode = null;
        _examCreate.CreatedDay = DateTime.Now;
        _examCreate.ExpirationDate = DateTime.Now;
        _examCreate.Path = null;
        _examCreate.Status = 0;
        OnInitializedAsync();
    }
    private bool CheckCode(string input)
    {
        var sdfdsf = ExamDtos.Any(c => Equals(input, c.ExamLinkCode));
        return sdfdsf;
    }

}