
@using Blazored.LocalStorage
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Reflection
@using System.Text.RegularExpressions
@inject ILocalStorageService _localStorageService;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor _httcontex;

    <nav class="navbar navbar-light text-center" >
        <div class="row">
            <div class="col-lg-12  d-flex justify-content-start">
                <a href="" class="navbar-brand d-flex d-lg-none">
                    <h2 class="text-primary mb-0"><i class="fa fa-hashtag"></i></h2>
                </a>
                <button class="sidebar-toggler">
                  
                </button>
                <form class="d-none d-md-flex mt-2  ms-4">
                   

                </form>

            </div>
        </div>
        <div class="d-flex align-items-center mb-4 pl-2">
            <div class="position-relative">
            <img class="rounded-circle" src="@imageUser" alt="" style="width: 40px; height: 40px;">
                <div class="bg-success rounded-circle border border-2 border-white position-absolute end-0 bottom-0 p-1"></div>
            </div>
            <div class="ms-2">
                <span class="mb-0">  @(fistusername == null ? "" : fistusername) </span><br>
                <a type="button" class="nav-link float-start ps-0 pt-1" style="font-size: smaller;" @onclick="LogOut"><i class="fa-solid fa-right-from-bracket"></i> Đăng xuất</a>

            </div>
        </div>

    </nav>

<!-- Navbar Start -->


@code {

    //Type[] types => Assembly.GetExecutingAssembly().GetTypes().Where(c => c.BaseType == typeof(ComponentBase)).ToArray();
    //Type SelecteType;
    //RenderFragment renderFragment;
    //private string _compnentName;
    //[Inject] public IToastService _toastService { get; set; }
    //private string UserName = "";
    //private string UserNameDisPlay;
    //public string ComponentName
    //{
    //    get { return _compnentName; }
    //    set
    //    {
    //        _compnentName = value;
    //        SelecteType = types.Where(c => c.Name.ToUpper() == value.ToUpper()).FirstOrDefault() ?? typeof(SurveyPrompt);
    //        renderFragment = (builder) =>
    //        {
    //            builder.OpenComponent(0, SelecteType);
    //            builder.CloseComponent();
    //        };
    //    }
    //}
    private string fistusername="";

    private ReaderWriterLock _lock;
    private string SaveKey = "";
    string patern = "^([a-z]{3,13}[0-9]{0,3}@fpt-edu-vn)$";
    private string imageUser = "";
    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            fistusername = user.Claims.ToList()[4].Value.ToString();
            imageUser = user.Claims.ToList()[6].Value.ToString();
        }
        else
        {

            fistusername = "ViewerUser";
        }




    }
    protected override async Task OnAfterRenderAsync(bool firstRender){
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState.User;

        //if (user.Identity.IsAuthenticated)
        //{
        //    fistusername = user.Claims.ToList()[4].Value.ToString();
        //}
        //else
        //{

        //    fistusername = "ViewerUser";
        //}
        //var xxx = Navigation.Uri.ToString();
        //if (xxx.Contains("fplsp") && xxx.Contains("adminlogin"))
        //{
        //    fistusername = xxx.Substring(27, xxx.Length - 27);
        //    if (Regex.IsMatch(fistusername, patern))
        //    {
        //        await _localStorageService.SetItemAsStringAsync("keyver", fistusername);
        //    }

        //}
        //else
        //{
        //    fistusername = await _localStorageService.GetItemAsync<string>("keyver");
        //}
        //if (xxx.Contains("fplsp") == false && xxx.Contains("adminlogin"))
        //{
        //    fistusername = xxx.Substring(34, xxx.Length - 34);
        //    if (Regex.IsMatch(fistusername, patern))
        //    {
        //        await _localStorageService.SetItemAsStringAsync("keyver", fistusername);
        //    }

        //}
        //else
        //{
        //    fistusername = await _localStorageService.GetItemAsync<string>("keyver");
        //}

    }

    private async Task LogOut()
    {

        await _localStorageService.SetItemAsStringAsync("keyver", "");
        _httcontex.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        _httcontex.HttpContext.Session.Remove("err");
        Navigation.NavigateTo("/");
    }
}


