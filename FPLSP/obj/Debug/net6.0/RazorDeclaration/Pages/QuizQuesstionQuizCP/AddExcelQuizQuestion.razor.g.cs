// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.QuizQuesstionQuizCP
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\QuizQuesstionQuizCP\AddExcelQuizQuestion.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\QuizQuesstionQuizCP\AddExcelQuizQuestion.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\QuizQuesstionQuizCP\AddExcelQuizQuestion.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\QuizQuesstionQuizCP\AddExcelQuizQuestion.razor"
using FPLSP.Server.Domain.Dtos.KindOfQuestionCPDtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\QuizQuesstionQuizCP\AddExcelQuizQuestion.razor"
using FPLSP.Server.Domain.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\QuizQuesstionQuizCP\AddExcelQuizQuestion.razor"
using FPLSP.Server.Infrastructure.ViewModels.QuizCPVm;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/addExcelQuizQuestion/{idspecializedNonDecrypt}/{idsubjectNonDecrypt}/{idquizNonDecrypt}")]
    public partial class AddExcelQuizQuestion : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 322 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\QuizQuesstionQuizCP\AddExcelQuizQuestion.razor"
       
    [Inject]
    public IQuizCPRepo _quizCPRepo { get; set; }
    IBrowserFile selectedFiles;
    public List<ExcelQuizQuestion> _lstexcelQuizQuestions = new List<ExcelQuizQuestion>();
    public ExcelQuizQuestion _excelQuizQuestions = new ExcelQuizQuestion();
    public ExcelQuizQuestion _undoExcelQuizQuestions = new ExcelQuizQuestion();
    public int QuestionNumber { get; set; } = 0;
    [Parameter]
    public string idquizNonDecrypt { get; set; }
    public string idquiz = "";
    [Parameter]
    public string idsubjectNonDecrypt { get; set; }
    public string idsubject = "";
    [Parameter]
    public string idspecializedNonDecrypt { get; set; }
    public string idspecialized = "";
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    List<bool> lstBool = new List<bool>();
    [Inject]
    public NavigationManager Navigation { get; set; }
    public List<KindOfQuestionCPDtos> lstKoq = new List<KindOfQuestionCPDtos>();
    [Inject]
    public IQuizQuesstionQuizCPClient _iQuizQuesstionQuizCPClient { get; set; }
    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";
    protected override async Task OnInitializedAsync()
    {
        uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }
        idquiz = _cryptoServices.Decrypt(idquizNonDecrypt.Replace("I0H", "/"));
        idsubject = _cryptoServices.Decrypt(idsubjectNonDecrypt.Replace("I0H", "/"));
        idspecialized = _cryptoServices.Decrypt(idspecializedNonDecrypt.Replace("I0H", "/"));

        lstKoq = await _quizCPRepo.GetAllKoq();
        lstKoq = lstKoq.GroupBy(c => c.QuestionTypeName).Select(s => lstKoq.FirstOrDefault(c => c.QuestionTypeName == s.Key)).ToList();
        lstBool.Add(true);
        lstBool.Add(false);
    }
    private void EnableEditing(bool flag, ExcelQuizQuestion ExcelQuizQuestion)
    {
        if (flag == false)
        {
            _excelQuizQuestions = new ExcelQuizQuestion();
        }
        else
        {
            _excelQuizQuestions = ExcelQuizQuestion;
        }
        var quizques = _lstexcelQuizQuestions.FirstOrDefault(c => c.Id == ExcelQuizQuestion.Id);
        _undoExcelQuizQuestions = quizques;
        quizques.IsEditing = flag;
    }
    public async Task test()
    {
        if (selectedFiles == null)
        {
            _toastService.ShowError("Chưa có file nào được chọn");
            return;
        }

        if (selectedFiles.Size > 410000)
        {
            _toastService.ShowError("File không được vượt quá 400 kB");
            return;
        }
        var a = selectedFiles.GetType().ToString();
        if (!selectedFiles.ContentType.Contains("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
        {
            _toastService.ShowError("File đang không đúng định đạng dữ liệu hoặc định dạng Excel");
            return;
        }
        _lstexcelQuizQuestions = new List<ExcelQuizQuestion>();
        _lstexcelQuizQuestions = await _quizCPRepo.LoadingBigData(selectedFiles, Guid.Parse(idquiz));
        await UpdateIndex();
        _toastService.ShowSuccess("Tải dữ liệu thành công");
    }
    public async Task UpdateIndex()
    {
        foreach (var item in _lstexcelQuizQuestions)
        {
            if (item.Index < 0)
            {
                item.Index = 0;
            }
        }
    }
    List<int> _lstErrorIndex = new List<int>();
    public async Task CreateExcelQuizQuestion()
    {
        if (_lstexcelQuizQuestions.Count() == 0)
        {
            _toastService.ShowError("Chưa có có dự liệu để thêm");
            return;
        }
        var lstQuizQuesQuiz = await _iQuizQuesstionQuizCPClient.GetAllCauHoi(Guid.Parse(idsubject));
        var lstQuesByIdQuiz = lstQuizQuesQuiz.Where(c => c.QuizId == Guid.Parse(idquiz)).ToList();

        if (lstQuesByIdQuiz.Count() + _lstexcelQuizQuestions.Count() > 15)
        {
            _toastService.ShowError($"Sộ lượng câu hỏi trong bộ quiz đã có là {lstQuesByIdQuiz.Count()} và thêm {_lstexcelQuizQuestions.Count()} đã vượt quá 15 không thể thêm");
            return;
        }
        var lstError = new List<ExcelQuizQuestion>();
        foreach (var excelQuizQuestion in _lstexcelQuizQuestions)
        {
            if (string.IsNullOrEmpty(excelQuizQuestion.ContentQuestion))
            {
                _lstErrorIndex.Add(excelQuizQuestion.Index);
                lstError.Add(excelQuizQuestion);
                continue;
            }
            foreach (var item in excelQuizQuestion.ListAnswer)
            {
                if (string.IsNullOrEmpty(item.Answer))
                {
                    if (_lstErrorIndex.Any(c => c == excelQuizQuestion.Index))
                    {
                        continue;
                    }
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
            }
            if (excelQuizQuestion.QuestionTypeName == "MatchingItems")
            {
                var listTrue = excelQuizQuestion.ListAnswer.Where(c => c.IsCorrect == 1).ToList();
                if (listTrue.Count() != 1)
                {
                    if (_lstErrorIndex.Any(c => c == excelQuizQuestion.Index))
                    {
                        continue;
                    }
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
                if (excelQuizQuestion.ListAnswer.Count() != 4)
                {
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
            }
            if (excelQuizQuestion.QuestionTypeName == "MultipleChoise")
            {
                var listTrue = excelQuizQuestion.ListAnswer.Where(c => c.IsCorrect == 1).ToList();
                if (listTrue.Count() < 1)
                {
                    if (_lstErrorIndex.Any(c => c == excelQuizQuestion.Index))
                    {
                        continue;
                    }
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
                if (excelQuizQuestion.ListAnswer.Count() != 4)
                {
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
            }
            else if (excelQuizQuestion.QuestionTypeName == "YesNo")
            {
                var listTrue = excelQuizQuestion.ListAnswer.Where(c => c.IsCorrect == 1).ToList();
                if (listTrue.Count() != 1)
                {
                    if (_lstErrorIndex.Any(c => c == excelQuizQuestion.Index))
                    {
                        continue;
                    }
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
                if (excelQuizQuestion.ListAnswer.Count() != 2)
                {
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
            }
            else if (excelQuizQuestion.QuestionTypeName == "SupplyItems")
            {
                if (excelQuizQuestion.ListAnswer.Count() != 1)
                {
                    _lstErrorIndex.Add(excelQuizQuestion.Index);
                    lstError.Add(excelQuizQuestion);
                    continue;
                }
            }
        }
        if (_lstErrorIndex.Count() > 0)
        {
            string mess = "Các dự liệu ở vị trí:";
            string indexError = string.Join(" , ", _lstErrorIndex.ToArray());
            mess = mess + indexError + " đang trống hoặc đáp án sai với kiểu dữ liệu cần xem lại";
            _toastService.ShowWarning(mess);
            _lstErrorIndex.Clear();
            return;
        }

        var resul = await _quizCPRepo.CreateExcelQuizQuestion(_lstexcelQuizQuestions);
        if (resul == 1)
        {
            _toastService.ShowSuccess("Thêm thành công");
            Quaylai();
        }
        else
        {
            _toastService.ShowError("Thêm không thành công");
            Quaylai();
        }

    }

    public async Task AddQuestion()
    {
        var quizQues = new ExcelQuizQuestion();
        quizQues.Index = _lstexcelQuizQuestions.Count() + 1;
        quizQues.IdQuestion = Guid.Parse(idquiz);
        quizQues.QuestionTypeName = "MatchingItems";
        for (int i = 0; i < 4; i++)
        {
            var anser = new QuizAnswerExcel();
            anser.Id = Guid.NewGuid();
            anser.Answer = "";
            anser.IdQuizQuestion = quizQues.IdQuestion;
            anser.IsCorrect = 0;
            quizQues.ListAnswer.Add(anser);
        }

        _lstexcelQuizQuestions.Add(quizQues);
        _toastService.ShowSuccess($"Thêm dữ liệu ở vị trí {quizQues.Index} thành công");

    }
    public async Task CheckKoq(ExcelQuizQuestion ExcelQuizQuestion, string typeName)
    {
        foreach (var excel in _lstexcelQuizQuestions)
        {
            if (excel.Id == ExcelQuizQuestion.Id)
            {
                excel.QuestionTypeName = typeName;

                if (excel.QuestionTypeName == "MatchingItems" || excel.QuestionTypeName == "MultipleChoise")
                {
                    List<QuizAnswerExcel> addlst = new List<QuizAnswerExcel>();
                    int flag = 0;
                    foreach (var answerExcel in excel.ListAnswer)
                    {
                        if (excel.ListAnswer.Count() < 4 - flag)
                        {
                            var anser = new QuizAnswerExcel();
                            anser.Id = Guid.NewGuid();
                            anser.Answer = "";
                            anser.IdQuizQuestion = excel.IdQuestion;
                            anser.IsCorrect = 0;
                            addlst.Add(anser);
                            flag++;
                        }
                    }

                    if (addlst.Count() > 0)
                    {
                        excel.ListAnswer.AddRange(addlst);
                        CheckKoq(ExcelQuizQuestion, typeName);
                    }

                }
                else if (excel.QuestionTypeName == "YesNo")
                {
                    List<QuizAnswerExcel> addlst = new List<QuizAnswerExcel>();

                    List<QuizAnswerExcel> removelst = new List<QuizAnswerExcel>();
                    int flag = 0;
                    foreach (var answerExcel in excel.ListAnswer)
                    {
                        if (excel.ListAnswer.Count() < 2)
                        {
                            var anser = new QuizAnswerExcel();
                            anser.Id = Guid.NewGuid();
                            anser.Answer = "";
                            anser.IdQuizQuestion = excel.IdQuestion;
                            anser.IsCorrect = 0;
                            addlst.Add(anser);
                            flag++;
                        }
                        else if (excel.ListAnswer.Count() > 2 + flag)
                        {
                            removelst.Add(answerExcel);
                            flag++;
                        }
                    }
                    if (addlst.Count() > 0)
                    {
                        excel.ListAnswer.AddRange(addlst);
                    }
                    if (removelst.Count() > 0)
                    {
                        foreach (var item in removelst)
                        {
                            excel.ListAnswer.Remove(item);
                        }
                    }


                }
                else if (excel.QuestionTypeName == "SupplyItems")
                {
                    List<QuizAnswerExcel> addlst = new List<QuizAnswerExcel>();
                    List<QuizAnswerExcel> removelst = new List<QuizAnswerExcel>();
                    int flag = 0;
                    foreach (var answerExcel in excel.ListAnswer)
                    {
                        if (excel.ListAnswer.Count() < 1)
                        {
                            var anser = new QuizAnswerExcel();
                            anser.Id = Guid.NewGuid();
                            anser.Answer = "";
                            anser.IdQuizQuestion = excel.IdQuestion;
                            anser.IsCorrect = 1;
                            addlst.Add(anser);
                            flag++;
                        }
                        else if (excel.ListAnswer.Count() > 1 + flag)
                        {
                            removelst.Add(answerExcel);
                            flag++;
                        }
                    }
                    if (addlst.Count() > 0)
                    {
                        excel.ListAnswer.AddRange(addlst);
                    }
                    if (removelst.Count() > 0)
                    {
                        foreach (var item in removelst)
                        {
                            excel.ListAnswer.Remove(item);
                        }
                    }
                }
            }
        }

    }
    private async Task DeleteRow(ExcelQuizQuestion ExcelQuizQuestion)
    {
        _lstexcelQuizQuestions.Remove(ExcelQuizQuestion);
    }
    private async Task UpdateExcelQuizQuestion(ExcelQuizQuestion excelQuizQuestion)
    {
        //foreach (var excel in _lstexcelQuizQuestions)
        //{
        //    if (excel.Id == excelQuizQuestion.Id)
        //    {
        //        excel.ListIsCorrect = excelQuizQuestion.ListIsCorrect;
        //        excel.ListAnswer = excelQuizQuestion.ListAnswer;
        //        excel.ContentQuestion = excelQuizQuestion.ContentQuestion;
        //    }
        //}
        EnableEditing(false, excelQuizQuestion);
    }
    private async Task UndoChange(ExcelQuizQuestion excelQuizQuestion)
    {

        EnableEditing(false, excelQuizQuestion);

    }
    private async void OnFileSelected(InputFileChangeEventArgs e)
    {
        _lstexcelQuizQuestions.Clear();
        selectedFiles = e.File;
        this.StateHasChanged();
    }
    private async Task Quaylai()
    {
        var url = Path.Combine("/quizQuesstionQuizCP/" + _cryptoServices.Encrypt((idspecialized).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idsubject).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idquiz).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        Navigation.NavigateTo(url);
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
