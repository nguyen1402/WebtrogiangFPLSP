// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.ClassPages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Data.SeedWork;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Domain.Entities.CoresParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Domain.Entities.UserParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Domain.Entities.UsesParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Infrastructure.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.BookMark;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.LessonUP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.NewFeed;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.StudentClassUPVm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.SubmitHomeWorkVM;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using IdentityModel.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
           [Authorize(Roles = "Student")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout2))]
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/viewclass")]
    public partial class OverViewClass : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 269 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\OverViewClass.razor"
       
    [Parameter]
    public string userEmail { get; set; }

    private string url = null;

    private List<NewFeedOverView> _lstNewFeed = new List<NewFeedOverView>();
    private List<BookMarkClass> _bookMarkClasses = new List<BookMarkClass>();
    public StudentUP student = new StudentUP();
    public LecturersCP lecturer = new LecturersCP();
    [Inject]
    public ITaskRepositories<ClassUPViewModel> _taskRepositories { get; set; }
    private List<ClassUPViewModel> _lstClass = new List<ClassUPViewModel>();
    private PagingParameters _pagingParameters = new PagingParameters();
    [Inject]
    public NavigationManager navigationManager { get; set; }
    private ClassUPViewModel _classUPViewModel = new ClassUPViewModel();
    private ClassSearchDTO _searchDTO = new ClassSearchDTO();
    private int _counter;
    private int _count;
    private int encounter;
    [CascadingParameter]
    private FPLSP.Shared.Error _error { get; set; } = new FPLSP.Shared.Error();
    public MetaData MetaData { get; set; } = new MetaData();
    private SubmitHomeWorkCreateVM createSubmit = new SubmitHomeWorkCreateVM();
    [Inject]
    public ISubmitHomeWorkApiClient _SubmitHomeWorkApiClient { get; set; }
    [Inject]
    public ISubmitHomeworkForStudentRepo _submitHomeworkForStudentRepo { get; set; }
    [Inject]
    public IStudentUPRepo _studentUPRepo { get; set; }
    [Inject]
    public ILecturersCPRepo _lecturersCPRepo { get; set; }
    [Inject]
    public IStudentClassUPRepo _studentClassUPRepo { get; set; }
    [Inject]
    public IClassSubjectApiClient _classSubjectApiClient { get; set; }
    //
    private List<SubjectUP> _lstSub = new List<SubjectUP>();
    private List<SpecializedDto> _lstSpec = new List<SpecializedDto>();
    private List<LecturersCPViewModel> _lstLec = new List<LecturersCPViewModel>();
    private List<StudentClassUP> _lstStuClass = new List<StudentClassUP>();
    //
    [Inject] IToastService _toast { get; set; }
    [Inject]
    public IBookMarkClassRepo _bookMarker { get; set; }
    [Inject]
    public UserManager<UserSignIn> _userManager { get; set; }
    [Inject]
    public INewFeedRepo _newFeedRepo { get; set; }
    [Inject]
    public ILessonUPRepo _less { get; set; }
    private List<LessonUPViewModel> _lstless = new List<LessonUPViewModel>();
    string patern = "^([a-z]{3,13}[0-9]{5}@fpt-edu-vn)$";
    [CascadingParameter]
    public HeaderBar headerBar { get; set; }
    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Claims.ToList()[4].Value.ToString();
            var listStudent = await _studentUPRepo.GetAllStudentUPAsync();
            student = listStudent.Where(x => x.Email == userEmail).FirstOrDefault();
            // headerBar.Update += () => InvokeAsync(() => this.StateHasChanged());

        }
        else
        {
            userEmail = "ViewerUser";
            StateHasChanged();
        }




        // _count = await _taskRepositories.CountAsync();
        _lstSub = await _taskRepositories.GetAllSub();
        _lstLec = await _taskRepositories.GetAllLec();
        _lstSpec = await _taskRepositories.GetAllSpec();
        _lstStuClass = await _studentClassUPRepo.GetAllStudentUPAsync();
        _lstless = await _less.GetAll();
        await ConnectToServer();
        await GetStudentByEmail();
        await GetFavoriteClass();
        await GetClassList(_searchDTO);
        await GetNewFeed();

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {


    }
    private async Task Targeter(string? Taget)
    {

        await jsRuntime.InvokeVoidAsync("Targeter", Taget);

    }




    private async Task ConnectToServer()
    {
        try
        {
            string url = "http://localhost:5001/notificationhub";
            HubConnection _connection = null;
            bool isConnected = false;
            string connectionStatus = "Closed";
            _connection = new HubConnectionBuilder()
                .WithUrl(url)
                .Build();

            await _connection.StartAsync();
            isConnected = true;
            connectionStatus = "Connected :-)";
            Console.WriteLine("SinalR Is Starting");
            _connection.Closed += async (s) =>
            {
                isConnected = false;
                connectionStatus = "Disconnected";
                await _connection.StartAsync();
                isConnected = true;
            };

            _connection.On<string>("Noticafications", async (res) =>
            {
                if (res == "Done")
                {
                    await GetNewFeed();

                    this.InvokeAsync(() => this.StateHasChanged());
                }


            });
        }
        catch (Exception ex)
        {

            _error.ProcessError(ex);
        }
    }



    private async Task GetClassList(ClassSearchDTO classSearchDTO)
    {

        if (student != null)
        {
            _lstClass = await _taskRepositories.GetAllClass(student.Id);
            _count = _lstClass.Count;
        }

        for (var i = 0; i < 15; i++)
        {
            encounter = i;
        }
    }
    private async Task GetNewFeed()
    {
        if (student == null)
        {
            return;
        }
        _lstNewFeed = await _newFeedRepo.GetListNewForUser(Guid.Parse(student.Id.ToString()));

        // _lstNewFeedforclass = await _newFeedRepo.GetListNewForClass(_classUp.Id,Guid.Parse( _classUp.SubjectId.ToString()));
    }
    private async Task GetFavoriteClass()
    {
        if (student == null)
        {
            return;
        }
        _bookMarkClasses = await _bookMarker.GetListBookMarkForUser(student.Id);
    }
    private async Task GetStudentByEmail()
    {
        var listStudent = await _studentUPRepo.GetAllStudentUPAsync();
        student = listStudent.Where(x => x.Email==userEmail).FirstOrDefault();
        if (student == null)
        {
            return;
        }
    }

    private async Task GetLecturerByEmail()
    {
        var listLecturer = await _lecturersCPRepo.GetAllLecturerAsync();

        lecturer = listLecturer.FirstOrDefault(x => x.Email==userEmail);
    }

    private async Task<IEnumerable<ClassUPViewModel>> AutoSearch(string ClassName)
    {
        return await Task.FromResult(_lstClass.Where(c => c.ClassroomName.ToLower().Contains(ClassName.ToLower())).ToList());
    }
    private async Task SelectedPage(int page)
    {
        _searchDTO.PageNumber = page;
        await GetClassList(_searchDTO);
    }
    private async Task SearchBar(EditContext editContext)
    {

       



        var classSearched = await _taskRepositories.GetClassById(_searchDTO.JoinCode);
        if (String.IsNullOrEmpty(classSearched.JoinCode) == false && classSearched.Id != Guid.Empty)
        {
            var listClassOfSubject = await _classSubjectApiClient.GetlstClassUP(Guid.Parse(classSearched.SubjectId.ToString()));

            bool isDuplicated = false;
            if (listClassOfSubject != null)
            {


                foreach (var ClassUP in listClassOfSubject)
                {
                    if (_lstStuClass.Any(c => c.ClassId == ClassUP.Id && c.StudentId == student.Id))
                    {
                        await Swal.FireAsync("Tham Gia Lớp Học", "Không thể tham gia nhiều hơn một lớp với một môn học", SweetAlertIcon.Warning);
                        isDuplicated = true;
                        break;
                    }
                }

                if (!isDuplicated)
                {
                    await _studentClassUPRepo.CreateStudentInClassByJoinCode(classSearched.Id, student.Id, _searchDTO.JoinCode);

                    List<Guid?> lstGuidIdStudent = new List<Guid?>();
                    lstGuidIdStudent.Add(student.Id);

                    if (lstGuidIdStudent.Count() > 0)
                    {
                        var AllSubMit = await _submitHomeworkForStudentRepo.Student_GetAllAsync();
                        var SubmitIdLesson = AllSubMit.Where(c => c.IdSubject == classSearched.SubjectId && c.IdClass == classSearched.Id).ToList();

                        var GroupIDLesson = SubmitIdLesson.GroupBy(g => g.Titile).Select(c => new SubmitHomeWork()
                            {
                                Id = c.Where(w => w.Titile == c.Key).Select(c => c.Id).FirstOrDefault(),
                                IdClass = c.Where(w => w.Titile == c.Key).Select(c => c.IdClass).FirstOrDefault(),
                                IdLesson = c.Where(w => w.Titile == c.Key).Select(c => c.IdLesson).FirstOrDefault(),
                                IdStudent = c.Where(w => w.Titile == c.Key).Select(c => c.IdStudent).FirstOrDefault(),
                                IdSubject = c.Where(w => w.Titile == c.Key).Select(c => c.IdSubject).FirstOrDefault(),
                                EndTime = c.Where(w => w.Titile == c.Key).Select(c => c.EndTime).FirstOrDefault(),
                                Status = c.Where(w => w.Titile == c.Key).Select(c => c.Status).FirstOrDefault(),
                                Titile = c.Where(w => w.Titile == c.Key).Select(c => c.Titile).FirstOrDefault(),
                                StartedDate = c.Where(w => w.Titile == c.Key).Select(c => c.StartedDate).FirstOrDefault(),
                                SubmitLink = c.Where(w => w.Titile == c.Key).Select(c => c.SubmitLink).FirstOrDefault(),
                                SubmitTime = c.Where(w => w.Titile == c.Key).Select(c => c.SubmitTime).FirstOrDefault(),
                            }).ToList();
                        foreach (var item in GroupIDLesson)
                        {
                            createSubmit = new SubmitHomeWorkCreateVM()
                                {
                                    EndTime = item.EndTime,
                                    IdLesson = item.IdLesson,
                                    IdSubject = item.IdSubject,
                                    LsIdStudent = lstGuidIdStudent,
                                    StartedDate = item.StartedDate,
                                    SubmitTime = null,
                                    IdClass = item.IdClass,
                                    Titile = item.Titile
                                };
                            if (AllSubMit.Any(c => c.IdClass == createSubmit.IdClass && c.IdLesson == createSubmit.IdLesson && c.IdSubject == createSubmit.IdSubject && lstGuidIdStudent.Any(a => a == c.IdStudent)))
                            {
                                continue;
                            }
                            else
                            {
                                await _SubmitHomeWorkApiClient.Add(createSubmit);
                            }
                        }
                    }

                    await Swal.FireAsync("Tham Gia Lớp Học", "Tham Gia Thành Công Lớp Học", SweetAlertIcon.Success);
                }
            }
        }
        else
        {
            await Swal.FireAsync("Tham Gia Lớp Học", "Lớp Học Không Tồn Tại", SweetAlertIcon.Error);
            return;
        }

        await OnInitializedAsync();
    }


    private async Task AddToBookMark(Guid IdClass, string JoinCode)
    {
        var subjectid = _lstClass.Where(c => c.JoinCode == JoinCode).Select(c => c.SubjectId).FirstOrDefault();

        if (IdClass != null && JoinCode != null)
        {
            var booker = new BookMarkClassVM()
                {
                    Id = Guid.NewGuid(),
                    Status = 0,
                    Priority = _bookMarkClasses.Count == 0 ? 0 : _bookMarkClasses.Max(c => c.Priority) + 1,
                    IsBookMark = true,
                    IdUser = student.Id.ToString(),
                    IdClass = IdClass,
                    IdSubject = _lstClass.Where(c => c.JoinCode == JoinCode).Select(c => c.SubjectId).FirstOrDefault()
                };
            var res = await _bookMarker.AddToBookMark(booker);
            if (res)
            {
                await Swal.FireAsync(" Danh Sách Yêu Thích", "Thêm Thành Công Lớp Vào Danh Sách Yêu Thích", SweetAlertIcon.Success);

            }
            else
            {
                await Swal.FireAsync(" Danh Sách Yêu Thích", "Thêm Thất Bại", SweetAlertIcon.Error);
            }
            await GetClassList(_searchDTO);
            await GetFavoriteClass();
        }


    }
    private async Task navigate()
    {
        navigationManager.NavigateTo("oke");
    }
    private async Task DeleteFormBookMark(Guid IdBookMark)
    {
        if (IdBookMark != null)
        {
            var res = await _bookMarker.RemoveBookMark(IdBookMark);
            if (res)
            {
                await Swal.FireAsync("Xóa Khỏi Danh Sách Yêu Thích", "Đã Xóa Lớp Khỏi Danh Sách Yêu Thích", SweetAlertIcon.Success);
            }
            else
            {
                await Swal.FireAsync("Xóa Khỏi Danh Sách Yêu Thích", " Xóa Lớp Khỏi Danh Sách Yêu Thích Thất Bại", SweetAlertIcon.Error);

            }
            await GetClassList(_searchDTO);
            await GetFavoriteClass();
        }
    }
    private async Task JoinClass(string joinCodeAssign)
    {
        var stuClassUP = _lstStuClass.Where(c => c.JoinCodeAsign == joinCodeAssign && c.StudentId == student.Id).FirstOrDefault();
        StudentClassUPUpdateVm stuClassUpdate = new StudentClassUPUpdateVm()
            {
                StudentId = stuClassUP.StudentId,
                ClassId = stuClassUP.ClassId,
                JoinCodeAsign = joinCodeAssign,
                Status = stuClassUP.Status,
                StatusOfStudent = 0
            };

        await OnInitializedAsync();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SweetAlertService Swal { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpContextAccessor _http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService _localStorageService { get; set; }
    }
}
#pragma warning restore 1591
