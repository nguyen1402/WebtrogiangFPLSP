// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.ClassPages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using FPLSP.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using FPLSP.Server.Data.FPLSPDbContext;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using FPLSP.Server.Domain.Entities.CoresParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using FPLSP.Server.Domain.Entities.UsesParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using FPLSP.Server.Infrastructure.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/updateclass/{GetId}")]
    public partial class UpdateClass : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 278 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\ClassPages\UpdateClass.razor"
       
	        [Parameter]
        public string GetId { get; set; }
        [Inject] IToastService _toast { get; set; }
        [Inject] NavigationManager _navigationManager { get; set; }

        [Inject]
        public ITaskRepositories<ClassUPViewModel> _taskRepositories { get; set; }
        private CreateClassVM _classUp;
        private List<StudentsMapper> _lstmapper;
        private SubjectUP _SubjectUP;
        private LecturersCP _lecturersCP;
        private List<SubjectUP> _lstSub;
        private List<LecturersCP> _lstLec;
        private List<SpecializedUP> _lstSpec;
        private ApplicationDbContext _ApplicationDbContext;
        //
        private List<StudentViewModel> _lstStudents;
        private List<ExcelErrors> _lstErrr = new List<ExcelErrors>();
        private bool IsDisabled = false;
        //
        private List<StudentViewModel> _lstmainstudent;
        public class PreStatus
        {
            public int Id { get; set; }
            public string StatusName { get; set; }
        }
        private List<PreStatus> _preStatuses = new List<PreStatus>();
        private PreStatus _Statuses = new PreStatus();


        public UpdateClass()
        {
            _lstmapper = new List<StudentsMapper>();
            _lstStudents = new List<StudentViewModel>();
            _lstmainstudent = new List<StudentViewModel>();
            _preStatuses = new List<PreStatus>()
            {
                new PreStatus(){Id=0,StatusName="Đang Hoạt Động"},
                new PreStatus(){Id=1,StatusName="Dừng Hoạt Động"},
                new PreStatus(){Id=2,StatusName="Chưa Đủ Sinh Viên"},
                new PreStatus(){Id=3 ,StatusName="Chưa Có Môn Học"},
            };
            _Statuses = new PreStatus();
            //_classUp = new ClassUPViewModel();
            _lstSub = new List<SubjectUP>();
            _SubjectUP = new SubjectUP();
            _ApplicationDbContext = new ApplicationDbContext();
        }

        protected override async Task OnInitializedAsync()
        {

            _classUp = await _taskRepositories.GetClassById(GetId.ToString());
            _lstmainstudent = await _taskRepositories.GetAllStudent();

            _lstSub = await _ApplicationDbContext.SubjectUPs.ToListAsync();

            _lstLec = await _ApplicationDbContext.Lecturers.ToListAsync();

            _lstSpec = await _ApplicationDbContext.SpecializedUPs.ToListAsync();
            //
            foreach (var st in _classUp.ListStudent)
            {
                var newstmap = new StudentsMapper()
                {
                    Id = st,
                    IsChecked = true
                };
                _lstmapper.Add(newstmap);
            }
            foreach (var x in _preStatuses)
            {
                _Statuses.Id = x.Id;
                _Statuses.StatusName = x.StatusName;
            }
        }


        private async Task UpdateClassUp(EditContext editContext)
        {
            _classUp.ListStudent.Clear();
            foreach (var choose in _lstmapper.Where(c => c.IsChecked))
            {
                _classUp.ListStudent.Add(choose.Id);
            }
            if (_lstStudents.Count() > 0)
            {
                foreach (var import in _lstStudents.Where(c => c.IsChecked))
                {
                    if (_classUp.ListStudent.Any(c => c == import.Id) == false)
                    {
                        _classUp.ListStudent.Add(import.Id);
                    }
                }
            }
            var result = await _taskRepositories.UpdateAsync(GetId, _classUp);
            if (result)
            {
                _toast.ShowSuccess($"Update Successfully {_classUp.ClassroomName}");
                _navigationManager.NavigateTo("/viewclass");
            }
            else
            {
                _toast.ShowError($"Update Failed {_classUp.ClassroomName}");
                _navigationManager.NavigateTo($"/updateclass/{GetId}");
            }


        }

        private async void OnFileSelected(InputFileChangeEventArgs e)
        {
            _lstStudents.Clear();
            var selectedFiles = e.File;
            _lstStudents = await _taskRepositories.LoadingBigData(selectedFiles);
            _lstErrr = await _taskRepositories.GetListErr();
            if (_lstErrr.Count() > 0)
            {
                IsDisabled = true;
            }
            this.StateHasChanged();
        }
        private async void Upload()
        {

        }
        void CheckAllExpense(object checkValue)
        {
            if (Convert.ToBoolean(checkValue) == false)
            {
                _lstStudents.ToList().ForEach(e => e.IsChecked = false);
            }
            else
            {
                _lstStudents.ToList().ForEach(e => e.IsChecked = true);
            }


        }
        void CheckAllExpenseForMapper(object checkValue)
        {
            if (Convert.ToBoolean(checkValue) == false)
            {
                _lstmapper.ToList().ForEach(e => e.IsChecked = false);
            }
            else
            {
                _lstmapper.ToList().ForEach(e => e.IsChecked = true);
            }


        }
        void CheckManualForMapper(Guid st, bool check)
        {
            if (check == true)
            {
                foreach (var x in _lstmapper.Where(c => c.Id == st))
                {
                    x.IsChecked = false;
                }
            }
            if (check == false)
            {
                foreach (var x in _lstmapper.Where(c => c.Id == st))
                {
                    x.IsChecked = false;
                }
            }
        }
        void CheckManual(Guid st, bool check)
        {
            if (check == true)
            {
                foreach (var x in _lstStudents.Where(c => c.Id == st))
                {
                    x.IsChecked = false;
                }
            }
            if (check == false)
            {
                foreach (var x in _lstStudents.Where(c => c.Id == st))
                {
                    x.IsChecked = false;
                }
            }
        }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
