// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.FPLExam
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using FPLSP.Data.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using FPLSP.Repositories.Interfaces.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using FPLSP.Server.Domain.Entities.CoresParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using FPLSP.Server.Domain.Entities.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using FPLSP.Server.Infrastructure.ViewModels.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using SixLabors.Fonts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using SixLabors.ImageSharp.Drawing.Processing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using SixLabors.ImageSharp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using SixLabors.ImageSharp.Drawing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using SixLabors.ImageSharp.Formats.Jpeg;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using SixLabors.ImageSharp.Processing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
using System.Text;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout))]
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/loadingpage/{GetIdUser}")]
    public partial class WaiitingPage : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 218 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
       
    private string txtValue = "";

    [Inject] public UserManager<UserSignIn> _userManager { get; set; }
    List<string> stringList = new List<string>();
    private string captionText;
    FontCollection collection = new FontCollection();
    private bool IsShowInput = false;
    private bool IsShowCotrol = true;
    private bool IsShowTakin = false;
    Font captionFont;
    private string frameUri;
    private bool IsShowCurrent1 = false;
    [Parameter]
    public string GetIdUser { get; set; }
    RenderFragment icon = 

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.AddMarkupContent(0, "<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>");
        }
#nullable restore
#line 233 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\WaiitingPage.razor"
                                                                                  ;
    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }
    public int current { get; set; } = 0;
    public StepItem[] steps =
      {
        new StepItem {Title = "Bước 1:", Content = "Nhập Mã Do Giám Thị Cung Cấp"},
        new StepItem {Title = "Bước 2:", Content = "Tiến Hành Checkin Bằng WebCam"},
        new StepItem {Title = "Bước 3:", Content = "Xác Nhận Nội Quy"},

    };
    [Inject] public IExaminationRoomDetailRepo _examinationRoomDetailRepo { get; set; }
    [Inject] public IOnlineExamRoomRepo _onlineExamRoomRepo { get; set; }

    private byte[] GetImage;
    private List<ExaminationRoomDetail> _lstExamDetailer = new List<ExaminationRoomDetail>();
    private List<OnlineExamRoom> _lstUser = new List<OnlineExamRoom>();


    private string getEmail = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {

            _lstExamDetailer = await _examinationRoomDetailRepo.GetAllExaminationRoomDetail();
            _lstUser = await _onlineExamRoomRepo.GetAllOnlineExamRoom();
            //captionFont = SystemFonts.CreateFont("Ubuntu", 20, FontStyle.Italic);
        }

    }

    public async void CLoesed()
    {
        await JSRuntime.InvokeVoidAsync("stopVideo", "camera");
        IsShowInput = false;
        IsShowCotrol = true;
        IsShowTakin = false;
        StateHasChanged();
    }
    private async Task AcceptImage()
    {
        await JSRuntime.InvokeVoidAsync("stopVideo", "camera");
        IsShowInput = false;
        IsShowCotrol = true;
        IsShowTakin = false;
        StateHasChanged();
        current++;
    }
    private async Task JoinOnlineExamRoom()
    {
        if (string.IsNullOrEmpty(txtValue))
        {


            await Swal.FireAsync(
        "Thất Bại",
        "Mã Tham Gia Không Thể Để Trống !",
        SweetAlertIcon.Error
        );

            return;

        }


        var ExamRoom = await _examinationRoomDetailRepo.GetExaminamRoomDetailBySecret(txtValue);
        var lonebo = await _onlineExamRoomRepo.GetOnlineExamRoomById(txtValue);
        //xử lý thêm  thông tin sinh viên ở đây
        OnlineExamViewModel onlineExamViewModel = new OnlineExamViewModel()
            {
                IdUser = GetIdUser,
                SecretKey = txtValue,
                IdExaminationRoom = ExamRoom.IdExaminationRoom,
                JoinTime = DateTime.Now,
                StartTime = ExamRoom.StartTime,
                CountTurnJoin = 0,
                ChekinImage = Encoding.ASCII.GetBytes(frameUri),
                EndTime = ExamRoom.StartTime.AddMinutes(ExamRoom.TotalTimeOfExam),
                LeaveTime = ExamRoom.EndTime,
                Status = 0,
                IndexOfStudent = lonebo.Count() == 0 ? 1 : lonebo.Max(c => c.IndexOfStudent) + 1,
                Note = "",
                IsCompletedExam = false,
                IsViewExamFile = true,

            };
        var res = await _onlineExamRoomRepo.AddOnlineExamRoom(onlineExamViewModel);
        if (res)
        {
            
            await Swal.FireAsync(
        "Thành Công",
        "Vui lòng chờ điều hướng đến phòng thi ",
        SweetAlertIcon.Success
        );
         NavigationManager.NavigateTo($"/onlineroomhandler/{txtValue}/{GetIdUser}",true);
           

        }
           
        


    }
    async Task OnPreClick()
    {
        current--;
    }

    async Task OnNextClick()
    {
        current++;
    }
    //
    private bool loading;



    public async Task OnSearch()
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Xác Nhận Vào Phòng Thi",
                Text = "Bạn Có Muốn Vào Phòng Thi Hay Không ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Đồng Ý",
                CancelButtonText = "Hủy"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {

            if (_lstExamDetailer.Any(c => c.SecretKey == txtValue))
            {

                if (_lstUser.Any(c => c.SecretKey == txtValue && c.IdUser == c.IdUser))
                {
                    var lastesstUserExam = await _onlineExamRoomRepo.GetScretKeyLastestForUser(GetIdUser);
                    if (lastesstUserExam.IdUser != null)
                    {
                        var findkey =  _lstExamDetailer.FirstOrDefault(c => c.SecretKey == txtValue);
                        if (DateTime.Now >= findkey.EndTime)
                        {
                            SweetAlertResult result2 = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = $"Thông Báo",
                                    Text = "Phòng thi này đã kết thúc bạn có muốn tới trang thông báo hay không ?",
                                    Icon = SweetAlertIcon.Warning,
                                    ShowCancelButton = true,
                                    ConfirmButtonText = "Đồng Ý",
                                    CancelButtonText = "Hủy"
                                });

                            if (!string.IsNullOrEmpty(result2.Value))
                            {
                                NavigationManager.NavigateTo($"onlineroomhandler/{lastesstUserExam.SecretKey}/{GetIdUser}", true);

                            }

                            else if (result2.Dismiss == DismissReason.Cancel)
                            {

                                await Swal.FireAsync(
                                     "Thông Báo",
                                     "Hủy điều hướng",
                                     SweetAlertIcon.Error
                                     );

                                return;
                            }
                        }









                        NavigationManager.NavigateTo($"onlineroomhandler/{lastesstUserExam.SecretKey}/{GetIdUser}", true);
                        
                    }

                }
                var getcompare = _lstExamDetailer.Find(c => c.SecretKey == txtValue);

                //check làm thủ tục trước 15 phút
                if ((getcompare.StartTime - DateTime.Now).TotalMinutes >= 15)
                {

                    await Swal.FireAsync(
                                "Thông Báo",
                                $"Bạn không thể checkin vào thời điểm này, phòng thi sẽ mở checkin vào {Convert.ToDateTime(getcompare.StartTime.AddMinutes(-15))} ",
                                SweetAlertIcon.Info
                                );
                    return;
                }
                else
                {
                    if (_lstUser.Any(c => c.IdUser == GetIdUser))
                    {
                        var lastesstUserExam = await _onlineExamRoomRepo.GetScretKeyLastestForUser(GetIdUser);

                        //check xem có đang trong quá trình thi nào không nếu có thì cảnh báo ngay

                        if (lastesstUserExam.StartTime <= DateTime.Now && lastesstUserExam.EndTime >= DateTime.Now)
                        {
                            SweetAlertResult result2 = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = $"Cảnh Báo !",
                                    Text = "Bạn đã checkin và quá trình thi môn đang được diễn ra, Nếu bạn muốn thi môn khác vui lòng bấm xác nhận xóa tiến trình thi môn hiện tại",
                                    Icon = SweetAlertIcon.Warning,
                                    ShowCancelButton = true,
                                    ConfirmButtonText = "Đồng Ý",
                                    CancelButtonText = "Hủy"
                                });

                            if (!string.IsNullOrEmpty(result2.Value))
                            {
                                var rester = await _onlineExamRoomRepo.DeleteOnlineExamRoom(lastesstUserExam.SecretKey, GetIdUser);
                                if (rester)
                                {

                                    await Swal.FireAsync(
                                      "Thông Báo",
                                      "Xóa Tiến Trình Thành Công Và Tiếp Tục Checkin",
                                      SweetAlertIcon.Success
                                      );
                                    current++;
                                    IsShowCurrent1 = true;
                                }
                                else
                                {
                                    await Swal.FireAsync(
                                     "Thông Báo",
                                     "Lỗi Xóa Tiến Trình Thất Bại",
                                     SweetAlertIcon.Error
                                     );
                                    return;
                                }

                            }

                            else if (result2.Dismiss == DismissReason.Cancel)
                            {

                                await Swal.FireAsync(
                                     "Thông Báo",
                                     " Xóa Tiến Trình Thất Bại",
                                     SweetAlertIcon.Error
                                     );
                                return;

                            }





                        }
                        else
                        {

                            await Swal.FireAsync(
                        "Thành Công",
                        "Successful",
                        SweetAlertIcon.Success
                        );
                            current++;
                            IsShowCurrent1 = true;
                        }
                    }
                    else
                    {
                        await Swal.FireAsync(
                    "Thành Công",
                    "Successful",
                    SweetAlertIcon.Success
                    );
                        current++;
                        IsShowCurrent1 = true;
                    }
                }
            }
            else
            {

                await Swal.FireAsync(
            "Thất Bại",
            "Không tìm thấy mã mà bạn vừa nhập",
            SweetAlertIcon.Error
            );



            }






        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

            //ở đây xử lý khi hủy upload
            await Swal.FireAsync(
              "Hủy",
              "Đã tham gia",
              SweetAlertIcon.Error
              );
        }

    }
    bool _visible = false;
    bool _loading = false;

    private async void ShowModal()
    {

        await JSRuntime.InvokeAsync<object>("ready");
        IsShowInput = true;
        IsShowCotrol = false;
        IsShowTakin = true;
        StateHasChanged();
    }

    public async void Capture()
    {
        stringList.Clear();
      
        var stringgetter = await JSRuntime.InvokeAsync<string>("take_snapshot");

        byte[] imageData = Convert.FromBase64String(stringgetter.Split(',')[1]);

        //DrawingOptions alignCenter = new DrawingOptions()
        //    {
        //        TextOptions = new TextOptions()
        //        {
        //            VerticalAlignment = VerticalAlignment.Center,
        //            WrapTextWidth = 304, //Image is 320px wide. This will center with 8px margin on left and right
        //            HorizontalAlignment = SixLabors.Fonts.HorizontalAlignment.Center
        //        }
        //    };

        //using (var image = SixLabors.ImageSharp.Image.Load(imageData))
        //{
        //    image.Mutate(x => x
        //        .Flip(FlipMode.Horizontal) //To match mirrored webcam image
        //        .Fill(SixLabors.ImageSharp.Color.ParseHex("0008"), new RectangularPolygon(0, 220, 320, 20)) //Set footer bar for caption
        //        .DrawText(alignCenter, captionText, captionFont, SixLabors.ImageSharp.Color.White, new PointF(8, 230)) //center in footer bar)
        //    );
        //    frameUri = image.ToBase64String(JpegFormat.Instance);
        //}
        frameUri = "data:image/jpeg;base64," + Convert.ToBase64String(imageData);
        stringList.Add(frameUri);
        StateHasChanged();
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        _loading = true;
        await Task.Delay(3000);
        _visible = false;
        _loading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMessageService _message { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ModalService _modalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SweetAlertService Swal { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMessageService message { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
