// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.FPLExam
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Data.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Repositories.Interfaces.CabinProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Repositories.Interfaces.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Server.Domain.Entities.CoresParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Server.Domain.Entities.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using FPLSP.Server.Infrastructure.ViewModels.FPLExam;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/makeanexaminationroom/{getIdSubjectNonDecrpyt}/{IdLecture}/{Current}")]
    public partial class CreateExaminationRoom : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 722 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
       
    [Inject] public ISemesterBlockRepo _semesterBlockRepo { get; set; }
    [Inject] public ISemesterRepo _semesterRepo { get; set; }
    [Inject] public IBlockRepo _blockRepo { get; set; }
    [Inject] public ITrainingFacilitiesCPRepo _trainingFacilitiesCPRepo { get; set; }
    [Inject] public ISubjectUPRepo _subjectUPRepo { get; set; }
    [Inject] public IExamFileRepo _examFileRepo { get; set; }
    [Inject] public IExaminationRoomDetailRepo _examinationRoomDetailRepo { get; set; }
    [Inject] public IExaminationRoomRepo _examinationRoomRepo { get; set; }
    [Inject] public UserManager<UserSignIn> _userManager { get; set; }

    [Parameter] public string Current { get; set; }
    private List<UserSignIn> _lstUser = new List<UserSignIn>();
    string pdfContent = "";
    private ExaminationRoom examinationRoom = new ExaminationRoom();
    private List<ExaminationRoomDetailViewModel> _lstRoomDetailViews = new List<ExaminationRoomDetailViewModel>();
    private List<ExaminationRoomDetailViewModel> _lstRoomDetailViewsFlag = new List<ExaminationRoomDetailViewModel>();
    private List<ExaminationRoomDetailViewModel> _lstRoomDetailViewsDefautlt = new List<ExaminationRoomDetailViewModel>();
    private List<ExaminationRoomDetailViewModel> _lstRoomDetailViewsAdding = new List<ExaminationRoomDetailViewModel>();
    private List<ExaminationRoomDetailViewModel> preloading = new List<ExaminationRoomDetailViewModel>();
    private List<ExamStorage> _lstExam = new List<ExamStorage>();
    private DemoStepModel firstModel { get; set; } = new DemoStepModel();
    private CheckExamDate secondModel { get; set; } = new CheckExamDate();
    MudDatePicker _picker = new MudDatePicker();
    private EditContext firstContext { get; set; }
    private EditContext secondContext { get; set; }
    public bool Vertical { get; set; } = false;
    private List<SubjectDto> _lstAllSub = new List<SubjectDto>();
    private List<SemesterBlockDto> _lstSemesterBlock = new List<SemesterBlockDto>();
    private List<TrainingFacilitiesCP> _lstTraining = new List<TrainingFacilitiesCP>();
    private List<BlockDto> _lstblock = new List<BlockDto>();
    private List<SemesterDto> _lstsem = new List<SemesterDto>();
    //form diền thông tin
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    private int encounter;
    private bool LoadingMain = false;

    public string GetIdTrain = "";
    [Parameter]
    public string getIdSubjectNonDecrpyt { get; set; }
    public string getIdSubject = "";

    public string getIdBlock = "";

    public string getIdSemester = "";
    private SubjectDto getSUbject = new SubjectDto();
    private string[] Subject;
    private List<string> SemesterBlock = new List<string>();
    private static string[] Training;
    private static string[] Supervisor;
    private bool coerceValue = true;
    public int SelectedOption { get; set; }
    public bool flagBlock = false;
    public bool flagSemmerter = false;
    public bool flagTrain = false;
    [Inject] public NavigationManager navigation { get; set; }

    //
    private List<ExamStorage> _lstExamFile = new List<ExamStorage>();
    private List<ExamStorage> _lstAllExamFileFinal = new List<ExamStorage>();
    //
    private string UserName;
    TimeSpan? time = new TimeSpan(00, 45, 00);
    private DateTime? StartDate;
    private DateTime? EndDate;
    //
    private TimeSpan? timeSpanStart;
    private TimeSpan? timeSpanEnd;
    private List<KeyValueAdding> _lstkeyValueAddings = new List<KeyValueAdding>();
    private KeyValueAdding keyValueAdding = new KeyValueAdding();
    //
    private bool CheckEditting = false;
    //
    private Guid getIdExamRoom = Guid.Empty;
    private string getSecret = "";
    private string FinalSecret = "";
    private List<string> lstError = new List<string>();
    //
    // UPload File
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    private bool fileNameError = false;
    private string ErrorFileName = "";
    const double MaxFileSizeMB = 0.3;
    const double MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 200KB

    private List<ExamStorageViewModel> _lstExamFileForAdding = new List<ExamStorageViewModel>();
    private bool IsShowWaitting = false;
    public int Value { get; set; }
    //
    bool IsShowLoading = false;
    //pdf
    bool _visible = false;
    bool _confirmLoading = false;
    string _modalText = "Content of the modal";
    [Inject] public ISupervisorExamRoomRepocs supervisorExamRoomRepocs { get; set; }
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    Uri uri;
    string maxRole = "";
    [Parameter]
    public string IdLecture { get; set; }

    private List<SupervisorExamRoom> _lstDefautSupervisor = new List<SupervisorExamRoom>();
    public List<SubjectTeacherViewModel> listTeachersInSubject = new List<SubjectTeacherViewModel>();
    [Inject] public ISubjectTeacherRepo _iSubjectTeacherRepo { get; set; }


    public CreateExaminationRoomSearch createExaminationRoomSearch = new CreateExaminationRoomSearch();
    private async Task SearchTask(EditContext context)
    {
        await GetTasksSearch();
    }
    private async Task Clear()
    {
        createExaminationRoomSearch = new CreateExaminationRoomSearch();
        await GetTasksSearch();
    }
    private async Task SearchTimeOderby(int TimeOderby)
    {
        createExaminationRoomSearch.TimeOderby = TimeOderby;
        await SearchTask(null);
    }

    private async Task GetTasksSearch()
    {
        _lstRoomDetailViews = _lstRoomDetailViewsFlag;
        if (!string.IsNullOrEmpty(createExaminationRoomSearch.LectureName))
        {
            _lstRoomDetailViews = _lstRoomDetailViews.Where(c => c.ListSupervisorID.Contains(_lstUser.Where(c => c.UserName.ToLower().Contains(createExaminationRoomSearch.LectureName.ToLower())).Select(c => Guid.Parse(c.Id)).FirstOrDefault())).ToList();
        }
        if (createExaminationRoomSearch.TimeOderby != 0)
        {
            if (createExaminationRoomSearch.TimeOderby == 1)
            {
                _lstRoomDetailViews = _lstRoomDetailViews.OrderBy(c => c.StartTime).ToList();
            }
            else if (createExaminationRoomSearch.TimeOderby == 2)
            {
                _lstRoomDetailViews = _lstRoomDetailViews.OrderByDescending(c => c.StartTime).ToList();
            }
            else if (createExaminationRoomSearch.TimeOderby == 3)
            {
                _lstRoomDetailViews = _lstRoomDetailViews.OrderBy(c => c.EndTime).ToList();
            }
            else if (createExaminationRoomSearch.TimeOderby == 4)
            {
                _lstRoomDetailViews = _lstRoomDetailViews.OrderByDescending(c => c.EndTime).ToList();
            }
            //_lstShedules = createExaminationRoomSearch.TimeOderby == 1 ? _lstShedules.OrderBy(c => c.StartTime).ToList() :
            //createExaminationRoomSearch.TimeOderby == 2 ? _lstShedules.OrderByDescending(c => c.StartTime).ToList() :
            //createExaminationRoomSearch.TimeOderby == 3 ? _lstShedules.OrderBy(c => c.EndTime).ToList() :
            //createExaminationRoomSearch.TimeOderby == 4 ? _lstShedules.OrderByDescending(c => c.EndTime).ToList() : _lstShedules;
        }
        if (createExaminationRoomSearch.StartTime != null && createExaminationRoomSearch.EndTime != null)
        {
            _lstRoomDetailViews = _lstRoomDetailViews.Where(c => c.StartTime >= createExaminationRoomSearch.StartTime && c.EndTime.Date <= createExaminationRoomSearch.EndTime).ToList();
        }

    }

    protected async override Task OnInitializedAsync()
    {
        current = Convert.ToInt32(Current);
        IsShowLoading = true;
        LoadingMain = true;
        var
        uri = navigation.ToAbsoluteUri(navigation.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxRole = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdLecture = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }
        getIdSubject = _cryptoServices.Decrypt(getIdSubjectNonDecrpyt.Replace("I0H", "/"));

        getSUbject = await _subjectUPRepo.GetSubjectbyId(Guid.Parse(getIdSubject));


        await GetUserInRole();

        await GenerateToArray();

        getIdBlock = _lstSemesterBlock.Where(c => c.StartTime <= DateTime.Now && c.EndTime >= DateTime.Now).Select(c => c.IdBlock).FirstOrDefault().ToString();
        getIdSemester = _lstSemesterBlock.Where(c => c.StartTime <= DateTime.Now && c.EndTime >= DateTime.Now).Select(c => c.IdSemester).FirstOrDefault().ToString();
        await LoadingAgain();
        GetIdTrain = "169A0425-7E5A-4057-9748-32F1CF3C1479";
        await GetNameById();
        await GetListExamFile();
        LoadingMain = false;
        IsShowLoading = false;


    }
    private async Task LoadingAgain()
    {
        _lstExam = await _examFileRepo.GetAllExamFilesForOnlySubject(Guid.Parse(getIdSubject));
        preloading = await _examinationRoomDetailRepo.GetExamFileForSubject(Guid.Parse(getIdSubject));
        _lstRoomDetailViews = preloading.Where(c => c.IdBlock == Guid.Parse(getIdBlock) && c.IdSemester == Guid.Parse(getIdSemester)).ToList();
        _lstRoomDetailViewsDefautlt = preloading.Where(c => c.IdBlock == Guid.Parse(getIdBlock) && c.IdSemester == Guid.Parse(getIdSemester)).ToList();

    }
    private async Task GetNameById()
    {
        model.TrainingName = _lstTraining.Where(c => c.Id == Guid.Parse(GetIdTrain)).Select(c => c.TrainingInstitutionName).FirstOrDefault();
        model.BlockSemesterName = _lstblock.Where(c => c.Id == Guid.Parse(getIdBlock)).Select(c => c.NameOfBlock).FirstOrDefault() + "-" + _lstsem.Where(c => c.Id == Guid.Parse(getIdSemester)).Select(c => c.NameofSemester).FirstOrDefault();
    }
    private async Task GenerateToArray()
    {
        _lstAllSub = await _subjectUPRepo.GetAllSubjectAsync();
        Subject = _lstAllSub.Select(c => c.SubjectName).ToArray();
        _lstTraining = await _trainingFacilitiesCPRepo.GetTrainingFacilitiesAsync();
        _lstblock = await _blockRepo.GetAll();
        _lstsem = await _semesterRepo.GetAll();
        _lstSemesterBlock = await _semesterBlockRepo.GetAll();
        //đế blokc-kì
        string mixedstring = "";
        foreach (var semblock in _lstSemesterBlock)
        {
            foreach (var block in _lstblock.Where(c => c.Id == semblock.IdBlock))
            {
                mixedstring = block.NameOfBlock;
                foreach (var sem in _lstsem.Where(c => c.Id == semblock.IdSemester))
                {
                    mixedstring = mixedstring + "-" + sem.NameofSemester;
                }
                if (SemesterBlock.Any(c => c == mixedstring) == false)
                {
                    SemesterBlock.Add(mixedstring);
                }

            }
        }
        //
        Training = _lstTraining.Select(c => c.TrainingInstitutionName).ToArray();
        Supervisor = _lstUser.Select(c => c.Email).ToArray();

    }
    private async Task RedirectToBackManage()
    {
        var url = Path.Combine($"/manageexamfileofsubject/{_cryptoServices.Encrypt(getIdSubject.ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxRole).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdLecture).ToString()).Replace("/", "I0H")}");
        navigation.NavigateTo(url);
    }
    private async Task RedirectToBackDetail()
    {
        var url = Path.Combine($"/detaiexamstorageofsubject/{_cryptoServices.Encrypt(getIdSubject.ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt(IdLecture.ToString()).Replace("/", "I0H")}/{_cryptoServices.Encrypt(IdLecture.ToString()).Replace("/", "I0H")}?{_cryptoServices.Encrypt((maxRole).ToString()).Replace("/", "I0H")}");
        navigation.NavigateTo(url);
    }


    // UpLoad File
    private async Task GetListExamFile()
    {
        _lstExamFile = await _examFileRepo.GetAllExamFilesBySubjectId(Guid.Parse(getIdSubject));
    }
    public async Task<byte[]> FileConverter(IFileListEntry files)
    {
        using (var ms = new System.IO.MemoryStream())
        {
            await files.Data.CopyToAsync(ms);
            return ms.ToArray();
        }
    }
    bool _disposed;
    public void Dispose() => _disposed = true;
    public async Task SimulateProgress()
    {
        Value = 0;
        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 8;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);


    }
    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        dropClass = "";
        fileSizeError = false;
        fileTypeError = false;

        List<string> acceptedFileTypes = new List<string>() { "application/pdf" };
        foreach (var file in files)
        {
            bool error = false;
            if (file.Name.ToLower().Count() > 50)
            {
                error = true;
                fileNameError = true;
                ErrorFileName = file.Name;
                files.ToList().Clear();
                return;
            }
            if (_lstExamFile.Any(c => c.FileName.ToLower().Contains(file.Name.ToLower())))
            {
                error = true;
                fileNameError = true;
                ErrorFileName = file.Name;
                files.ToList().Clear();
                return;

            }
            if (file.Size > MaxFileSize)
            {

                error = true;
                fileSizeError = true;
                ErrorFileName = file.Name;
                files.ToList().Clear();
                return;
            }

            if (!acceptedFileTypes.Contains(file.Type))
            {
                error = true;
                fileTypeError = true;
                ErrorFileName = file.Name;
                files.ToList().Clear();
                return;
            }

        }

        if (files.Count() > 0)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Xác Nhận Thêm File",
                    Text = "Bạn Có Chắc Muốn Thêm File Đề Thi Này Không ?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                foreach (var file in files)
                {
                    var attachment = await FileConverter(file);
                    ExamStorageViewModel examStorageViewModel = new ExamStorageViewModel()
                        {
                            Id = Guid.NewGuid(),
                            CreateTime = DateTime.Now,
                            FileName = file.Name,
                            ExamFile = attachment,
                            IndexOfExamStorageFile = _lstExamFile.Where(c => Guid.Parse(c.IdUserUpLoad) == Guid.Parse(IdLecture)).Count() == 0 ? 1 : _lstExamFile.Where(c => Guid.Parse(c.IdUserUpLoad) == Guid.Parse(IdLecture)).Max(c => c.IndexOfExamStorageFile) + 1,
                            Status = 0,
                            Note = "",
                            IdUserUpLoad = IdLecture.ToString(),

                            DeleteTime = default,
                            SubjectId = getSUbject.Id,
                            UserNameUpload = _userManager.Users.Where(c => c.Id == IdLecture.ToString()).Select(c => c.UserName).FirstOrDefault(),
                            SubjectName = getSUbject.SubjectName,
                            SubjectCode = getSUbject.SubjectCode

                        };
                    _lstExamFileForAdding.Add(examStorageViewModel);


                }
                IsShowLoading = true;
                await InvokeAsync(() => StateHasChanged());

                var res = await _examFileRepo.AddMultipleExamFile(_lstExamFileForAdding);

                if (res)
                {
                    await Swal.FireAsync(
                    "Thêm Thành Công",
                    "Successfuly",
                    SweetAlertIcon.Success
                    );
                    _lstExamFileForAdding.Clear();
                    await GetListExamFile();
                    fileSizeError = false;
                    fileTypeError = false;
                    fileNameError = false;
                    IsShowLoading = false;
                }
                else
                {
                    await Swal.FireAsync(
                  "Thêm Thất Bại",
                  "Fail",
                  SweetAlertIcon.Error
                  );
                    _lstExamFileForAdding.Clear();
                    IsShowLoading = false;
                    await InvokeAsync(() => StateHasChanged());
                    return;
                }

            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Hủy",
                  "Đã Hủy Thêm File",
                  SweetAlertIcon.Error
                  );
                _lstExamFileForAdding.Clear();
            }




        }


    }
    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }
    private void HandleDragLeave()
    {
        dropClass = "";
    }
    private async Task ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
    // Remove File
    public async Task RemoveFile(MudChip chip)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Xác Nhận Xóa File Đề Thi",
                Text = "Bạn Có Chắc Muốn Thêm File Đề Thi Này Không ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Đồng Ý",
                CancelButtonText = "Hủy"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            //lấy ra đối tượng cần để xóa
            var getIdFile = _lstExamFile.Where(c => c.FileName == chip.Text).Select(c => c.Id).FirstOrDefault();
            IsShowLoading = true;
            InvokeAsync(() => StateHasChanged());
            await SimulateProgress();
            var res = await _examFileRepo.DeleteExamFile(getIdFile);

            if (res)
            {
                await Swal.FireAsync(
                "Xóa Thành Công",
                "Successfuly",
                SweetAlertIcon.Success
                );
                await GetListExamFile();
                IsShowLoading = false;
                await LoadingAgain();
                await InvokeAsync(() => StateHasChanged());
            }
            else
            {
                await Swal.FireAsync(
              "Xóa Thất Bại Do Đề đã được sử dụng",
              "Fail",
              SweetAlertIcon.Error
              );
                IsShowLoading = false;
                await InvokeAsync(() => StateHasChanged());
                return;
            }

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

            //ở đây xử lý khi hủy upload
            await Swal.FireAsync(
              "Hủy",
              "Đã Hủy Xóa File",
              SweetAlertIcon.Error
              );
            IsShowLoading = false;
            await InvokeAsync(() => StateHasChanged());
        }

    }
    private async Task HandleOk(MouseEventArgs e)
    {

        _confirmLoading = true;
        StateHasChanged();
        await Task.Delay(500);
        _visible = false;
        _confirmLoading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("Clicked cancel button");
        _visible = false;
    }
    private async Task ShowExamPdfFile(Guid IdExamFile)
    {
        _visible = true;
        var examshowing = _lstExam.Where(c => c.Id == IdExamFile).Select(c => c.ExamFile).FirstOrDefault();

        pdfContent = "data:application/pdf;base64,";
        pdfContent += System.Convert.ToBase64String(examshowing);
    }
    #region


    private async Task GetUserInRole()
    {
        try
        {
            foreach (var user in _userManager.Users.ToList())
            {
                var res = await _userManager.IsInRoleAsync(user, "GV FPLExam");
                if (res)
                {
                    _lstUser.Add(user);
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync(
                   "Thông Báo",
                   "Vui lòng liên hệ với daotao.poly để biết thêm chi tiết",
                   SweetAlertIcon.Error
                   );
            return;
        }

    }
    private async Task RemoveUser(string id)
    {
        try
        {
            foreach (var x in _lstRoomDetailViews.Where(c => c.IdExaminationRoom == getIdExamRoom && c.SecretKey == getSecret))
            {
                x.ListSupervisorID.Remove(Guid.Parse(id));
                await InvokeAsync(() =>
            {
            });
            }
        }catch(Exception e)
        {
            await Swal.FireAsync(
                   "Thông Báo",
                   "Vui lòng liên hệ với daotao.poly để biết thêm chi tiết",
                   SweetAlertIcon.Error
                   );
            return;
        }

    }
    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }
    private async Task<IEnumerable<string>> SearchSupervisor(string value)
    {
        try
        {
        if (_lstUser.Any(c => c.Email == value))
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Xác Nhận Thêm Giám Thị",
                    Text = $"Bạn Có Muốn Thêm Giám Thị {value} Hay Không ?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                var getId = _lstUser.Where(c => c.Email == value).Select(c => c.Id).FirstOrDefault();
                //lấy được id giảng viên rồi thì quay sang check
                var listchecker = await supervisorExamRoomRepocs.GetSupervisorById(getId);
                var examdetailmodel = _lstRoomDetailViews.Find(c => c.IdExaminationRoom == getIdExamRoom && c.SecretKey == getSecret);
                var listfianl = listchecker.Where(c => c.EndTime.Date >= DateTime.Now.Date).OrderByDescending(c => c.EndTime).ToList();
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 1321 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
                 if (examdetailmodel.ListSupervisorID.Count() == 0)
                {
                     
                   
              
                if (listfianl.Count() == 0)
                {
                    if (examdetailmodel.ListSupervisorID.Any(c => c == Guid.Parse(getId)) == false)
                    {
                        examdetailmodel.ListSupervisorID.Add(Guid.Parse(getId));
                        await Swal.FireAsync(
                 "Thành Công",
                 "Thêm Giám Thị Thành Công",
                 SweetAlertIcon.Success
                 );
                        UserName = "";
                        await InvokeAsync(() =>
       {

           StateHasChanged();
       });

                    }
                }
                else
                {
                    for (int i = 0; i < listfianl.Count(); i++)
                    {
                        if (examdetailmodel.StartTime > listfianl[0].EndTime)
                        {
                            if (examdetailmodel.ListSupervisorID.Any(c => c == Guid.Parse(getId)) == false)
                            {
                                examdetailmodel.ListSupervisorID.Add(Guid.Parse(getId));
                                await Swal.FireAsync(
                         "Thành Công",
                         "Thêm Giám Thị Thành Công Hãy Tiến Hành Lưu Dữ Liệu",
                         SweetAlertIcon.Success
                         );
                                UserName = "";
                                await InvokeAsync(() =>
               {

                   StateHasChanged();
               });
                                break;
                            }
                        }
                        else
                        {
                            i++;
                        }

                        if (examdetailmodel.StartTime < listfianl[i].EndTime && examdetailmodel.EndTime > listfianl[i - 1].StartTime)
                        {
                            await Swal.FireAsync(
        "Thất Bại",
        "Không thể xếp giảng viên vào ca này được vì bị trùng lịch",
        SweetAlertIcon.Error
        );
                            await InvokeAsync(() =>
           {

               StateHasChanged();

           });
                            break;
                        }
                        else
                        {
                            examdetailmodel.ListSupervisorID.Add(Guid.Parse(getId));
                            await Swal.FireAsync(
                     "Thành Công",
                     "Thêm Giám Thị Thành Công",
                     SweetAlertIcon.Success
                     );
                            UserName = "";
                            await InvokeAsync(() =>
           {

               StateHasChanged();
           });
                            break;
                        }
                    }
                }
                }
                else
                {
                    await Swal.FireAsync(
                "Đề Thi Này Đã Có Giám Thị",
                "Fail",
                SweetAlertIcon.Error
                );
                    UserName = "";
                    await InvokeAsync(() =>
       {

       StateHasChanged();
       });
                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1420 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\FPLExam\CreateExaminationRoom.razor"
                     

                }
                else if (result.Dismiss == DismissReason.Cancel)
                {

                    //ở đây xử lý khi hủy upload
                    await Swal.FireAsync(
                      "Hủy",
                      "Đã Hủy Thêm Giám Thị",
                      SweetAlertIcon.Error
                      );
                    await InvokeAsync(() =>
                          {

                              StateHasChanged();
                          });
                }

            }



            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return Supervisor;
            StateHasChanged();
            return Supervisor.Where(x => x.ToLower().Contains(value.ToLower(), StringComparison.InvariantCultureIgnoreCase));
        }
        catch(Exception e)
        {
            await Swal.FireAsync(
                      "Thông Báo",
                      "Vui lòng liên hệ với daotao.poly để biết thêm chi tiết",
                      SweetAlertIcon.Error
                      );
            if (string.IsNullOrEmpty(value))
                return Supervisor;
            StateHasChanged();
            return Supervisor.Where(x => x.ToLower().Contains(value.ToLower(), StringComparison.InvariantCultureIgnoreCase));
        }
    }
    private async Task CancelInStance(ExaminationRoomDetailViewModel examinationRoomDetailViewModel)
    {
        CheckEditting = false;
        examinationRoomDetailViewModel.IsEditing = false;
    }
    public async Task UpdateInstance(ExaminationRoomDetailViewModel examinationRoomDetailViewModel)
    {
        try
        {


            examinationRoomDetailViewModel.StartTime = Convert.ToDateTime(StartDate + timeSpanStart);
            examinationRoomDetailViewModel.EndTime = Convert.ToDateTime(EndDate + timeSpanEnd);

            //giờ phải kiểm tra xem thằng này là thằng mới hay là đã có trong database
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Cập Nhật Thông Tin Đề Thi {examinationRoomDetailViewModel.ExamFileName}",
                Text = "Bạn Có Muốn Cập Nhật Thông Tin Hay Không ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Đồng Ý",
                CancelButtonText = "Hủy"
            });

            if (!string.IsNullOrEmpty(result.Value))
            {


                List<ExamRoomSupervisorViewModel> _lstsupervisorExamRooms = new List<ExamRoomSupervisorViewModel>();
                //x.TotalTimeOfExam = examinationRoomDetailViewModel.TotalTimeOfExam;
                if (examinationRoomDetailViewModel.TotalTimeOfExam < 50 || examinationRoomDetailViewModel.TotalTimeOfExam > 90)
                {
                    await Swal.FireAsync(
                          "Thời lượng làm bài Chỉ được từ 50 đến 90 phút",
                          "Fail",
                          SweetAlertIcon.Error
                          );
                    return;
                }
                //if (Convert.ToInt32(examinationRoomDetailViewModel.EndTime.Minute - examinationRoomDetailViewModel.StartTime.Minute) != 120)
                //{
                //   var error = "Giờ kết thúc phải lớn hơn giờ bắt đầu là 2 giờ";
                //    lstError.Add(error);
                //}
                if (examinationRoomDetailViewModel.StartTime <= DateTime.Now)
                {
                    await Swal.FireAsync(
                         "Ngày và giờ bắt đầu phải lớn hơn ngày hiện tại",
                         "Fail",
                         SweetAlertIcon.Error
                         );
                    return;

                }
                if (examinationRoomDetailViewModel.EndTime.ToLongDateString() != examinationRoomDetailViewModel.StartTime.ToLongDateString())
                {
                    await Swal.FireAsync(
                        "Ngày Kết thúc phải bằng ngày bắt đầu",
                        "Fail",
                        SweetAlertIcon.Error
                        );
                    return;
                }
                if (examinationRoomDetailViewModel.StartTime.AddMinutes(examinationRoomDetailViewModel.TotalTimeOfExam) > examinationRoomDetailViewModel.EndTime)
                {
                    await Swal.FireAsync(
                        "Thời gian làm bài phải nhỏ thời gian kết thúc",
                        "Fail",
                        SweetAlertIcon.Error
                        );
                    return;



                }
                LoadingMain = true;
                await InvokeAsync(() => StateHasChanged());
                var res = false;
                var addres = false;
                if (_lstRoomDetailViewsDefautlt.Any(c => c == examinationRoomDetailViewModel))
                {

                    examinationRoomDetailViewModel.Status = 0;
                    res = await _examinationRoomDetailRepo.UpdatingExamRoomDtail(examinationRoomDetailViewModel);
                }
                var comparelistsupervisor = _lstDefautSupervisor.Where(c => c.IdExaminationRoom == examinationRoomDetailViewModel.IdExaminationRoom && c.SecretKey == examinationRoomDetailViewModel.SecretKey).Select(c => c.IdLecturter).ToList();
                bool same = comparelistsupervisor.Select(x => x).ToHashSet().SetEquals(examinationRoomDetailViewModel.ListSupervisorID.Select(x => x));

                if (res)
                {
                    if (!same)
                    {


                        if (examinationRoomDetailViewModel.ListSupervisorID.Count() > 0)
                        {
                            foreach (var x in examinationRoomDetailViewModel.ListSupervisorID)
                            {

                                ExamRoomSupervisorViewModel supervisorExamRoom = new ExamRoomSupervisorViewModel()
                                {
                                    IdLecturter = x,
                                    EndTime = examinationRoomDetailViewModel.EndTime,
                                    StartTime = examinationRoomDetailViewModel.StartTime,
                                    SecretKey = examinationRoomDetailViewModel.SecretKey,
                                    IdExaminationRoom = examinationRoomDetailViewModel.IdExaminationRoom,
                                    Status = 0,
                                    SubjectName = "",
                                    IsMainSupervisor = true,
                                    Note = "",
                                    CountDown = ""
                                };
                                _lstsupervisorExamRooms.Add(supervisorExamRoom);
                            }
                            addres = await supervisorExamRoomRepocs.AddingRangeSupervisorExamRoom(_lstsupervisorExamRooms);
                            if (res & addres)
                            {

                                await Swal.FireAsync(
                                "Cập Nhật Thông Tin Thành Công",
                                "Successfuly",
                                SweetAlertIcon.Success
                                );
                                CheckEditting = false;
                                await LoadingAgain();
                                await InvokeAsync(() => StateHasChanged());

                                examinationRoomDetailViewModel.IsEditing = false;
                                LoadingMain = false;
                            }
                            else
                            {
                                await Swal.FireAsync(
                           "Cập Nhật Thất Bại",
                           "Fail",
                           SweetAlertIcon.Error
                           );

                                CheckEditting = false;
                                examinationRoomDetailViewModel.IsEditing = false;
                                LoadingMain = false;
                                await LoadingAgain();
                                await InvokeAsync(() => StateHasChanged());
                            }


                        }

                    }
                    else
                    {
                        await Swal.FireAsync(
                                "Cập Nhật Thông Tin Thành Công",
                                "Successfuly",
                                SweetAlertIcon.Success
                                );
                        CheckEditting = false;
                        await LoadingAgain();
                        await InvokeAsync(() => StateHasChanged());

                        examinationRoomDetailViewModel.IsEditing = false;
                        LoadingMain = false;
                    }
                }
                else
                {
                    await Swal.FireAsync(
               "Cập Nhật Thất Bại",
               "Fail",
               SweetAlertIcon.Error
               );

                    CheckEditting = false;
                    examinationRoomDetailViewModel.IsEditing = false;
                    LoadingMain = false;
                    await LoadingAgain();
                    await InvokeAsync(() => StateHasChanged());
                }



            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Hủy",
                  "Đã Hủy Cập Nhật",
                  SweetAlertIcon.Error
                  );

                CheckEditting = false;
                examinationRoomDetailViewModel.IsEditing = false;
                await InvokeAsync(() => StateHasChanged());
            }
        }
        catch(Exception e)
        {
            await Swal.FireAsync(
                      "Thông Báo",
                      "Vui lòng liên hệ với daotao.poly để biết thêm chi tiết",
                      SweetAlertIcon.Error
                      );
            return;
        }
    }
    public async Task ReloadPass(ExaminationRoomDetailViewModel examinationRoomDetailViewModel)
    {
        examinationRoomDetailViewModel.SecretKey = _examinationRoomDetailRepo.RandomString(10);
        FinalSecret = examinationRoomDetailViewModel.SecretKey;
        if (_lstkeyValueAddings.Count() > 0)
        {
            foreach (var x in _lstkeyValueAddings.Where(c => c.SecretKey == examinationRoomDetailViewModel.SecretKey))
            {
                x.SecretKey = examinationRoomDetailViewModel.SecretKey;
            }
        }
    }

    public int current { get; set; } = 0;
    public StepItem[] steps =
    {
        new StepItem {Title = "Bước 1:", Content = "Điền Thông Tin Phòng Thi"},
        new StepItem {Title = "Bước 2:", Content = "Thêm Đề Thi Cho Môn & Thời Gian Thi"},

    };

    async Task OnPreClick()
    {


        current--;


    }

    async Task OnNextClick()
    {


        current++;






    }
    public async Task DeleteInstane(ExaminationRoomDetailViewModel examinationRoomDetailViewModel)
    {
        try
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Xóa Đề Thi {examinationRoomDetailViewModel.ExamFileName}",
                    Text = "Bạn Có Muốn Xóa Đề Thi Này Hay Không ?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                var res = false;
                LoadingMain = true;
                await InvokeAsync(() => StateHasChanged());
                res = await _examinationRoomDetailRepo.DeletingExamRoomDtail(examinationRoomDetailViewModel);

                if (res)
                {

                    await Swal.FireAsync(
                    "Xóa Đề Đề Thi Thành Công",
                    "Successfuly",
                    SweetAlertIcon.Success
                    );
                    _lstRoomDetailViews.Remove(examinationRoomDetailViewModel);
                    if (_lstkeyValueAddings.Count() > 0)
                    {
                        var findIdExamFile = _lstkeyValueAddings.Find(c => c.SecretKey == examinationRoomDetailViewModel.SecretKey);
                        _lstkeyValueAddings.Remove(findIdExamFile);
                    }
                    LoadingMain = false;
                    await LoadingAgain();
                    await InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    Swal.FireAsync(
                 "Xóa Thất Bại",
                 "Fail",
                 SweetAlertIcon.Error
                 );
                    LoadingMain = false;
                    await InvokeAsync(() => StateHasChanged());
                }

            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Hủy",
                  "Đã Hủy Xóa Đề Thi Chính Thức",
                  SweetAlertIcon.Error
                  );
                LoadingMain = false;
                await InvokeAsync(() => StateHasChanged());
            }
        }catch(Exception e)
        {
            await Swal.FireAsync(
                     "Thông Báo",
                     "Vui lòng liên hệ với daotao.poly để biết thêm chi tiết",
                     SweetAlertIcon.Error
                     );
            return;
        }




    }
    private async Task AddExamFile(Guid Id)
    {
        try
        {


            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Xác Nhận Thêm Đề Thi Chính Thức",
                Text = "Bạn có muốn thêm đề thi này làm đề thi chính thức không ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Đồng Ý",
                CancelButtonText = "Hủy"
            });

            if (!string.IsNullOrEmpty(result.Value))
            {
                LoadingMain = true;
                await InvokeAsync(() => StateHasChanged());
                ExaminationRoomDetailViewModel examinationRoomDetailViewModel = new ExaminationRoomDetailViewModel()
                {
                    IdExaminationRoom = Guid.NewGuid(),
                    SecretKey = _examinationRoomDetailRepo.RandomString(10),
                    IndexOfExaminationRoomDetail = _lstRoomDetailViews.Count() == 0 ? 1 : _lstRoomDetailViews.Max(c => c.IndexOfExaminationRoomDetail) + 1,
                    Status = 0,
                    Note = "",
                    ExamFileName = _lstExam.Where(c => c.Id == Id).Select(c => c.FileName).FirstOrDefault() == null ? "dethimoi" + _lstExam.Count.ToString() : _lstExam.Where(c => c.Id == Id).Select(c => c.FileName).FirstOrDefault(),
                    TotalTimeOfExam = 50,
                    StartTime = DateTime.Now.AddDays(1),
                    EndTime = DateTime.Now.AddDays(1).AddHours(2),
                    IdExamFile = Id,
                    IdSubject = Guid.Parse(getIdSubject),
                    IdBlock = Guid.Parse(getIdBlock),
                    IdSemester = Guid.Parse(getIdSemester),
                    BlockName = _lstblock.Where(c => c.Id == Guid.Parse(getIdBlock)).Select(c => c.NameOfBlock).FirstOrDefault(),
                    SemesterName = _lstsem.Where(c => c.Id == Guid.Parse(getIdSemester)).Select(c => c.NameofSemester).FirstOrDefault(),
                    SubjectName = getSUbject.SubjectName,
                    ExaminationRoomName = "",
                    ListStudentId = new List<string>(),
                    ListSupervisorID = new List<Guid>()
                };
                _lstRoomDetailViewsAdding.Add(examinationRoomDetailViewModel);
                //
                KeyValueAdding keyValueAdding = new KeyValueAdding()
                {
                    IdExamFile = Id,
                    StartTime = DateTime.Now.AddDays(1),
                    EndTime = DateTime.Now.AddDays(1).AddHours(2),
                    TotalTimeOfExam = 50,

                    SecretKey = examinationRoomDetailViewModel.SecretKey,
                    Status = 6,
                    Note = "",
                    ListIdStudent = new List<string>(),
                    ListSupervisorID = new List<Guid>()
                };
                _lstkeyValueAddings.Add(keyValueAdding);

                if (_lstRoomDetailViewsDefautlt.Count() == 0)
                {
                    var IdExaminationRoomDetail = Guid.NewGuid();
                    ExaminationRoomDetailView examinationRoomDetailView = new ExaminationRoomDetailView()
                    {
                        Id = IdExaminationRoomDetail,
                        ExaminationRoomName = $"Phòng Thi Môn {getSUbject.SubjectName}",
                        CreateTime = DateTime.Now,
                        IndexOfExaminationRoom = 1,
                        Status = 0,
                        IdTrainingFacility = Guid.Parse(GetIdTrain),
                        TrainingFacilityName = "Hà Nội"
                    };
                    var checkfirststep = await _examinationRoomRepo.AddExaminationRoom(examinationRoomDetailView);
                    if (checkfirststep)
                    {
                        ExamDetaiRoomForAdding examDetaiRoomForAdding = new ExamDetaiRoomForAdding()
                        {

                            IdExaminationRoom = IdExaminationRoomDetail,
                            IdSubject = Guid.Parse(getIdSubject),
                            IdSemester = Guid.Parse(getIdSemester),
                            IdBlock = Guid.Parse(getIdBlock),
                            keyValueAdding = _lstkeyValueAddings
                        };
                        var resvailone = await _examinationRoomDetailRepo.AddingRangeExamRoomDtail(examDetaiRoomForAdding);
                        if (resvailone)
                        {
                            await Swal.FireAsync(
                                      "Thêm Thành Công Vào Danh Sách Đề",
                                      "Hãy tiến hành thêm giảng viên thôi nào",
                                      SweetAlertIcon.Success
                                      );


                            _lstkeyValueAddings.Clear();
                            await LoadingAgain();
                            LoadingMain = false;
                            await InvokeAsync(() => StateHasChanged());


                        }
                        else
                        {
                            await Swal.FireAsync(
                    "Thêm Thất Bại",
                    "Failed",
                    SweetAlertIcon.Error
                    );
                            await LoadingAgain();
                            LoadingMain = false;
                            await InvokeAsync(() => StateHasChanged());
                        }

                    }
                }
                else
                {
                    var getIdRoom = _lstRoomDetailViews.Where(c => c.IdSubject == Guid.Parse(getIdSubject)).Select(c => c.IdExaminationRoom).FirstOrDefault();
                    ExamDetaiRoomForAdding examDetaiRoomForAdding = new ExamDetaiRoomForAdding()
                    {

                        IdExaminationRoom = getIdRoom,
                        IdSubject = Guid.Parse(getIdSubject),
                        IdSemester = Guid.Parse(getIdSemester),
                        IdBlock = Guid.Parse(getIdBlock),
                        keyValueAdding = _lstkeyValueAddings
                    };
                    var resvailone = await _examinationRoomDetailRepo.AddingRangeExamRoomDtail(examDetaiRoomForAdding);
                    if (resvailone)
                    {
                        await Swal.FireAsync(
                                  "Thêm Thành Công Vào Danh Sách Đề",
                                  "Hãy tiến hành thêm giảng viên thôi nào",
                                  SweetAlertIcon.Success
                                  );
                        await LoadingAgain();
                        LoadingMain = false;

                        _lstkeyValueAddings.Clear();
                        _lstRoomDetailViewsAdding.Clear();
                        await InvokeAsync(() => StateHasChanged());


                    }
                    else
                    {
                        await Swal.FireAsync(
                "Thêm Thất Bại",
                "Failed",
                SweetAlertIcon.Error
                );
                        _lstkeyValueAddings.Clear();
                        _lstRoomDetailViewsAdding.Clear();
                        LoadingMain = false;
                        await InvokeAsync(() => StateHasChanged());
                    }

                }
            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Đã hủy Thêm File",
                  "",
                  SweetAlertIcon.Error
                  );
                LoadingMain = false;
                await InvokeAsync(() => StateHasChanged());
            }
        }
        catch(Exception e)
        {
            
        }



    }
    private async Task EnableEditing(bool flag, ExaminationRoomDetailViewModel instanceData)
    {
        if (CheckEditting == false)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Xác Nhận Chỉnh Sửa {instanceData.ExamFileName}",
                    Text = $"Bạn Có Muốn Tiến Hành Chỉnh Sửa {instanceData.ExamFileName} Hay Không ?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                instanceData.IsEditing = flag;
                CheckEditting = true;
                getIdExamRoom = instanceData.IdExaminationRoom;
                getSecret = instanceData.SecretKey;
                EndDate = instanceData.EndTime.Date;
                timeSpanStart = instanceData.StartTime.TimeOfDay;
                timeSpanEnd = instanceData.EndTime.TimeOfDay;
                StartDate = instanceData.StartTime.Date;
                var lstLecture = await _examinationRoomDetailRepo.GetAllLectureAddExam();
                var LstExaminationRoomDetailExist = _lstRoomDetailViews.Where(c => c.StartTime >= instanceData.StartTime && c.EndTime <= instanceData.EndTime).ToList();
                foreach (var ExaminationRoomDetailExist in LstExaminationRoomDetailExist)
                {
                    var lstIdlectureInExam = _lstDefautSupervisor.Where(c => c.IdExaminationRoom == ExaminationRoomDetailExist.IdExaminationRoom && c.SecretKey == ExaminationRoomDetailExist.SecretKey).Select(c => c.IdLecturter).ToList();
                    var lectureInExam = lstLecture.Where(c => lstIdlectureInExam.Contains(c.Id)).ToList();
                    foreach (var lecture in lectureInExam)
                    {
                        lstLecture.Remove(lecture);
                    }
                }

            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Hủy",
                  "Đã Hủy Đi Đến Chỉnh Sửa",
                  SweetAlertIcon.Error
                  );
            }

        }
        else
        {
            await Swal.FireAsync(
                "Cảnh Báo",
                "Không Thể Thực Hiện Chỉnh Sửa Nhiều File Cùng 1 Thời Điểm Vui Lòng Hoàn Tất Cập Nhật Hiện Tại",
                SweetAlertIcon.Error
                );
        }




    }
    private async Task Today()
    {
        await _picker.GoToDate(DateTime.Today);
    }
    private async Task SendAlert(string message)
    {
        // await JSRuntime.InvokeVoidAsync("DemoSite.Alert", "Clicked Staus - " + message);
    }
    private async Task AddUserToExamFile(string Iduser)
    {

    }
    private void OnSelectedOptionChanged(int selectedOption)
    {
        model.Status = selectedOption;
        StateHasChanged();
    }
    private async Task<IEnumerable<string>> SearchBlockSemester(string value)
    {

        if (string.IsNullOrEmpty(value))
            return SemesterBlock;
        if (SemesterBlock.ToList().Any(c => c == value))
        {
            var newchar = value.Split("-").ToList();

            getIdBlock = _lstblock.Where(c => c.NameOfBlock == newchar[0]).Select(c => c.Id).FirstOrDefault().ToString();
            getIdSemester = _lstsem.Where(c => c.NameofSemester == newchar[1]).Select(c => c.Id).FirstOrDefault().ToString();

        }
        return SemesterBlock.Where(x => x.ToLower().Contains(value.ToLower(), StringComparison.InvariantCultureIgnoreCase));
    }
    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string RoomName { get; set; }

        [Required]
        public string BlockSemesterName { get; set; }
        [Required]
        public string TrainingName { get; set; }

        [Required]
        public string SubjectName { get; set; }

        [Required]
        public int Status { get; set; }

        public string Note { get; set; }

    }
    public class CheckExamDate
    {
        [Required]

        public DateTime? ExamDay { get; set; } = DateTime.Now.AddDays(1);
    }
    private async Task<IEnumerable<string>> SearchSubjcet(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.


        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return Subject;
        return Subject.Where(x => x.ToLower().Contains(value.ToLower(), StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task OnValidSubmit(EditContext context)
    {
        success = true;
        await InvokeAsync(() => StateHasChanged());
    }

    private IEnumerable<string> Validate(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return "email không hợp lệ";
            yield break;
        }

        if (!Supervisor.Contains(value))
        {
            yield return "không tìm thấy tài khoản giám thị";
        }
    }

    private IEnumerable<string> ValidateForTrain(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return "Cơ Sở Không Được Để Trống";
            yield break;
        }

        if (!Training.Contains(value))
        {
            yield return "không tìm thấy cơ sở";
        }
    }
    private IEnumerable<string> ValidateForBlock(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return "Block-Kì Không Được Phép Để Trống";
            yield break;
        }

        if (!SemesterBlock.Contains(value))
        {
            yield return "Không Tìm Thấy Block-Kì";
        }
    }


    private async Task<IEnumerable<string>> SearchTrain(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value)) return Training;
        GetIdTrain = _lstTraining.Where(c => c.TrainingInstitutionName.ToLower() == value.ToLower()).Select(c => c.Id).FirstOrDefault().ToString();
        return Training.Where(x => x.ToLower().Contains(value.ToLower(), StringComparison.InvariantCultureIgnoreCase));
    }
    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter)]
    public sealed class StateAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (!Supervisor.Contains(value))
            {
                return new ValidationResult("This is an incorrect value", new[] { validationContext.MemberName });
            }

            return null;
        }
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SweetAlertService Swal { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMessageService message { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
