// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.SpecializedCPPages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\SpecializedCPPages\SpecializedCPUpdate.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\SpecializedCPPages\SpecializedCPUpdate.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\SpecializedCPPages\SpecializedCPUpdate.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\SpecializedCPPages\SpecializedCPUpdate.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\SpecializedCPPages\SpecializedCPUpdate.razor"
using FPLSP.Server.Infrastructure.ViewModels.Specialized;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\SpecializedCPPages\SpecializedCPUpdate.razor"
           [Authorize(Roles = "AdminCore,AdminCS")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/updateSpecializedCP/{idNonDecrypt}")]
    public partial class SpecializedCPUpdate : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 104 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\SpecializedCPPages\SpecializedCPUpdate.razor"
       
    [Parameter]
    public string idNonDecrypt { get; set; }
    [Parameter]
    public string image { get; set; }
    public string id = "";
    [Inject]
    public ISpecializedCPRepo _specializedCPRepo { get; set; }
    public SpecializedVM request = new SpecializedVM();
    public SpecializedDto _specializedCP = new SpecializedDto();
    public List<SpecializedDto> _lstLevel0 = new List<SpecializedDto>();
    public Guid _parentId = new Guid();
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    [Parameter]
    public string _error { get; set; }
    [Inject]
    public IToastService ToastService { get; set; }
    public int _level { get; set; } = 0;
    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";
   
    protected override async Task OnInitializedAsync()
    {
        uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }
     
        id = _cryptoServices.Decrypt(idNonDecrypt.Replace("I0H", "/"));
        _specializedCP = await _specializedCPRepo.GetbyId(Guid.Empty, Guid.Parse(id));
        request.SpecializedCode = _specializedCP.SpecializedCode.Trim();
        request.SpecializationName = _specializedCP.SpecializationName;
        request.Status = _specializedCP.Status;
        request.Image = _specializedCP.Image;
        _level = _specializedCP.Level;
        image = _specializedCP.Image;
        if (_specializedCP.IdSpeciality != null)
        {
            var pID = _specializedCP.IdSpeciality.ToString();
            _parentId = Guid.Parse(pID);
        }
        _lstLevel0 = await _specializedCPRepo.GetAll();
        _lstLevel0 = _lstLevel0.Where(x => x.Level == 0).ToList();


    }
    public bool checkName(string x)
    {
        foreach (char c in x)
        {
            if (!Char.IsLetter(c) && c.ToString() != " ")
                return false;
        }
        return true;
    }
    public bool checkCode(string x)
    {
        foreach (char c in x)
        {
            if (!Char.IsLetter(c) && !Char.IsDigit(c) && c.ToString() != "#")
                return false;
        }
        return true;
    }
    public bool checkNumber(string x)
    {
        foreach (char c in x)
        {
            if (!Char.IsDigit(c))
                return false;
        }
        return true;
    }
    private async Task Update()
    {
        var lstSpecializedCP = await _specializedCPRepo.GetAll();

        if (!checkName(request.SpecializationName))
        {
            ToastService.ShowError("Tên không được chứa số và ký tự đặc biệt", "Error");
        }
        else if (_parentId == Guid.Empty)
        {
            if (string.IsNullOrEmpty(request.SpecializedCode))
            {
                ToastService.ShowError("Mã không được để trống", "Error");
            }
            else if (!checkCode(request.SpecializedCode))
            {
                ToastService.ShowError("Mã không được chứa khoảng trắng và ký tự đặc biệt", "Error");
            }
            else
            {
                if (request.SpecializedCode != _specializedCP.SpecializedCode)
                {
                    var temp = lstSpecializedCP.FirstOrDefault(x => x.SpecializedCode == request.SpecializedCode && x.Level == 0);

                    if (temp != null)
                    {
                        ToastService.ShowError("Mã chuyên ngành đã tồn tại", "Error");
                        Navigation.NavigateTo($"/updateSpecializedCP/{id}");
                    }
                    else
                    {
                        var result = await _specializedCPRepo.Update(Guid.Empty, Guid.Parse(id), request);

                        if (result != 1)
                        {
                            ToastService.ShowError("Cập nhật chuyên ngành lớn thất bại", "Error");
                            Navigation.NavigateTo($"/updateSpecializedCP/{id}");
                        }
                        else
                        {
                            ToastService.ShowSuccess("Cập nhật chuyên ngành lớn thành công", "Success");
                            Navigation.NavigateTo("/manageSpecializedCP");
                            this.StateHasChanged();
                        }
                    }
                }
                else
                {
                    var result = await _specializedCPRepo.Update(Guid.Empty, Guid.Parse(id), request);

                    if (result != 1)
                    {
                        ToastService.ShowError("Cập nhật chuyên ngành lớn thất bại", "Error");
                        Navigation.NavigateTo($"/updateSpecializedCP/{id}");
                    }
                    else
                    {
                        ToastService.ShowSuccess("Cập nhật chuyên ngành lớn thành công", "Success");
                        Navigation.NavigateTo("/manageSpecializedCP");
                        this.StateHasChanged();
                    }
                }
            }

        }
        else if (_parentId != Guid.Empty)
        {
            if (request.SpecializedCode != _specializedCP.SpecializedCode)
            {
                if (lstSpecializedCP.FirstOrDefault(x => x.SpecializedCode == request.SpecializedCode && x.Id == _parentId) == null)
                {
                    var temp = lstSpecializedCP.FirstOrDefault(x => x.SpecializedCode == request.SpecializedCode && x.Level == 1 && x.IdSpeciality == _parentId);

                    if (temp != null)
                    {
                        ToastService.ShowError("Mã chuyên ngành đã tồn tại", "Error");
                        Navigation.NavigateTo($"/updateSpecializedCP/{id}");
                    }
                    else
                    {
                        var result = await _specializedCPRepo.Update(_parentId, Guid.Parse(id), request);

                        if (result != 1)
                        {
                            ToastService.ShowError("Cập nhật chuyên ngành hẹp thất bại", "Error");
                            Navigation.NavigateTo($"/updateSpecializedCP/{id}");
                        }
                        else
                        {
                            ToastService.ShowSuccess("Cập nhật chuyên ngành hẹp thành công", "Success");
                            Navigation.NavigateTo("/manageSpecializedCP");
                            this.StateHasChanged();
                        }
                    }
                }
                else
                {
                    ToastService.ShowError("Mã chuyên ngành hẹp không được trùng với chuyên ngành lớn", "Error");
                }
            }
            else
            {
                var result = await _specializedCPRepo.Update(_parentId, Guid.Parse(id), request);

                if (result != 1)
                {
                    ToastService.ShowError("Cập nhật chuyên ngành hẹp thất bại", "Error");
                    Navigation.NavigateTo($"/updateSpecializedCP/{id}");
                }
                else
                {
                    ToastService.ShowSuccess("Cập nhật chuyên ngành hẹp thành công", "Success");
                    Navigation.NavigateTo("/manageSpecializedCP");
                    this.StateHasChanged();
                }
            }
        }
        else
        {
            ToastService.ShowError("Cập nhật chuyên ngành lớn thất bại", "Error");
        }

    }

    public async void Undo()
    {
        _specializedCP = await _specializedCPRepo.GetbyId(Guid.Empty, Guid.Parse(id));
        request.SpecializedCode = _specializedCP.SpecializedCode;
        request.SpecializationName = _specializedCP.SpecializationName;
        request.Status = _specializedCP.Status;
        request.Image = _specializedCP.Image;
        _level = _specializedCP.Level;
        image = _specializedCP.Image;
        if (_specializedCP.IdSpeciality != null)
        {
            var pID = _specializedCP.IdSpeciality.ToString();
            _parentId = Guid.Parse(pID);
        }

    }
    private void AssignImageUrl(string imgUrl)
    {
        request.Image = imgUrl;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
