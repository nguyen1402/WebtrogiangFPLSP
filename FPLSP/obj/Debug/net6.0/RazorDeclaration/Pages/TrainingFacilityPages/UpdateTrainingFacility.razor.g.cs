// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.TrainingFacilityPages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\TrainingFacilityPages\UpdateTrainingFacility.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\TrainingFacilityPages\UpdateTrainingFacility.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\TrainingFacilityPages\UpdateTrainingFacility.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\TrainingFacilityPages\UpdateTrainingFacility.razor"
using FPLSP.Server.Infrastructure.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\TrainingFacilityPages\UpdateTrainingFacility.razor"
using FPLSP.Server.Infrastructure.ViewModels.TrainingFacilitiesCPVm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\TrainingFacilityPages\UpdateTrainingFacility.razor"
           [Authorize(Roles = "AdminCore,AdminCS")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/updatetf/{id}")]
    public partial class UpdateTrainingFacility : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 110 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\TrainingFacilityPages\UpdateTrainingFacility.razor"
       

    [Parameter]
    public string image { get; set; }
    private TrainingFacilitiesCPRequest tfInput = new TrainingFacilitiesCPRequest();
    [Inject]
    public NavigationManager Navigation { get; set; }

    [Inject]
    public ITrainingFacilitiesCPRepo _tfRepositories { get; set; }

    public bool ShowAuthError { get; set; }
    [Parameter]
    public string Error { get; set; }

    [Parameter]

    public string id { get; set; }
    public string imgPath { get; set; } = "";
    public bool checkImg { get; set; } = false;

    [Inject]
    public IToastService ToastService { get; set; }
    public TrainingFacilitiesCPViewModel tfInputVm { get; set; } = new TrainingFacilitiesCPViewModel();
    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    protected override async Task OnInitializedAsync()
    {
        uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }
      
        tfInputVm = await _tfRepositories.GetTrainingFacilityListById(Guid.Parse(id));
        tfInput.TrainingFacilitiesCode = tfInputVm.TrainingFacilitiesCode;
        tfInput.TrainingInstitution = tfInputVm.TrainingInstitution;
        tfInput.TrainingInstitutionName = tfInputVm.TrainingInstitutionName;
        tfInput.Status = tfInputVm.Status;
        tfInput.ImageUrl = tfInputVm.ImageUrl;

        //imgPath = $"{_hostingEnvironment.WebRootPath}\\css\\images\\TrainingFacilityCP\\{tfInput.ImageUrl}";
        imgPath = $"\\css\\images\\TrainingFacilityCP\\{tfInput.ImageUrl}";
        checkImg = File.Exists(imgPath);
    }

    private async Task Update()
    {
        bool check = true;
        foreach (char c in tfInput.TrainingInstitutionName)
        {
            if (!Char.IsLetter(c) && c.ToString() != " ")
                check = false;
        }
        if (check)
        {
            if (tfInput.TrainingInstitution != tfInputVm.TrainingInstitution || tfInput.TrainingInstitutionName != tfInputVm.TrainingInstitutionName)
            {
                var lstTF = await _tfRepositories.GetTrainingFacilitiesAsync();
                var temp = lstTF.FirstOrDefault(x => x.TrainingInstitution == tfInput.TrainingInstitution && x.TrainingInstitutionName == tfInput.TrainingInstitutionName);

                if (temp != null)
                {
                    ToastService.ShowError("Cơ sở đã tồn tại", "Error");
                    Navigation.NavigateTo($"/updatetf/{id}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
                }
                else
                {
                    ShowAuthError = false;
                    var result = await _tfRepositories.UpdateTrainingFacility(Guid.Parse(id), tfInput);

                    if (result != true)
                    {
                        ToastService.ShowError("Cập nhật cơ sở đào tạo thất bại", "Error");
                        Navigation.NavigateTo($"/updatetf/{id}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
                    }
                    else
                    {
                        ToastService.ShowSuccess("Cập nhật cơ sở đào tạo thành công", "Success");
                        Navigation.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace(" / ", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace(" / ", "I0H")}");
                        this.StateHasChanged();
                    }
                }
            }
            else
            {
                ShowAuthError = false;
                var result = await _tfRepositories.UpdateTrainingFacility(Guid.Parse(id), tfInput);

                if (result != true)
                {
                    ToastService.ShowError("Cập nhật cơ sở đào tạo thất bại", "Error");
                    Navigation.NavigateTo($"/updatetf/{id}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
                }
                else
                {
                    ToastService.ShowSuccess("Cập nhật cơ sở đào tạo thành công", "Success");
                    Navigation.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace(" / ", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace(" / ", "I0H")}");
                    this.StateHasChanged();
                }
            }
        }
        else
        {
            ToastService.ShowError("Tên không được chứa số và ký tự đặc biệt", "Error");
        }
    }

    private async Task Undo()
    {
        image = tfInput.ImageUrl;
        var tfInputvm = await _tfRepositories.GetTrainingFacilityListById(Guid.Parse(id));
        tfInput.TrainingFacilitiesCode = tfInputvm.TrainingFacilitiesCode;
        tfInput.TrainingInstitution = tfInputvm.TrainingInstitution;
        tfInput.TrainingInstitutionName = tfInputvm.TrainingInstitutionName;
        tfInput.Status = tfInputvm.Status;
        tfInput.ImageUrl = tfInputvm.ImageUrl;
    }

    private async Task Create()
    {
        var result = await _tfRepositories.CreateTrainingFacility(tfInput);

        if (result != true)
        {
            Navigation.NavigateTo($"/createtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        }
        else
        {
            Navigation.NavigateTo($"/listtf?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace(" / ", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace(" / ", "I0H")}");
            this.StateHasChanged();
        }

    }
    private async void OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png") || e.File.Name.ToLower().Contains(".jpg") || e.File.Name.ToLower().Contains(".gif"))
        {
            var selectedFiles = e.File;
            tfInput.ImageUrl = await _tfRepositories.LoadingImageUrl(selectedFiles, tfInput.TrainingFacilitiesCode);
            this.StateHasChanged();
        }
        else
        {
            tfInput.ImageUrl = e.File.Name;
            ToastService.ShowError("Ảnh không hợp lệ", "Error");
            this.StateHasChanged();
        }
    }
    private void AssignImageUrl(string imgUrl)
    {
        imgUrl = imgUrl.Replace("https://localhost:5001/StaticFiles\\Images\\", "");
        tfInput.ImageUrl = imgUrl;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
