// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.CabinProject.ManageCabin
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
using FPLSP.Repositories.Interfaces.CabinProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
using FPLSP.Server.Data.SeedWork;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.BookingRequest;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.Cabin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
           [Authorize(Roles = "DirectorOfTraining")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/managecabin/{IdTrain}")]
    public partial class ManagaCabin : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 128 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\ManageCabin\ManagaCabin.razor"
       

    [Inject] private ICabinRepo cabin { get; set; }
    [Inject] private IGroupCabinRepo groupCabinRepo { get; set; }
    [Inject] private IBookingRequestRepo _bookingRequestRepo { get; set; }
    [Inject] private IBookingCabinApiClient _bookingCabinApiClient { get; set; }
    [Inject] private ILecturersCPRepo lecturersCPRepo { get; set; }
    [Inject] IShiftOfCabinApiClient shiftOfCabinApiClient { get; set; }
    [Inject] private CryptoServices cryptoServices { get; set; }
    List<CabinViewModel> lstcabinViewModel = new List<CabinViewModel>();
    CabinSearchViewModel cabinSearchViewModel = new CabinSearchViewModel();
    public MetaData MetaData { get; set; } = new MetaData();
    protected RemoveCabin DeleteConfirmation { get; set; }
    protected ManageCabinAdd manageCabinAdd { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    Guid Id;
    string nameLec { get; set; }
    [Parameter] public string IdTrain { get; set; }
    private void OpenDialog()
    {
        manageCabinAdd.show();
    }
    protected override async Task OnInitializedAsync()
    {
        IdTrain = cryptoServices.Decrypt(IdTrain.ToString());
        await GetTasks();
    }
    private async Task GetTasks()
    {
        var lstCabin = await cabin.GetCabinListSearch(cabinSearchViewModel);
        lstcabinViewModel = lstCabin.Items.Where(x => x.IdTrainingFacility == Guid.Parse(IdTrain)).OrderByDescending(x => x.IndexOfCabin).ToList();
        MetaData = lstCabin.MetaData;
        foreach (var item in lstcabinViewModel)
        {
            if (item.Status == 0)
            {
                item.Checked = true;
            }
            else if (item.Status == 2)
            {
                item.Checked = false;
            }
        }
    }
    private async Task ChangeStatus(Guid id, bool? Checked)
    {

        var changeStatusCabin = lstcabinViewModel.FirstOrDefault(x => x.Id == id);
        if (changeStatusCabin != null)
        {
            if ((bool)Checked)
            {
                CabinUpdateViewModel cabinUpdateViewModel = new CabinUpdateViewModel()
                    {
                        CabinName = changeStatusCabin.CabinName,
                        BuildingName = changeStatusCabin.BuildingName,
                        IndexOfCabin = changeStatusCabin.IndexOfCabin,
                        CreateTime = changeStatusCabin.CreateTime,
                        Status = 2

                    };
                var check = await cabin.UpdateCabin(id, cabinUpdateViewModel);
                if (check)
                {
                    _toastService.ShowSuccess("Thay đổi trạng thái thành công");
                    await GetTasks();
                }
            }
            else
            {
                CabinUpdateViewModel cabinUpdateViewModel = new CabinUpdateViewModel()
                    {
                        CabinName = changeStatusCabin.CabinName,
                        BuildingName = changeStatusCabin.BuildingName,
                        IndexOfCabin = changeStatusCabin.IndexOfCabin,
                        CreateTime = changeStatusCabin.CreateTime,
                        Status = 0

                    };
                var check = await cabin.UpdateCabin(id, cabinUpdateViewModel);
                if (check)
                {
                    _toastService.ShowSuccess("Thay đổi trạng thái thành công");
                    await GetTasks();
                }
            }

        }


    }
    private async Task SelectedPage(int page)
    {
        cabinSearchViewModel.PageNumber = page;
        await GetTasks();
    }
    private async Task Delete(Guid id)
    {
        Id = id;     
        await DeleteConfirmation.show(id);
    }
    private async Task OnConfirmationDelete(bool deleteconfirmed)
    {
        if (deleteconfirmed)
        {

            var check = await cabin.DeleteCabin(Id);
            var grcb = await groupCabinRepo.GetAllGroupCabinAsync();
            grcb = grcb.Where(x => x.IdCabin == Id).ToList();
            var bkcb = await _bookingCabinApiClient.GetAll();
            bkcb = bkcb.Where(x => x.IdCabin == Id).ToList();
            //var bkrq = await bookingRequestRepo.GetAllBookingRequestAsync();
            //bkrq = bkrq.Where(x => x.IdCabin == Id).ToList();
            //foreach (var item in bkrq)
            //{
            //    await bookingRequestRepo.DeleteBookingRequest(item.Id);
            //}

            foreach (var item in bkcb)
            {

                var listShiftDefault = await shiftOfCabinApiClient.GetAll();
                var shift = listShiftDefault.FirstOrDefault(c => c.Id == item.IdShift);
                var StartShift = shift.StartTime;
                var EndShift = shift.EndTime;
                await _bookingCabinApiClient.Delete(item.Id, item.IdCabin, item.SubjectId, item.ClassId, item.IdShift);
                var listBookingCabin = await _bookingCabinApiClient.GetAll();

                var obj = listBookingCabin.FirstOrDefault(c => c.Status != 1 && c.SubjectId == item.SubjectId && c.ClassId == item.ClassId && c.IdShift == item.IdShift && c.IdLectuter == item.IdLectuter && c.IdCabin == item.IdCabin && c.DateCreated == item.DateCreated);
                var resBooking = obj == null ? true : await _bookingCabinApiClient.Delete(obj.Id, Guid.Parse(item.IdCabin.ToString()), Guid.Parse(item.SubjectId.ToString()), Guid.Parse(item.ClassId.ToString()), Guid.Parse(item.IdShift.ToString()));
                var resRequest = false;

                // tạo booking request
                if (resBooking)
                {

                    var StartTimeOfBR = new DateTime(item.DateCreated.Year, item.DateCreated.Month, item.DateCreated.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds);
                    var EndTimeOfBR = new DateTime(item.DateCreated.Year, item.DateCreated.Month, item.DateCreated.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds);

                    var booking = new BookingRequestCreateViewModel
                        {
                            ContentOfRequest = "Đã bị hủy cabin",
                            IdLectuter = Guid.Parse(item.IdLectuter.ToString()),
                            SendingTime = DateTime.Now,
                            SubjectId = Guid.Parse(item.SubjectId.ToString()),
                            ClassId = Guid.Parse(item.ClassId.ToString()),
                            Status = 5,
                            ContenOfFeedBack = "Hủy cabin vì: Cabin dừng hoạt động",
                            StartTime = StartTimeOfBR,
                            FeedBackTime = DateTime.Now,
                            EndTime = EndTimeOfBR
                        };

                    var listBookingRequest = await _bookingRequestRepo.GetAllBookingRequestAsync();

                    if (listBookingRequest.Any(c => c.IdLectuter == Guid.Parse(item.IdLectuter.ToString()) &&
                        c.SubjectId == Guid.Parse(item.SubjectId.ToString()) &&
                    c.ClassId == Guid.Parse(item.ClassId.ToString()) &&
                    c.StartTime == StartTimeOfBR &&
                    c.EndTime == EndTimeOfBR
                    ))
                    {
                        booking.Status = 3;
                    }
                    resRequest = await _bookingRequestRepo.CreateBookingRequest(booking);
                }

            }
       
            foreach (var item in grcb)
            {
                await groupCabinRepo.DeleteGroupCabin(item.IdSpec, item.IdCabin);
            }

            if (check)
            {
                _toastService.ShowSuccess("Xóa thành công");
                await GetTasks();
            }
            else
            {
                _toastService.ShowError("Xóa thất bại");
            }
        }

    }
    private async Task OnConfirmAdd(bool check)
    {
        if (check)
        {
            await GetTasks();
        }


    }
    public async Task SearchCabin(CabinSearchViewModel cabinViewModel)
    {
        cabinSearchViewModel = cabinViewModel;
        await GetTasks();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDialogService DialogService { get; set; }
    }
}
#pragma warning restore 1591
