// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.CabinProject.DaoTao
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using ClosedXML.Excel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Repositories.Interfaces.CabinProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Repositories.Services.CabinProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Repositories;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Data.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Data.SeedWork;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Domain.Entities.CabinProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Domain.Entities.CoresParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Domain.Entities.UserParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Domain.Entities.UsesParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Infrastructure.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.ShiftOfCabin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.TeachingSchedule;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
           [Authorize(Roles = "DirectorOfTraining")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/importteachingschedule/{IdUserNonDecrypt}/{IdTrainNonDecrypt}")]
    public partial class ImportTeachingSchedule : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 728 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ImportTeachingSchedule.razor"
       
    private TeachingSchedule _teachingSchedule = new TeachingSchedule();
    private List<TeachingSchedule> _lstTeachingSchedule = new List<TeachingSchedule>();
    private List<TeachingSchedule> _GetFullListTeachingSchedules = new List<TeachingSchedule>();
    [Inject] public ITeachingScheduleApiClient _teachingScheduleApiClient { get; set; }
    //
    [Inject] public IShiftOfCabinApiClient _shiftOfCabinApiClient { get; set; }
    [Inject] public ISemesterRepo _semesterRepo { get; set; }
    [Inject] public ISemesterBlockRepo _semesterBlockRepo { get; set; }
    [Inject] public IBlockRepo _blockRepo { get; set; }
    [Inject] public ISubjectClient _subjectClient { get; set; }
    [Inject] public ITaskRepositories<ClassUPViewModel> _taskRepositories { get; set; }
    [Inject] public ISpecializedUPRepo _specializedUPRepo { get; set; }
    [Inject] public ILecturersCPRepo _lecturersCPRepo { get; set; }
    [Inject] public IRepository<SubjectClassUP> _ISubjectClassUPrepository { get; set; }
    [Inject] public IRepository<SubjectUP> _ISubject { get; set; }
    [Inject] public IRepository<TeachingSchedule> _Iteachingrepo { get; set; }
    [Inject] public IRepository<SemesterBlock> _Isemblock { get; set; }
    [Inject] public IRepository<Shift> _Ishift { get; set; }
    [Inject] public IRepository<TrainingFacilitiesCP> _Itraining { get; set; }
    //
    private List<ShiftOfCabinVM> _lstShift = new List<ShiftOfCabinVM>();
    private List<SemesterDto> _lstSem = new List<SemesterDto>();
    private List<SemesterBlockDto> _lstSemBlock = new List<SemesterBlockDto>();
    private List<BlockDto> _lstBlock = new List<BlockDto>();
    private List<SubjectUP> _lstSub = new List<SubjectUP>();
    private List<ClassUp> _lstClass = new List<ClassUp>();
    private List<SpecializedDto> _lstSpec = new List<SpecializedDto>();
    private List<LecturersCP> _lstlec = new List<LecturersCP>();
    private List<SubjectClassUP> _subjectClassUPs = new List<SubjectClassUP>();
    int counter = 1;
    private TeachinhScheduleSearch _teachingScheduleSearch = new TeachinhScheduleSearch();
    private LecturersCP _lecturersCP = new LecturersCP();
    public MetaData MetaData { get; set; } = new MetaData();
    private SemesterBlock _semesterBlock = new SemesterBlock();
    private bool loadingtable = false;
    private SpecializedUP _specializedUP = new SpecializedUP();
    private Guid IdSpec = Guid.Empty;
    private Guid? IsSpecFilterSpec = Guid.Empty;
    private bool IsShowControl = false;
    private Guid? IdLec = Guid.Empty;
    private Guid IdSem = Guid.Parse("529FFBEF-D88A-47B2-BE8C-B9F7CAFEC0C6");
    private Guid IdBlock = Guid.Parse("703DBC17-2489-494C-A9F9-F59EEFEC0454");
    public int Value { get; set; }
    public int BufferValue { get; set; }
    private string PleaseWait = "Please Wait......";
    private bool IsShowProGressBar = false;
    private TeachingSchedule teachingScheduleForadding = new TeachingSchedule();
    private bool IsShowAdding = false;
    private List<TeachingSchedule> _defaultList = new List<TeachingSchedule>();

    private Guid GetIdUser = Guid.NewGuid();
    private bool IsDisaleSpec = false;
    private TeachingSchedule _bindingteaching = new TeachingSchedule();
    private bool IsMainProcess = true;
    private Guid IdTrain = Guid.Parse("169A0425-7E5A-4057-9748-32F1CF3C1479");
    private string FullNameOfSemesterBlock = "";
    //
    [Parameter]
    public string IdUserNonDecrypt { get; set; }
    //
    [Parameter]
    public string IdTrainNonDecrypt { get; set; }
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    protected async override Task OnInitializedAsync()
    {

        IdTrain = Guid.Parse(_cryptoServices.Decrypt(IdTrainNonDecrypt));
        GetIdUser = Guid.Parse(_cryptoServices.Decrypt(IdUserNonDecrypt));

        // IsShowProGressBar = true;
        _lstSemBlock = await _semesterBlockRepo.GetAll();
        //check ngày hiện tại đang thuộc block và kì nào
        var currentday = _lstSemBlock.FirstOrDefault(x => x.Status == 0);
        IdBlock = currentday.IdBlock;
        IdSem = currentday.IdSemester;


        // await SimulateProgress();
        _teachingScheduleSearch = new TeachinhScheduleSearch();
        _lstShift = await _shiftOfCabinApiClient.GetAll();
        _lstSem = await _semesterRepo.GetAll();

        _lstBlock = await _blockRepo.GetAll();
        FullNameOfSemesterBlock = _lstBlock.Where(c => c.Id == IdBlock).Select(c => c.NameOfBlock).FirstOrDefault() + "-" + _lstSem.Where(c => c.Id == IdSem).Select(c => c.NameofSemester).FirstOrDefault();
        _lstSub = await _ISubject.AsQueryable().ToListAsync();
        _lstClass = await _taskRepositories.getOnlyClass();
        _lstSpec = await _specializedUPRepo.GetAll();
        _lstlec = await _lecturersCPRepo.GetAllLecturerAsync();
        _subjectClassUPs = await _ISubjectClassUPrepository.AsQueryable().ToListAsync();
        await GetCurrentTeachingSchedules();
        //IsShowProGressBar = true;
        //IsShowAdding = true;
    }
    private async Task GetCurrentTeachingSchedules()
    {
        var res = await _teachingScheduleApiClient.GetAllTeachingSchedules(IdBlock, IdSem, IdTrain, _teachingScheduleSearch);
        _lstTeachingSchedule = res.Items;
        MetaData = res.MetaData;
        IsMainProcess = true;
        IsShowControl = true;
    }
    private async Task ClearRow()
    {
        teachingScheduleForadding = new TeachingSchedule();
        _specializedUP.Id = Guid.Empty;
        _lecturersCP.Id = Guid.Empty;

    }
    private async Task AddNewRow()
    {
        if (teachingScheduleForadding.SubjectId == Guid.Empty || teachingScheduleForadding.ClassId == Guid.Empty)
        {
            await Swal.FireAsync(
            "Thêm Thất Bại",
            "Không tìm thấy môn học hoặc lớp học bạn vừa nhập hãy kiểm tra lại !",
            SweetAlertIcon.Error
            );
            return;
        }
        else
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Xác Nhận Thêm Lịch Dạy?",

                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {

                teachingScheduleForadding.Id = Guid.NewGuid();
                teachingScheduleForadding.ImportTime = DateTime.Now;
                teachingScheduleForadding.IdAdminImport = GetIdUser;
                teachingScheduleForadding.ImportTime = DateTime.Now;
                if (_lstTeachingSchedule.Count() == 0)
                {
                    teachingScheduleForadding.IndexOfTeachingSchedule = 0;
                }
                else
                {
                    teachingScheduleForadding.IndexOfTeachingSchedule = _lstTeachingSchedule.Max(c => c.IndexOfTeachingSchedule) + 1;
                }
                teachingScheduleForadding.Status = 0;
                teachingScheduleForadding.IdLecturter = _lecturersCP.Id;
                teachingScheduleForadding.IdTrainingFacility = IdTrain;
                teachingScheduleForadding.IdBlock = IdBlock;
                teachingScheduleForadding.IdSemester = IdSem;
                _subjectClassUPs = await _ISubjectClassUPrepository.AsQueryable().ToListAsync();
                //

                if (_subjectClassUPs.Any(c => c.ClassId == teachingScheduleForadding.ClassId && c.SubjectId == teachingScheduleForadding.SubjectId))
                {
                    var getHomelecterturID = _subjectClassUPs.Where(c => c.ClassId == teachingScheduleForadding.ClassId && c.SubjectId == teachingScheduleForadding.SubjectId).Select(c => c.HomeroomLecturer).FirstOrDefault();
                    var getLecName = _lstlec.Find(c => c.Id == getHomelecterturID).Email.Replace("@fpt.edu.vn","");
                    var getNewLecName = _lstlec.Find(c => c.Id == _lecturersCP.Id).Email.Replace("@fpt.edu.vn", "");
                    await Swal.FireAsync(
           "Thông Báo Dữ Liệu Đã Tồn Tại !",
           "Bạn chỉ có thể thay đổi ngày dạy, ca dạy, giảng viên",
           SweetAlertIcon.Info
           );
                    if (getLecName != getNewLecName)
                    {
                        teachingScheduleForadding.Note = $"{getNewLecName} dạy thay cho {getLecName}";
                        teachingScheduleForadding.Remote = $"Online";
                    }
                    else
                    {
                        teachingScheduleForadding.Note = getNewLecName;
                        teachingScheduleForadding.Remote = $"Online";
                    }



                }
                if (_subjectClassUPs.Any(c => c.ClassId == teachingScheduleForadding.ClassId && c.SubjectId == teachingScheduleForadding.SubjectId) == false)
                {
                    SubjectClassUP subjectClassUP = new SubjectClassUP()
                        {
                            SubjectId = teachingScheduleForadding.SubjectId,
                            ClassId = teachingScheduleForadding.ClassId,
                            Status = 0,
                            StudentAmount = 40,
                            JoinCode = "hyanjksoy9",
                            DateCreated = DateTime.Now,
                            DateStarted = DateTime.Now,
                            EndDate = DateTime.Now,
                            HomeroomLecturer = _lecturersCP.Id,
                            SpecializedOfClass = IdSpec
                        };
                    await _ISubjectClassUPrepository.AddAsync(subjectClassUP);
                    await _ISubjectClassUPrepository.SaveChangesAsync();
                }
                if (IsMainProcess == false)
                {
                    var res = await _teachingScheduleApiClient.AddNewTeachingSchedules(teachingScheduleForadding);
                    _lstTeachingSchedule = res.Items;
                    _GetFullListTeachingSchedules.Add(teachingScheduleForadding);

                }
                else
                {
                    var res = await _teachingScheduleApiClient.AddTeachingSchedules(teachingScheduleForadding);
                    if (res == true)
                    {
                        await Swal.FireAsync(
                 "Thông Báo",
                 " Thêm Mới Lịch Dạy Thành Công",
                 SweetAlertIcon.Error
                 );
                        await GetCurrentTeachingSchedules();
                    }
                    else
                    {
                        await Swal.FireAsync(
                 "Thông Báo",
                 " Thêm Mới Lịch Dạy Thất Bại",
                 SweetAlertIcon.Error
                 );
                    }
                }
                IsShowAdding = false;
                await ClearRow();
            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Cancelled",
                  "Hủy Thêm Thành Công",
                  SweetAlertIcon.Error
                  );
            }
            this.StateHasChanged();

        }


    }
    private async Task ClosedAdding()
    {
        IsShowAdding = false;
    }
    private async Task SearchLec()
    {
        var getlec = _lstlec.Find(c => c.Email.Replace("@fpt.edu.vn","").ToLower().Contains(_lecturersCP.Email.Replace("@fpt.edu.vn","").ToLower()));
        if (getlec != null)
        {
            IdLec = getlec.Id;
            _teachingScheduleSearch.Email = _lecturersCP.Email.Replace("@fpt.edu.vn","");
            await GetCurrentTeachingSchedules();
        }
    }
    private async Task ClearSearch()
    {

        IsSpecFilterSpec = Guid.Empty;
        IdLec = Guid.Empty;
        _lecturersCP.Email = "";
        _teachingScheduleSearch = new TeachinhScheduleSearch();
        if (IsMainProcess == false)
        {
            var res = await _teachingScheduleApiClient.GetPagingData(_teachingScheduleSearch);
            _lstTeachingSchedule = res.Items;
        }
        else
        {
            var res = await _teachingScheduleApiClient.GetAllTeachingSchedules(IdBlock, IdSem, IdTrain, _teachingScheduleSearch);
            _lstTeachingSchedule = res.Items;
        }
    }
    private async Task ShowAdding()
    {
        IsShowAdding = true;
    }
    private async Task ChangedClass(ChangeEventArgs args)
    {

        if (_lstClass.Any(c => c.ClassroomName.ToLower().Trim() == Convert.ToString(args.Value).ToLower().Trim()))
        {
            teachingScheduleForadding.ClassId = _lstClass.Find(c => c.ClassroomName.ToLower() == Convert.ToString(args.Value).ToLower()).Id;
        }
        else
        {
            teachingScheduleForadding.ClassId = Guid.Empty;
        }

    }
    private void ChangedSubject(ChangeEventArgs args)
    {
        if (_lstSub.Any(c => c.SubjectName.ToLower().Trim() == Convert.ToString(args.Value).ToLower().Trim()))
        {
            teachingScheduleForadding.SubjectId = _lstSub.Find(c => c.SubjectName.ToLower().Trim() == Convert.ToString(args.Value).ToLower().Trim()).Id;
        }
        else
        {
            teachingScheduleForadding.SubjectId = Guid.Empty;
        }

    }
    private async Task AddTeachingSchedule()
    {

        var getblockname = _lstBlock.Where(c => c.Id == IdBlock).Select(c => c.NameOfBlock).FirstOrDefault();
        var getSemname = _lstSem.Where(c => c.Id == IdSem).Select(c => c.NameofSemester).FirstOrDefault();
        if (_lstTeachingSchedule.Any(c => c.IdSemester == IdSem && c.IdBlock == IdBlock))
        {
            SweetAlertResult resultcheck = await Swal.FireAsync(new SweetAlertOptions
                {

                    Title = $"Đã tồn tại lịch dạy của {getblockname} - {getSemname} ",
                    Text = "Bạn có muốn ghi đè lên không?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"

                });
            if (resultcheck.IsConfirmed)
            {

                foreach (var item in _lstTeachingSchedule) 
                {

                   await _teachingScheduleApiClient.DeteleTeachingSchedules(item.Id);

                }
                _lstTeachingSchedule = new List<TeachingSchedule>();
                SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = $"Xác Nhận Thêm Lịch Dạy Cho {getblockname} - {getSemname}",
                        Text = "Quá Trình Có Thể Mất Vài Phút Để Thêm Hết Dữ Liệu",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Đồng Ý",
                        CancelButtonText = "Hủy"
                    });

                if (!string.IsNullOrEmpty(result.Value))
                {
                    var res = false;
                    if (IsMainProcess == false)
                    {
                        res = await _teachingScheduleApiClient.AddRangeTeachingSchedules(_GetFullListTeachingSchedules);
                    }
                    else
                    {
                        res = await _teachingScheduleApiClient.AddRangeTeachingSchedules(_lstTeachingSchedule);
                        await GetCurrentTeachingSchedules();
                    }
                    if (res)
                    {
                        await Swal.FireAsync(
                        "Thêm Thành Công",
                        "Successfuly",
                        SweetAlertIcon.Success
                        );
                        _lstTeachingSchedule.Clear();
                        await OnInitializedAsync();

                    }
                    else
                    {
                        await Swal.FireAsync(
                      "Thêm Thất Bại",
                      "Fail",
                      SweetAlertIcon.Error
                      );
                        return;
                    }

                }
                else if (result.Dismiss == DismissReason.Cancel)
                {

                    //ở đây xử lý khi hủy upload
                    await Swal.FireAsync(
                      "Hủy",
                      "Đã Hủy Thêm Lịch",
                      SweetAlertIcon.Error
                      );
                }


            }
            if (!string.IsNullOrEmpty(resultcheck.Value))
            {
                return;
            }


        }
        else
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Xác Nhận Thêm Lịch Dạy Cho {getblockname} - {getSemname}",
                    Text = "Quá Trình Có Thể Mất Vài Phút Để Thêm Hết Dữ Liệu",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                var res = false;
                if (IsMainProcess == false)
                {
                    res = await _teachingScheduleApiClient.AddRangeTeachingSchedules(_GetFullListTeachingSchedules);
                }
                else
                {
                    res = await _teachingScheduleApiClient.AddRangeTeachingSchedules(_lstTeachingSchedule);
                    await GetCurrentTeachingSchedules();
                }
                if (res)
                {
                    await Swal.FireAsync(
                    "Thêm Thành Công",
                    "Successfuly",
                    SweetAlertIcon.Success
                    );
                    _lstTeachingSchedule.Clear();

                }
                else
                {
                    await Swal.FireAsync(
                  "Thêm Thất Bại",
                  "Fail",
                  SweetAlertIcon.Error
                  );
                    return;
                }

            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Hủy",
                  "Đã Hủy Thêm Lịch",
                  SweetAlertIcon.Error
                  );
            }
        }
    }
    private void ChangedSPec(ChangeEventArgs args)
    {

        if (_lstSpec.Any(c => c.SpecializationName.ToLower().Trim() == Convert.ToString(args.Value).ToLower().Trim()))
        {
            IdSpec = _lstSpec.Find(c => c.SpecializationName.ToLower().Trim() == Convert.ToString(args.Value).ToLower().Trim()).Id;
        }
        else
        {
            IdSpec = Guid.Empty;
        }
    }
    private void ChangedLec(ChangeEventArgs args)
    {
        //bindtextClass = Convert.ToString(args.Value);
        if (_lstlec.Any(c => c.Email.Replace("@fpt.edu.vn","").ToLower().Trim() == Convert.ToString(args.Value).ToLower().Trim()))
        {
            _lecturersCP.Id = _lstlec.Find(c => c.Email.Replace("@fpt.edu.vn","").ToLower().Trim() == Convert.ToString(args.Value).ToLower().Trim()).Id;
        }
        else
        {
            _lecturersCP.Id = Guid.Empty;
        }
    }

    private async Task DeleteRow(TeachingSchedule teachingSchedule)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Xóa Lịch Dạy ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Đồng Ý",
                CancelButtonText = "Hủy"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            if (IsMainProcess == false)
            {
                _lstTeachingSchedule.Remove(teachingSchedule);
                _GetFullListTeachingSchedules.Remove(teachingSchedule);
            }
            else
            {
                var res = await _teachingScheduleApiClient.DeteleTeachingSchedules(teachingSchedule.Id);

                if (res == true)
                {
                    await Swal.FireAsync(
             "Thông Báo",
             " Xóa Lịch Dạy Thành Công",
              SweetAlertIcon.Success
             );

                    await GetCurrentTeachingSchedules();
                }
                else
                {
                    await Swal.FireAsync(
             "Thông Báo",
             " Xóa Lịch Dạy Thất Bại",
             SweetAlertIcon.Error
             );
                }
            }

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

            //ở đây xử lý khi hủy upload
            await Swal.FireAsync(
              "Đã Hủy Xóa",
              "Hủy Xóa Lịch Thành Công",
              SweetAlertIcon.Error
              );
        }



    }
    private async Task SelectedChangSpec(Guid param)
    {

        _teachingScheduleSearch.specializedUPId = param;
        IsSpecFilterSpec = param;

    }
    private void EnableEditing(bool flag, TeachingSchedule instanceData)
    {
        _lecturersCP = new LecturersCP();
        _specializedUP = new SpecializedUP();
        if (flag == false)
        {
            _bindingteaching = new TeachingSchedule();
        }
        else
        {
            _bindingteaching = instanceData;
        }
        instanceData.IsEditing = flag;
    }
    private async Task UpdateInstance(TeachingSchedule instanceData)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Xác Nhận Cập Nhật Lịch Dạy",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Đồng Ý",
                CancelButtonText = "Hủy"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            if (IsMainProcess == false)
            {
                foreach (var teaching in _lstTeachingSchedule.Where(c => c.Id == instanceData.Id))
                {
                    teaching.IdShift = _bindingteaching.IdShift;
                    teaching.TeachingDay = _bindingteaching.TeachingDay;
                    teaching.IdLecturter = _bindingteaching.IdLecturter;
                    teaching.Note = _bindingteaching.Note;
                    teaching.Remote = _bindingteaching.Remote;
                }
                foreach (var teaching in _GetFullListTeachingSchedules.Where(c => c.Id == instanceData.Id))
                {
                    teaching.IdShift = _bindingteaching.IdShift;
                    teaching.TeachingDay = _bindingteaching.TeachingDay;
                    teaching.IdLecturter = _bindingteaching.IdLecturter;
                    teaching.Note = _bindingteaching.Note;
                    teaching.Remote = _bindingteaching.Remote;
                }
            }
            else
            {
                var res = await _teachingScheduleApiClient.UpdateTeachingSchedules(_bindingteaching);
                if (res == true)
                {
                    await Swal.FireAsync(
             "Thông Báo",
             " Cập Nhật Lịch Dạy Thành Công",
             SweetAlertIcon.Success
             );
                }
                else
                {
                    await Swal.FireAsync(
             "Thông Báo",
             " Cập Nhật Lịch Dạy Thất Bại",
             SweetAlertIcon.Error
             );
                }
            }



            EnableEditing(false, instanceData);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

            //ở đây xử lý khi hủy upload
            await Swal.FireAsync(
              "Hủy Cập Nhật Lịch Dạy",
              "Hủy Cập Nhật Lịch Dạy Thành Công",
              SweetAlertIcon.Error
              );
            EnableEditing(false, instanceData);
        }


    }

    private async Task<Stream> GetFileStream()
    {

        var _lstTeachingFormDatabase = await _teachingScheduleApiClient.GetListTeachingFormDatabase(IdBlock, IdSem, IdTrain);
        using (var workerbook = new XLWorkbook())
        {
            //MaSV	Id	MaCV	TenSV	Username	PassWord	MaChiTietSinhVien	Email	MaSV	DiaChi	SDT	CMND/CCCD		TrangThai	DOB			Image		KiHoc	DOB

            var worksheet = workerbook.Worksheets.Add("Lịch Dạy Các Môn Online FPLHN");
            var currentRow = 1;
            worksheet.Cell(currentRow, 1).Value = "STT";
            worksheet.Cell(currentRow, 2).Value = "Ngày Dạy";
            worksheet.Cell(currentRow, 3).Value = "Ca Học";
            worksheet.Cell(currentRow, 4).Value = "Môn Học";
            worksheet.Cell(currentRow, 5).Value = "Lớp Học";
            worksheet.Cell(currentRow, 6).Value = "Giảng Viên";
            worksheet.Cell(currentRow, 7).Value = "Chuyên Ngành";
            worksheet.Cell(currentRow, 8).Value = "Remote";
            worksheet.Cell(currentRow, 9).Value = "Ghi Chú";


            if (_lstTeachingFormDatabase.Count() > 0)
            {
                foreach (var x in _lstTeachingFormDatabase)
                {
                    currentRow++;
                    //
                    var getIdSpec = _subjectClassUPs.Where(c => c.SubjectId == x.SubjectId && c.ClassId == x.ClassId).Select(c => c.SpecializedOfClass).FirstOrDefault();
                    worksheet.Cell(currentRow, 1).Value = currentRow - 1;
                    worksheet.Cell(currentRow, 2).Value = x.TeachingDay;
                    worksheet.Cell(currentRow, 3).Value = _lstShift.Where(c => c.Id == x.IdShift).Select(c => c.ShiftName).FirstOrDefault();
                    worksheet.Cell(currentRow, 4).Value = _lstSub.Where(c => c.Id == x.SubjectId).Select(c => c.SubjectName).FirstOrDefault();
                    worksheet.Cell(currentRow, 5).Value = _lstClass.Where(c => c.Id == x.ClassId).Select(c => c.ClassroomName).FirstOrDefault();
                    worksheet.Cell(currentRow, 6).Value = _lstlec.Where(c => c.Id == x.IdLecturter).Select(c => c.Email.Replace("@fpt.edu.vn","")).FirstOrDefault();
                    worksheet.Cell(currentRow, 7).Value = _lstSpec.Where(c => c.Id == getIdSpec).Select(c => c.SpecializationName).FirstOrDefault();
                    worksheet.Cell(currentRow, 8).Value = x.Remote;
                    worksheet.Cell(currentRow, 9).Value = x.Note;


                }
            }
            else
            {
                foreach (var x in _GetFullListTeachingSchedules)
                {
                    currentRow++;
                    //
                    var getIdSpec = _subjectClassUPs.Where(c => c.SubjectId == x.SubjectId && c.ClassId == x.ClassId).Select(c => c.SpecializedOfClass).FirstOrDefault();
                    worksheet.Cell(currentRow, 1).Value = currentRow - 1;
                    worksheet.Cell(currentRow, 2).Value = x.TeachingDay;
                    worksheet.Cell(currentRow, 3).Value = _lstShift.Where(c => c.Id == x.IdShift).Select(c => c.ShiftName).FirstOrDefault();
                    worksheet.Cell(currentRow, 4).Value = _lstSub.Where(c => c.Id == x.SubjectId).Select(c => c.SubjectName).FirstOrDefault();
                    worksheet.Cell(currentRow, 5).Value = _lstClass.Where(c => c.Id == x.ClassId).Select(c => c.ClassroomName).FirstOrDefault();
                    worksheet.Cell(currentRow, 6).Value = _lstlec.Where(c => c.Id == x.IdLecturter).Select(c => c.Email.Replace("@fpt.edu.vn","")).FirstOrDefault();
                    worksheet.Cell(currentRow, 7).Value = _lstSpec.Where(c => c.Id == getIdSpec).Select(c => c.SpecializationName).FirstOrDefault();
                    worksheet.Cell(currentRow, 8).Value = x.Remote;
                    worksheet.Cell(currentRow, 9).Value = x.Note;


                }
            }

            using (var stream = new MemoryStream())
            {
                workerbook.SaveAs(stream);
                var content = stream.ToArray();
                var fileStream = new MemoryStream(content);
                return fileStream;
            }
        }
    }
    private async Task ExportToExcel()
    {
        var res = await GetFileStream();
        var fileName = $"Lịch Dạy Online_{FullNameOfSemesterBlock}.xlsx";
        using var streamRef = new DotNetStreamReference(stream: res);
        await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

    }

    private async Task Down()
    {
        // string fileUrl = "https://www.syncfusion.com/downloads/support/directtrac/general/doc/Getting_Started1018066633.docx";
        //WebClient webClient = new WebClient();
        //byte[] byteArray = webClient.DownloadData(fileUrl);
        //Stream stream = new MemoryStream(byteArray);

        ////To observe the memory go down, null out the reference of byteArray variable.
        //byteArray = null;
        //using (WordprocessingDocument doc = WordprocessingDocument.Create
        // (fileUrl, DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
        //{
        //    // Add a main document part.
        //    MainDocumentPart mainPart = doc.AddMainDocumentPart();

        //    // Create the document structure and add some text.
        //    mainPart.Document = new Document();
        //    Body body = mainPart.Document.AppendChild(new Body());
        //    Paragraph para = body.AppendChild(new Paragraph());
        //    Run run = para.AppendChild(new Run());

        //    // String msg contains the text, "Hello, Word!"
        //    run.AppendChild(new Text("New text in document"));

        //}



    }




    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (_lstTeachingSchedule.Count() > 0)
        {
            SweetAlertResult result1 = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Đã Tồn Tại Lịch Dạy Của Giảng Viên",
                    Text = "Nếu Bạn Ấn Đồng Ý Thì Dữ Liệu Lịch Dạy Tạm Thời Sẽ Bị Mất Hết ?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result1.Value))
            {
                //var tootal = (DateTime.Now - DateTime.Now).TotalDays;
                var selectedFiles = e.File;
                SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Xác Nhận Upload File Lịch Dạy Excel?",
                        Text = "Quá Trình Có Thể Mất Vài Phút Để Upload Hết Dữ Liệu",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Đồng Ý",
                        CancelButtonText = "Hủy"
                    });

                if (!string.IsNullOrEmpty(result.Value))
                {
                    //ở đây xử lý khi đồng ý
                    IsMainProcess = false;
                    IsShowProGressBar = true;

                    await SimulateProgress();
                    var res = await _teachingScheduleApiClient.LoadingTeachingSchedule(e.File, GetIdUser, IdTrain, IdBlock, IdSem, _teachingScheduleSearch);

                    _lstTeachingSchedule = res.Items;
                    IsShowProGressBar = false;
                    MetaData = res.MetaData;
                    IsShowControl = true;
                    // var ressss = await localStorage.GetItemAsync<List<TeachingSchedule>>("listdefault");
                    _GetFullListTeachingSchedules = await _teachingScheduleApiClient.GetFullListTeachingSchedules();

                }
                else if (result.Dismiss == DismissReason.Cancel)
                {

                    //ở đây xử lý khi hủy upload
                    await Swal.FireAsync(
                      "Đã Hủy",
                      "Hủy Thêm File Thành Công",
                      SweetAlertIcon.Error
                      );
                }
                this.StateHasChanged();
            }
            else if (result1.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Đã Hủy",
                  "Hủy Import Lịch Thành Công",
                  SweetAlertIcon.Error
                  );
                return;
            }
        }
        else
        {
            //var tootal = (DateTime.Now - DateTime.Now).TotalDays;
            var selectedFiles = e.File;
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Xác Nhận Upload File Lịch Dạy Excel?",
                    Text = "Quá Trình Có Thể Mất Vài Phút Để Upload Hết Dữ Liệu",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Đồng Ý",
                    CancelButtonText = "Hủy"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                //ở đây xử lý khi đồng ý upload
                IsShowProGressBar = true;
                IsMainProcess = false;

                await SimulateProgress();
                var res = await _teachingScheduleApiClient.LoadingTeachingSchedule(e.File, GetIdUser, IdTrain, IdBlock, IdSem, _teachingScheduleSearch);

                _lstTeachingSchedule = res.Items;
                IsShowProGressBar = false;
                MetaData = res.MetaData;
                IsShowControl = true;
                //var ressss = await localStorage.GetItemAsync<List<TeachingSchedule>>("listdefault");
                _GetFullListTeachingSchedules = await _teachingScheduleApiClient.GetFullListTeachingSchedules();

            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

                //ở đây xử lý khi hủy upload
                await Swal.FireAsync(
                  "Đã Hủy",
                  "Hủy Thêm File Thành Công",
                  SweetAlertIcon.Error
                  );
            }
            this.StateHasChanged();
        }

    }
    private async Task DownloadServerFile()
    {

        //get base64 string from web api call
        var filePath = @"wwwroot/files/TemplateTeachingSchedule.xlsx";
        string base64String;
        using (var fileInput = new FileStream(filePath, FileMode.Open, FileAccess.Read))
        {
            MemoryStream memoryStream = new MemoryStream();
            await fileInput.CopyToAsync(memoryStream);

            var buffer = memoryStream.ToArray();
            base64String = Convert.ToBase64String(buffer);
        }
        //call javascript function to download the file
        await jsRuntime.InvokeVoidAsync("downloadFile", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", base64String, "TemplateTeachingSchedule.xlsx");
    }
    private async Task SelectedPage(int page)
    {
        if (IsMainProcess == false)
        {
            _teachingScheduleSearch.PageNumber = page;
            var res = await _teachingScheduleApiClient.GetPagingData(_teachingScheduleSearch);
            _lstTeachingSchedule = res.Items;
        }
        else
        {
            _teachingScheduleSearch.PageNumber = page;
            var res = await _teachingScheduleApiClient.GetAllTeachingSchedules(IdBlock, IdSem, IdTrain, _teachingScheduleSearch);
            _lstTeachingSchedule = res.Items;
        }


    }
    public async Task SimulateProgress()
    {
        Value = 10;
        BufferValue = 10;
        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 1;
            BufferValue += 5;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);


    }
    bool _disposed;
    public void Dispose() => _disposed = true;
    private async Task UndoChange(Guid id)
    {
        EnableEditing(false, _bindingteaching);
        //var newlister = await _teachingScheduleApiClient.GetDefault();
        //var checkexist = _defaultList.FindIndex(c => c.Id == id);
        //if (checkexist != -1)
        //{
        //    SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
        //        {
        //            Title = "Hoàn Tác Lại Các Thay Đổi",

        //            Icon = SweetAlertIcon.Warning,
        //            ShowCancelButton = true,
        //            ConfirmButtonText = "Đồng Ý",
        //            CancelButtonText = "Hủy"
        //        });

        //    if (!string.IsNullOrEmpty(result.Value))
        //    {
        //        var undorow = _defaultList.Find(c => c.Id == id);
        //        foreach (TeachingSchedule teaching in _lstTeachingSchedule.Where(c => c.Id == undorow.Id))
        //        {
        //            teaching.IdShift = undorow.IdShift;
        //            teaching.TeachingDay = undorow.TeachingDay;
        //            teaching.IdLecturter = _bindingteaching.IdLecturter;
        //            teaching.Note = undorow.Note;
        //            teaching.Remote = undorow.Remote;
        //        }

        //        foreach (TeachingSchedule teaching in _GetFullListTeachingSchedules.Where(c => c.Id == undorow.Id))
        //        {
        //            teaching.IdShift = undorow.IdShift;
        //            teaching.TeachingDay = undorow.TeachingDay;
        //            teaching.IdLecturter = _bindingteaching.IdLecturter;
        //            teaching.Note = undorow.Note;
        //            teaching.Remote = undorow.Remote;
        //        }
        //        EnableEditing(false, undorow);


        //    }
        //    else if (result.Dismiss == DismissReason.Cancel)
        //    {

        //        //ở đây xử lý khi hủy upload
        //        await Swal.FireAsync(
        //          "Đã Hủy",
        //          "Hủy Thêm File Thành Công",
        //          SweetAlertIcon.Error
        //          );
        //    }

        //}
        //else
        //{
        //    await Swal.FireAsync(
        //        "Thông Báo",
        //        "Lịch Thêm Mới Không Thể Hoàn Tác",
        //        SweetAlertIcon.Error
        //        );
        //    return;
        //}





    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SweetAlertService Swal { get; set; }
    }
}
#pragma warning restore 1591
