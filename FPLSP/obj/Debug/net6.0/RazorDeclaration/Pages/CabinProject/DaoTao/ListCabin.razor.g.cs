// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.CabinProject.DaoTao
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Repositories.Interfaces.CabinProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.BookingCabin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.BookingRequest;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.Cabin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.GroupCabin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using FPLSP.Server.Infrastructure.ViewModels.CabinProject.ShiftOfCabin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
           [Authorize(Roles = "DirectorOfTraining")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/listCabin/{idTrainingFacilityNonDecrypt}/{idShiftNonDecrypt}/{dateInput}")]
    public partial class ListCabin : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 330 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\CabinProject\DaoTao\ListCabin.razor"
       
    [Parameter]
    public string idTrainingFacilityNonDecrypt { get; set; }
    public string idTrainingFacility { get; set; }

    [Parameter]
    public string idShiftNonDecrypt { get; set; }
    public string idShift { get; set; }

    [Parameter]
    public string dateInput { get; set; } //{day.Day}-{day.Month}-{day.Year}
    ShiftOfCabinFullVM _Model = new ShiftOfCabinFullVM();
    [Inject] public CryptoServices _cryptoServices { get; set; }
    [Inject] IShiftOfCabinApiClient shiftOfCabinApiClient { get; set; }
    //[Inject] ISemesterRepo semesterRepo { get; set; }
    //[Inject] IBlockRepo blockRepo { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] ISemesterBlockRepo semesterBlockRepo { get; set; }
    [Inject] IGroupCabinRepo groupCabinRepo { get; set; }
    [Inject] ISpecializedUPRepo specializedUPRepo { get; set; }
    List<GroupCabinViewModel> listGroupCabinDefault { get; set; }
    List<GroupCabinViewModel> listGroupCabin { get; set; }
    [Inject] ICabinRepo cabinRepo { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    DateTime startDateOfBlock;
    List<(string, DateTime)> daysOfWeek = new List<(string, DateTime)>();
    List<ShiftOfCabinVM> listShift = new List<ShiftOfCabinVM>();
    List<ShiftOfCabinVM> listShiftDefault = new List<ShiftOfCabinVM>();
    List<SpecializedDto> listSpec;
    List<CabinViewModel> listCabinActiveDefault;
    List<CabinViewModel> listCabinActive;
    [Inject] public IBookingCabinApiClient _bookingCabinApiClient { get; set; }
    [Inject] SweetAlertService Swal { get; set; }
    [Inject] public IBookingRequestRepo _bookingRequestRepo { get; set; }
    List<BookingCabinVM> listBookingCabin;

    private string nullString = null;

    private string semesterBlock;
    private string week;
    DateTime? _day;
    string _idFilterShift;
    string _idFilterSpecialized = Guid.Empty.ToString();
    string _filterBuldingName = "";
    bool classroom;

    List<ShiftOfCabinFullVM> listFullShift = new List<ShiftOfCabinFullVM>();

    List<string> listWeekOfBlock = new List<string>();
    private string close = "none";//dùng đóng mở tab chụp ảnh

    private string lecturerName = "";
    private string subjectClass = "";
    private string shift = "";
    private string cabinName = "";
    private string specializedName = "";
    private string cabinStatus = "";
    private byte[]? checkinImage = null;

    Guid? IdClass = null;
    Guid? IdSubject = null;
    Guid? IdLecturer = null;
    Guid? IdShift = null;
    Guid? IdCabin = null;

    string IdLecturerForBooking = null;
    string IdClassSubjectForBooking = null;
    string CancelReason = null;

    bool hiddenBooking = true;
    bool hiddenCancel = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            idTrainingFacility = _cryptoServices.Decrypt(idTrainingFacilityNonDecrypt.Replace("cabin", "/"));
            idShift = _cryptoServices.Decrypt(idShiftNonDecrypt.Replace("cabin", "/"));
            try
            {
                string url = "http://localhost:5001/SignalRCabinHub";
                HubConnection _connection = null;
                bool isConnected = false;
                string connectionStatus = "Closed";
                _connection = new HubConnectionBuilder()
                    .WithUrl(url)
                    .Build();

                await _connection.StartAsync();
                isConnected = true;
                connectionStatus = "Connected :-)";

                _connection.Closed += async (s) =>
                {
                    isConnected = false;
                    connectionStatus = "Disconnected";
                    await _connection.StartAsync();
                    isConnected = true;
                };

                _connection.On<string>("SignalRCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRGroupCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRBookingCabins", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRTeachingSchedules", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });

                _connection.On<string>("SignalRSemesterBlocks", async (res) =>
                {
                    if (res == "Done")
                    {
                        await OnInitializedAsync();

                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                });
            }
            catch (Exception ex)
            {


            }
            finally
            {
                listBookingCabin = await _bookingCabinApiClient.GetAll();
                listBookingCabin = listBookingCabin.Where(c => c.Status != 1).ToList();

                _day = new DateTime(Convert.ToInt32(dateInput.Split("-")[2]), Convert.ToInt32(dateInput.Split("-")[1]), Convert.ToInt32(dateInput.Split("-")[0]));
                _idFilterShift = idShift;
                LoadDaysOfWeek(new DateTime(Convert.ToInt32(dateInput.Split("-")[2]), Convert.ToInt32(dateInput.Split("-")[1]), Convert.ToInt32(dateInput.Split("-")[0])));

                await LoadData();
            }
        }
        catch
        {
            // Lịch học rỗng
            listFullShift = new List<ShiftOfCabinFullVM>();
        }

    }

    private async Task LoadData()
    {
        try
        {
            listCabinActiveDefault = await cabinRepo.GetAllCabinAsync();
            listCabinActiveDefault = (listCabinActiveDefault == null) ? new() : listCabinActiveDefault.Where(c => c.Status != 1 && c.IdTrainingFacility == Guid.Parse(idTrainingFacility)).ToList();
            listCabinActive = listCabinActiveDefault;

            listShiftDefault = await shiftOfCabinApiClient.GetAll();
            listShiftDefault = (listShiftDefault == null) ? new() : listShiftDefault.Where(c => c.Status == 0).ToList();
            listShift = string.IsNullOrEmpty(_idFilterShift) ? listShiftDefault : listShiftDefault.Where(c => c.Id == Guid.Parse(_idFilterShift)).ToList();

            //idUser = _cryptoServices.Decrypt(idUserNonDecrypt);

            //listSubClass = await subjectClassRepo.GetAllClass();
            //listSubClass = listSubClass.Where(c => c.HomeroomLecturerId == Guid.Parse(idUser)).ToList();
            listGroupCabinDefault = await groupCabinRepo.GetAllGroupCabinAsync();
            listGroupCabinDefault = (listGroupCabinDefault == null) ? new() : listGroupCabinDefault.Where(c => c.Status == 0).ToList();
            listGroupCabin = listGroupCabinDefault;
            listSpec = await specializedUPRepo.GetAll();

            listFullShift = await shiftOfCabinApiClient.GetAllInformationOfShiftOfCabin();
            listFullShift = (listFullShift == null) ? new() : listFullShift.Where(c => c.IdTrainingFacility == Guid.Parse(idTrainingFacility)).ToList();

            //week = $"{daysOfWeek[0].Item2.ToString("dd/MM/yyyy")} - {daysOfWeek[0].Item2.AddDays(6).ToString("dd/MM/yyyy")}";
        }
        catch (Exception)
        {
            listFullShift = new List<ShiftOfCabinFullVM>();
        }
    }

    public async Task Notify(ShiftOfCabinVM shiftInput, CabinViewModel cabin, ShiftOfCabinFullVM? detail)//bật tắt detail
    {
        IdClass = detail == null ? null : detail.IdClass;
        IdSubject = detail == null ? null : detail.IdSubject;
        IdLecturer = detail == null ? null : detail.IdLecturer;
        IdShift = shiftInput.Id;
        IdCabin = cabin.Id;

        shift = shiftInput.ShiftName + ", " + _day.Value.ToString("dd/MM/yyyy");
        cabinStatus = (cabin.Status == 0) ? "Còn trống" : (cabin.Status == 2) ? "Đang bảo trì" : "N/A";
        cabinName = cabin.CabinName == null ? "N/A" : cabin.CabinName;
        specializedName = "";
        foreach (var idspec in listGroupCabin.Where(c => c.IdCabin == cabin.Id).Select(c => c.IdSpec))
        {
            specializedName += listSpec.FirstOrDefault(c => c.Id == idspec).SpecializationName + ", ";
        }

        specializedName = listGroupCabin.FirstOrDefault(c => c.IdCabin == cabin.Id) == null ? "N/A" : specializedName.Substring(0, specializedName.Length - 2);
        if (detail != null)
        {
            lecturerName = detail.LecturerUserName;
            subjectClass = detail.ClassName + "-" + detail.SubjectCode;
            cabinStatus = "Đã chọn";

            var x = listBookingCabin.FirstOrDefault(c => c.IdShift == IdShift
                          && c.ClassId == IdClass
                          && c.SubjectId == IdSubject
                          && c.IdLectuter == IdLecturer
                          && c.DateCreated == _day);

            if (listBookingCabin.FirstOrDefault(c => c.IdShift == IdShift
                          && c.ClassId == IdClass
                          && c.SubjectId == IdSubject
                          && c.IdLectuter == IdLecturer
                          && c.DateCreated == _day) != null)
            {
                if (listBookingCabin.FirstOrDefault(c => c.IdShift == IdShift
                                  && c.ClassId == IdClass
                                  && c.SubjectId == IdSubject
                                  && c.IdLectuter == IdLecturer
                                  && c.DateCreated == _day).CheckinImage != null)
                {
                    checkinImage = listBookingCabin.FirstOrDefault(c => c.IdShift == IdShift
                                  && c.ClassId == IdClass
                                  && c.SubjectId == IdSubject
                                  && c.IdLectuter == IdLecturer
                                  && c.DateCreated == _day).CheckinImage;

                }
            }


        }
        else
        {
            lecturerName = "N/A";
            subjectClass = "N/A";
            checkinImage = null;
        }

        close = "block";
    }

    public async Task Submit()
    {
        close = "none";

        lecturerName = "N/A";
        subjectClass = "N/A";
        shift = "N/A";
        specializedName = "N/A";
        cabinStatus = "N/A";
        cabinName = "N/A";
        checkinImage = null;

        CancelReason = null;
        IdLecturerForBooking = null;
        IdClassSubjectForBooking = null;

        await LoadData();
    }

    public void CheckLecturerForBooking(string value)
    {
        IdLecturerForBooking = value;
    }

    public void CheckClassSubjectForBooking(string value)
    {
        IdClassSubjectForBooking = value;
    }

    public async Task BookCabin()
    {
        var shift = listShiftDefault.FirstOrDefault(c => c.Id == Guid.Parse(IdShift.ToString()));
        var StartShift = shift.StartTime;
        var EndShift = shift.EndTime;

        if (DateTime.Now < new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds))
        {
            if (!string.IsNullOrEmpty(IdLecturerForBooking) && !string.IsNullOrEmpty(IdClassSubjectForBooking))
            {
                close = "none";
                var listBookingCabin = await _bookingCabinApiClient.GetAll();

                var idClassBooking = IdClassSubjectForBooking.Split("*")[0];
                var idSubjectBooking = IdClassSubjectForBooking.Split("*")[1];

                var objForCreate = listBookingCabin.FirstOrDefault(c => c.SubjectId == Guid.Parse(idSubjectBooking) && c.ClassId == Guid.Parse(idClassBooking) && c.IdShift == IdShift && c.IdLectuter == Guid.Parse(IdLecturerForBooking) && c.IdCabin == IdCabin && c.DateCreated == new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day));
                var resBooking = false;
                var resRequest = false;

                // Tạo bookingcabin
                if (objForCreate == null)
                {
                    var obj = new BookingCabinCreateVM()
                        {
                            Id = Guid.NewGuid(),
                            SubjectId = Guid.Parse(idSubjectBooking.ToString()),
                            ClassId = Guid.Parse(idClassBooking.ToString()),
                            IdCabin = Guid.Parse(IdCabin.ToString()),
                            IdShift = Guid.Parse(IdShift.ToString()),
                            IdLectuter = Guid.Parse(IdLecturerForBooking.ToString()),
                            //CheckinImage = bookingCabinVM.CheckinImage,
                            CheckinTime = new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds),
                            CheckoutTime = new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds),
                            //Note = bookingCabinVM.Note,
                            DateCreated = new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day),
                            Status = 0
                        };
                    resBooking = await _bookingCabinApiClient.Add(obj);
                }
                else
                {
                    resBooking = await _bookingCabinApiClient.Update(objForCreate.Id, Guid.Parse(IdCabin.ToString()), Guid.Parse(idSubjectBooking.ToString()), Guid.Parse(idClassBooking.ToString()), Guid.Parse(IdShift.ToString()),
                    new BookingCabinUpdateVM()
                        {
                            Id = objForCreate.Id,
                            SubjectId = objForCreate.SubjectId,
                            ClassId = objForCreate.ClassId,
                            IdCabin = objForCreate.IdCabin,
                            IdShift = objForCreate.IdShift,
                            IdLectuter = objForCreate.IdLectuter,
                            CheckinImage = null,
                            CheckinTime = objForCreate.CheckinTime,
                            CheckoutTime = objForCreate.CheckoutTime,
                            Note = objForCreate.Note,
                            IndexOfBookingCabin = objForCreate.IndexOfBookingCabin,
                            DateCreated = objForCreate.DateCreated,
                            Status = 0
                        });
                }

                // tạo booking request
                if (resBooking)
                {
                    var StartTimeOfBR = new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds);
                    var EndTimeOfBR = new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds);

                    var booking = new BookingRequestCreateViewModel
                        {
                            ContentOfRequest = "Đã được chọn giúp cabin",
                            IdLectuter = Guid.Parse(IdLecturerForBooking.ToString()),
                            SendingTime = DateTime.Now,
                            SubjectId = Guid.Parse(idSubjectBooking.ToString()),
                            ClassId = Guid.Parse(idClassBooking.ToString()),
                            Status = 4,
                            ContenOfFeedBack = "Đã được chọn giúp cabin",
                            StartTime = StartTimeOfBR,
                            FeedBackTime = DateTime.Now,
                            EndTime = EndTimeOfBR
                        };

                    // check BookingRequest.Status=0 của giảng viên bên BookingRequestPage
                    // tồn tại ? tạo BookingRequest có status = 2 : status = 4
                    var listBookingRequest = await _bookingRequestRepo.GetAllBookingRequestAsync();

                    if (listBookingRequest.Any(c => c.IdLectuter == Guid.Parse(IdLecturerForBooking.ToString()) &&
                    c.SubjectId == Guid.Parse(idSubjectBooking.ToString()) &&
                    c.ClassId == Guid.Parse(idClassBooking.ToString()) &&
                    c.StartTime == StartTimeOfBR &&
                    c.EndTime == EndTimeOfBR
                    ))
                    {
                        booking.Status = 2;
                    }

                    resRequest = await _bookingRequestRepo.CreateBookingRequest(booking);
                }

                if (resBooking && resRequest)
                {
                    await Swal.FireAsync("Xếp Cabin", "Xếp Cabin Cho Lớp Học Thành Công", SweetAlertIcon.Success);
                }
                else
                {
                    await Swal.FireAsync("Xếp Cabin", "Xếp Cabin Cho Lớp Học Thất Bại", SweetAlertIcon.Error);
                }

            }
            else
            {
                _toastService.ShowError($"Không được để trống giảng viên / lớp-môn để xếp cabin");
            }
        }
        else
        {
            _toastService.ShowError($"Đã quá thời gian xếp/hủy cabin");
        }
        await Submit();
    }

    public async Task CancelCabin()
    {
        var shift = listShiftDefault.FirstOrDefault(c => c.Id == Guid.Parse(IdShift.ToString()));
        var StartShift = shift.StartTime;
        var EndShift = shift.EndTime;
        if (DateTime.Now < new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds))
        {

            CancelReason = CancelReason == null ? "" : CancelReason;
            if (CancelReason.Trim().Length == 0)
            {
                _toastService.ShowError($"Không được để trống lí do hủy cabin");
            }
            else
            {
                close = "none";
                // Xóa bookingcabin
                var listBookingCabin = await _bookingCabinApiClient.GetAll();

                var obj = listBookingCabin.FirstOrDefault(c => c.Status != 1 && c.SubjectId == IdSubject && c.ClassId == IdClass && c.IdShift == IdShift && c.IdLectuter == IdLecturer && c.IdCabin == IdCabin && c.DateCreated == new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day));
                var resBooking = obj == null ? true : await _bookingCabinApiClient.Delete(obj.Id, Guid.Parse(IdCabin.ToString()), Guid.Parse(IdSubject.ToString()), Guid.Parse(IdClass.ToString()), Guid.Parse(IdShift.ToString()));
                var resRequest = false;

                // tạo booking request
                if (resBooking)
                {
                    var StartTimeOfBR = new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, StartShift.Hours, StartShift.Minutes, StartShift.Seconds);
                    var EndTimeOfBR = new DateTime(_day.Value.Year, _day.Value.Month, _day.Value.Day, EndShift.Hours, EndShift.Minutes, EndShift.Seconds);

                    var booking = new BookingRequestCreateViewModel
                        {
                            ContentOfRequest = "Đã bị hủy cabin",
                            IdLectuter = Guid.Parse(IdLecturer.ToString()),
                            SendingTime = DateTime.Now,
                            SubjectId = Guid.Parse(IdSubject.ToString()),
                            ClassId = Guid.Parse(IdClass.ToString()),
                            Status = 5,
                            ContenOfFeedBack = "Hủy cabin vì: " + CancelReason,
                            StartTime = StartTimeOfBR,
                            FeedBackTime = DateTime.Now,
                            EndTime = EndTimeOfBR
                        };

                    var listBookingRequest = await _bookingRequestRepo.GetAllBookingRequestAsync();

                    if (listBookingRequest.Any(c => c.IdLectuter == Guid.Parse(IdLecturer.ToString()) &&
                        c.SubjectId == Guid.Parse(IdSubject.ToString()) &&
                    c.ClassId == Guid.Parse(IdClass.ToString()) &&
                    c.StartTime == StartTimeOfBR &&
                    c.EndTime == EndTimeOfBR
                    ))
                    {
                        booking.Status = 3;
                    }
                    resRequest = await _bookingRequestRepo.CreateBookingRequest(booking);
                }

                if (resBooking && resRequest)
                {
                    await Swal.FireAsync("Hủy Cabin", "Hủy Cabin Cho Lớp Học Thành Công", SweetAlertIcon.Success);
                }
                else
                {
                    await Swal.FireAsync("Hủy Cabin", "Hủy Cabin Cho Lớp Học Thất Bại", SweetAlertIcon.Error);
                }
            }
        }
        else
        {
            _toastService.ShowError($"Đã quá thời gian xếp/hủy cabin");
        }
        await Submit();
    }

    public async Task CheckTime(string? value)
    {
        _idFilterShift = value;

        listShift = listShiftDefault;
        if (_day != null && !string.IsNullOrEmpty(_idFilterShift))
        {
            listShift = listShiftDefault.Where(c => c.Id == Guid.Parse(_idFilterShift)).ToList();
        }
    }

    public void CheckDay(DateTime? value)
    {
        _day = value;
        if (_day != null)
        {
            classroom = false;
        }
    }

    public async Task CheckBuilding(string value)
    {
        _filterBuldingName = value;
        listCabinActive = listCabinActiveDefault;
        if (_idFilterSpecialized != Guid.Empty.ToString())
        {
            if (!string.IsNullOrEmpty(_idFilterSpecialized))
            {
                listCabinActive = listCabinActive.Where(c => listGroupCabin.Where(x => x.IdSpec == Guid.Parse(_idFilterSpecialized)).Any(x => x.IdCabin == c.Id)).ToList();
            }
            else
            {
                listCabinActive = listCabinActive.Where(c => !listGroupCabin.Any(x => x.IdCabin == c.Id)).ToList();
            }
        }
        if (!string.IsNullOrEmpty(_filterBuldingName))
        {
            listCabinActive = listCabinActive.Where(c => c.BuildingName == _filterBuldingName).ToList();
        }
    }

    public async Task CheckSpecialized(string value)
    {
        _idFilterSpecialized = value;
        listCabinActive = listCabinActiveDefault;
        if (_idFilterSpecialized != Guid.Empty.ToString())
        {
            if (!string.IsNullOrEmpty(_idFilterSpecialized))
            {
                listCabinActive = listCabinActive.Where(c => listGroupCabin.Where(x => x.IdSpec == Guid.Parse(_idFilterSpecialized)).Any(x => x.IdCabin == c.Id)).ToList();
            }
            else
            {
                listCabinActive = listCabinActive.Where(c => !listGroupCabin.Any(x => x.IdCabin == c.Id)).ToList();
            }
        }
        if (!string.IsNullOrEmpty(_filterBuldingName))
        {
            listCabinActive = listCabinActive.Where(c => c.BuildingName == _filterBuldingName).ToList();
        }
    }

    public async Task CheckLecturer(Guid? value)
    {
        IdLecturer = value;
    }

    public void LoadDaysOfWeek(DateTime date)
    {
        date = new DateTime(date.Year, date.Month, date.Day);
        daysOfWeek = new List<(string, DateTime)>();

        var dayOfWeek = date.DayOfWeek;
        DateTime monday = new DateTime();
        if (dayOfWeek == DayOfWeek.Sunday)
        {
            //xét chủ nhật là ngày cuối tuần
            monday = date.AddDays(-6);
        }
        else
        {
            int offset = dayOfWeek - DayOfWeek.Monday;
            monday = date.AddDays(-offset);
        }

        daysOfWeek.Add(new("Thứ 2", monday));
        for (int i = 1; i < 7; i++)
        {
            if (i == 6)
            {
                daysOfWeek.Add(new($"Chủ Nhật", monday.AddDays(i)));
            }
            else
            {
                daysOfWeek.Add(new($"Thứ {i + 2}", monday.AddDays(i)));
            }
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
