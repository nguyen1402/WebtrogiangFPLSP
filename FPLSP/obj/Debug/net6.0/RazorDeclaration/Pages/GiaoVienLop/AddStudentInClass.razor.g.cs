// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.GiaoVienLop
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Components.StudentCPComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Data.SeedWork;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Domain.Dtos.StudentUPDtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Domain.Entities.UserParts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Infrastructure.Services.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.GiaoVienTaoLop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.StudentClassUPVm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.StudentQuizUPVm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.StudentsUPVm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.Subject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
using FPLSP.Server.Infrastructure.ViewModels.SubmitHomeWorkVM;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
           [Authorize(Roles = "LecturerFPLSP")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/AddStudentInClass/{idClassNonDecrypt}/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}")]
    public partial class AddStudentInClass : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 126 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\GiaoVienLop\AddStudentInClass.razor"
       

    protected PopUpConfirm DeleConfirmation { set; get; }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {
        if (deleteconfirmed)
        {
            await Create();
        }
    }
    private async Task Creates()
    {
        ConfirmationTitle = $"Bạn có chắc muốn thêm sinh viên vào lớp học";
        DeleConfirmation.show();
    }
    [Parameter]
    public string ConfirmationTitle { get; set; }
    [Parameter]
    public string idClassNonDecrypt { get; set; }
    [Parameter]
    public string specializedIdNonDecrypt { get; set; }
    [Parameter]
    public string lecuIdNonDecrypt { get; set; }
    [Parameter]
    public string subjectIdNonDecrypt { get; set; }


    public string idClass = "";

    public string specializedId ="";

    public string lecuId ="";

    public string subjectId= "";

    [Parameter]
    public string Error { get; set; }

    AddsutdentInClassTextAre addsutdentInClassText { get; set; }
    [Inject]
    public IStudentUPRepo _studentUPRepo { get; set; }


    //private readonly IHttpContextAccessor _httpContextAccessor;
    //private readonly IHostingEnvironment _hostingEnvironment;
    //private readonly IMapper _mapper;

    //private List<ExcelErrors> _listexcelErrors = new List<ExcelErrors>();

    //private string Partern = "^[a-z]{3,13}[0-9]{5}@fpt.edu.vn";

    [Inject]
    public IStudentClassUPRepo _reportStudentClassUPRepo { get; set; }
    [Inject]
    public IStudentQuizUPRepo _studentQuizUPRepo { get; set; }
    [Inject]
    public ICopySubjectInClassRepo ICopySubjectInClassRepo { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }
    [Inject]
    public IClassSubjectApiClient _iClassSubjectApiClient { get; set; }

    [Inject]
    public ISubmitHomeWorkApiClient _SubmitHomeWorkApiClient { get; set; }

    [Inject]
    public ISubmitHomeworkForStudentRepo _submitHomeworkForStudentRepo { get; set; }
    [Inject]
    public ILecturersCPRepo _lecturersCPRepo { get; set; }
    [Inject] private IToastService _toastService { get; set; }

    private SubjectClassVM subjectClassVM { get; set; } = new SubjectClassVM();
    private int encounter;
    public List<StudentUpDto> _lststudentUpDtosExcel { get; set; } = new List<StudentUpDto>();
    public List<StudentUpDto> _lststudentUpDtosALL { get; set; } = new List<StudentUpDto>();

    public List<StudentUpDto> _liststudentClassJoin { get; set; } = new List<StudentUpDto>();
    public List<StudentClassUP> _lstStudentClassUPDtos { get; set; } = new List<StudentClassUP>();
    //public List<SubjectClassUP> _lstsubjectClassUPs { get; set; } = new List<SubjectClassUP>();
    public List<ClassUp> _lstClassUps { get; set; } = new List<ClassUp>();
    public List<StudentUpDto> _lstStudentUpDtosExist { get; set; } = new List<StudentUpDto>();
    public List<StudentUpDto> _lstStudentUpDtosShow { get; set; } = new List<StudentUpDto>();
    public List<SubjectClassUP> _lstSubjectClassUPsAll { get; set; } = new List<SubjectClassUP>();
    public List<Guid?> lstGuidIdStudent { get; set; } = new List<Guid?>();

    public List<StudentUpDto> _lstStudentUpCheck { get; set; } = new List<StudentUpDto>();

    private List<ExcelErrors> _lstErrr = new List<ExcelErrors>();
    private bool IsDisabled = false;
    private bool Check = false;
    IBrowserFile selectedFiles;
    public ListIdQuiz _listIdQuizzes = new ListIdQuiz();
    private StudentUPListSearchVm studentUPListSearchVm = new StudentUPListSearchVm();
    private StudentClassUPCreateVm _studentClassUPCreateVm = new StudentClassUPCreateVm();
    private StudentQuizCreateUPVM _studentQuizCreateUPVM = new StudentQuizCreateUPVM();
    private SubmitHomeWorkCreateVM createSubmit = new SubmitHomeWorkCreateVM();

    private string JoinCodeSubjectClass = string.Empty;
    private Random random = new Random();

    //public AddStudentInClass(IHttpContextAccessor httpContextAccessor, IHostingEnvironment hostingEnvironment, IMapper mapper)
    //{
    //    _httpContextAccessor = httpContextAccessor;
    //    _hostingEnvironment = hostingEnvironment;
    //    _mapper = mapper;
    //}

    public bool ShowAuthError { get; set; }
    public string testAre { get; set; }

    public MetaData MetaData { get; set; } = new MetaData();

    public List<SpecializedDto> lstSpecAll { get; set; } = new List<SpecializedDto>();
    [Inject]
    public ISpecializedCPRepo _iSpecializedClient { get; set; }

    [Inject] public ISubjectUPRepo _subjectUPRepo { get; set; }
    public List<SubjectDto> SubjectUPList { get; set; } = new List<SubjectDto>();

    private SubjectListSearch SubjectListSearch = new SubjectListSearch();
    [Inject]
    public CryptoServices _cryptoServices { get; set; }


    private async Task OnConfirmationUpdate(bool submitConfirmed)
    {
        if (submitConfirmed)
        {
            _lststudentUpDtosExcel.Clear();
            var LectureById = await _lecturersCPRepo.GetLecturerListById(Guid.Parse(lecuId));
            var idTrain = LectureById.TrainingFacilitiesId.Value;
            _lststudentUpDtosExcel = await _reportStudentClassUPRepo.GetListSTTestAre(testAre,idTrain);
            _toastService.ShowSuccess($"Thêm danh sách tạm thành công {_lststudentUpDtosExcel.Count()} sinh viên");
        }
        else
        {
            _toastService.ShowError($"Thêm danh sách thất bại");
        }

        await OnInitializedAsync();
    }
    private async Task pushTextAre(string text)
    {
        testAre = text;
    }

    protected async override Task OnInitializedAsync()
    {
        lecuId = _cryptoServices.Decrypt(lecuIdNonDecrypt.Replace("I0H", "/"));
        subjectId = _cryptoServices.Decrypt(subjectIdNonDecrypt.Replace("I0H", "/"));
        specializedId = _cryptoServices.Decrypt(specializedIdNonDecrypt.Replace("I0H", "/"));
        idClass = _cryptoServices.Decrypt(idClassNonDecrypt.Replace("I0H", "/"));

        _lststudentUpDtosALL = new List<StudentUpDto>();
        studentUPListSearchVm = new StudentUPListSearchVm();
        _lstStudentUpDtosShow = new List<StudentUpDto>();

        _lstStudentUpCheck = await _studentUPRepo.GetAllStudentDtosAsync();

        await GetTasks();
    }

    private async void OnFileSelected(InputFileChangeEventArgs e)
    {
        _lststudentUpDtosExcel.Clear();
        selectedFiles = e.File;
        this.StateHasChanged();
    }
    private async Task OnText(string textAre1)
    {
        addsutdentInClassText.show();

        testAre = textAre1;
    }
    private async void Upload()
    {

    }
    private async Task GetTasks()
    {
        try
        {
            for (var i = 0; i < 15; i++)
            {
                encounter = i;
            }
            var SubjectUPListpagingResponse1 = await _subjectUPRepo.GetSubjects(Guid.Parse(specializedId), SubjectListSearch);
            SubjectUPList = SubjectUPListpagingResponse1.Items;
            lstSpecAll = await _iSpecializedClient.GetAll();

            _lstStudentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
            //var pagingResponse = await _studentUPRepo.GetStudentUPList(studentUPListSearchVm);
            //_lststudentUpDtosALL = pagingResponse.Items;

            var items = await _studentUPRepo.GetAllStudentDtosAsync();



            _lstSubjectClassUPsAll = await _iClassSubjectApiClient.GetAllSubjectClass();

            _listIdQuizzes = await _iClassSubjectApiClient.GetListIDQuiz(Guid.Parse(subjectId));

            _lstClassUps = await _iClassSubjectApiClient.GetlstClassUP(Guid.Parse(subjectId));

            foreach (var ClassUP in _lstClassUps)
            {
                var lsjoicode = _lstSubjectClassUPsAll.Where(c => c.SubjectId == Guid.Parse(subjectId)).Select(c => c.JoinCode).ToList();
                var lstGuidIdStudent = _lstStudentClassUPDtos.Where(c => lsjoicode.Contains(c.JoinCodeAsign)).Select(c => c.StudentId).ToList();

                var Lststudents = items.Where(c => lstGuidIdStudent.Contains(c.Id)).ToList();


                foreach (var student in Lststudents)
                {
                    _lstStudentUpDtosExist.Add(student);
                }
            }

            _lststudentUpDtosALL = items;
            for (int i = 0; i < _lststudentUpDtosALL.Count(); i++)
            {
                foreach (var studentExist in _lstStudentUpDtosExist)
                {
                    if (_lststudentUpDtosALL.Any(c => c.Id == studentExist.Id))

                    {
                        _lststudentUpDtosALL.Remove(studentExist);
                    }

                }
            }
            foreach (var item in _lststudentUpDtosALL.Where(c => c.StudentName == null).ToList())
            {
                _lststudentUpDtosALL.Remove(item);
            }



            if (string.IsNullOrEmpty(studentUPListSearchVm.Status) == false)
            {
                _lststudentUpDtosALL = _lststudentUpDtosALL.Where(x => x.Status == Convert.ToInt32(studentUPListSearchVm.Status)).ToList();
            }
            if (studentUPListSearchVm.NameStudent != null)
            {
                _lststudentUpDtosALL = _lststudentUpDtosALL.Where(x => x.StudentName.ToLower().Contains(studentUPListSearchVm.NameStudent.ToLower()) || x.StudentCode.ToLower().Contains(studentUPListSearchVm.NameStudent.ToLower())).ToList();
            }

            var data = _lststudentUpDtosALL.Skip((studentUPListSearchVm.PageNumber - 1) * studentUPListSearchVm.PageSize).Take(studentUPListSearchVm.PageSize).ToList();
            var lstpage = new PageList<StudentUpDto>(data,
                _lststudentUpDtosALL.Count(),
                studentUPListSearchVm.PageNumber,
                studentUPListSearchVm.PageSize);
            _lststudentUpDtosALL = lstpage.Items;
            MetaData = lstpage.MetaData;
            if (_lstStudentUpCheck.Count() > 0)
            {
                foreach (var item in _lststudentUpDtosALL)
                {
                    if (_lstStudentUpCheck.Any(c => c.Id == item.Id))
                    {

                        var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
                        item.IsChecked = a.IsChecked;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private async Task SelectedPage(int page)
    {
        foreach (var item in _lststudentUpDtosALL)
        {
            var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
            a.IsChecked = item.IsChecked;
        }
        studentUPListSearchVm.PageNumber = page;
        Check = false;
        await GetTasks();
    }
    private async Task Create()
    {
        try
        {
            foreach (var item in _lststudentUpDtosALL)
            {
                var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
                a.IsChecked = item.IsChecked;
            }
            int countDouble = 0;
            //_lststudentUpDtosExcel = await _reportStudentClassUPRepo.LoadingBigData(selectedFiles);

            //_lstErrr = await _reportStudentClassUPRepo.GetListErr();
            _lstSubjectClassUPsAll = await _iClassSubjectApiClient.GetAllSubjectClass();
            JoinCodeSubjectClass = _lstSubjectClassUPsAll.Where(c => c.ClassId == Guid.Parse(idClass) && c.SubjectId == Guid.Parse(subjectId)).Select(c => c.JoinCode).FirstOrDefault();

            var AllStudenInClass = await _reportStudentClassUPRepo.GetAllStudentUPAsync();

            var countStudentInClass = AllStudenInClass.Where(c => c.JoinCodeAsign == JoinCodeSubjectClass).ToList().Count();
            var subjecclassUPls = await _iClassSubjectApiClient.GetAllSubjectClass();
            var subjecclss = subjecclassUPls.Where(c => c.JoinCode == JoinCodeSubjectClass).FirstOrDefault();
            if (_lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() + countStudentInClass > subjecclss.StudentAmount)
            {
                _toastService.ShowError("Số lượng sinh viên hiện tại là:" + countStudentInClass + "Thêm " + _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() + "sinh viên " + "đã vượt số lượng hạn mức là:" + subjecclss.StudentAmount);
                return;
            }
            if (_lststudentUpDtosExcel != null)
            {
                if (_lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() + _lststudentUpDtosExcel.Count() + countStudentInClass > subjecclss.StudentAmount)
                {
                    _toastService.ShowError("Số lượng sinh viên hiện tại là:" + countStudentInClass + "Thêm " + _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() + "sinh viên và bằng excel" + _lststudentUpDtosExcel.Count() + "đã vượt số lượng hạn mức là:" + subjecclss.StudentAmount);
                    return;
                }
            }
            try
            {
                if (_lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() > 0)
                {
                    foreach (var x in _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList())
                    {
                        _lstStudentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
                        if (_lstStudentClassUPDtos.Any(c => c.JoinCodeAsign == JoinCodeSubjectClass && c.StudentId == x.Id))

                        {
                            countDouble++;
                            continue;
                        }

                        _studentClassUPCreateVm = new StudentClassUPCreateVm()
                            {
                                ClassId = Guid.Parse(idClass),
                                JoinCodeAsign = JoinCodeSubjectClass,
                                StatusOfStudent = 1,
                                Status = 0,
                                StudentId = x.Id
                            };
                        _reportStudentClassUPRepo.CreateStudentClassUP(_studentClassUPCreateVm);
                        //foreach (var item in _listIdQuizzes.idquiz)
                        //{
                        //    _studentQuizCreateUPVM = new StudentQuizCreateUPVM()
                        //        {
                        //            CounterTurn = 0,
                        //            QuizId = item,
                        //            StudentId = x.Id,
                        //            ScoreQuizOfStudent = 0,
                        //            Status = 0
                        //        };
                        //    _studentQuizUPRepo.Create(_studentQuizCreateUPVM);
                        //}
                        lstGuidIdStudent.Add(x.Id);

                    }
                }
            }
            catch
            {

                _toastService.ShowError("Thêm thất bại");
            }


            try
            {

                if (_lststudentUpDtosExcel != null)
                {
                    foreach (var x in _lststudentUpDtosExcel)
                    {
                        foreach (var studentUpDtosALL in _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList())
                        {
                            if (x.Email == studentUpDtosALL.Email)
                            {
                                countDouble++;
                                continue;
                            }
                        }
                        _lstStudentClassUPDtos = await _reportStudentClassUPRepo.GetAllStudentUPAsync();
                        if (_lstStudentClassUPDtos.Any(c => c.JoinCodeAsign == JoinCodeSubjectClass && c.StudentId == x.Id))
                        {
                            continue;
                        }

                        if (countStudentInClass >= subjecclss.StudentAmount)
                        {
                            continue;
                        }
                        _studentClassUPCreateVm = new StudentClassUPCreateVm()
                            {
                                ClassId = Guid.Parse(idClass),
                                JoinCodeAsign = JoinCodeSubjectClass,
                                StatusOfStudent = 1,
                                Status = 0,
                                StudentId = x.Id
                            };
                        _reportStudentClassUPRepo.CreateStudentClassUP(_studentClassUPCreateVm);
                        //foreach (var item in _listIdQuizzes.idquiz)
                        //{
                        //    _studentQuizCreateUPVM = new StudentQuizCreateUPVM()
                        //        {
                        //            CounterTurn = 0,
                        //            QuizId = item,
                        //            StudentId = x.Id,
                        //            ScoreQuizOfStudent = 0,
                        //            Status = 0
                        //        };
                        //    _studentQuizUPRepo.Create(_studentQuizCreateUPVM);
                        //}
                        lstGuidIdStudent.Add(x.Id);
                    }
                }
            }
            catch
            {

                _toastService.ShowError("Thêm Excel thất bại");

            }

            try
            {
                if (lstGuidIdStudent.Count() > 0)
                {
                    var AllSubMit = await _submitHomeworkForStudentRepo.Student_GetAllAsync();
                    var SubmitIdLesson = AllSubMit.Where(c => c.IdSubject == Guid.Parse(subjectId) && c.IdClass == Guid.Parse(idClass)).ToList();

                    var GroupIDLesson = SubmitIdLesson.GroupBy(g => g.Titile).Select(c => new SubmitHomeWork()
                        {
                            Id = c.Where(w => w.Titile == c.Key).Select(c => c.Id).FirstOrDefault(),
                            IdClass = c.Where(w => w.Titile == c.Key).Select(c => c.IdClass).FirstOrDefault(),
                            IdLesson = c.Where(w => w.Titile == c.Key).Select(c => c.IdLesson).FirstOrDefault(),
                            IdStudent = c.Where(w => w.Titile == c.Key).Select(c => c.IdStudent).FirstOrDefault(),
                            IdSubject = c.Where(w => w.Titile == c.Key).Select(c => c.IdSubject).FirstOrDefault(),
                            EndTime = c.Where(w => w.Titile == c.Key).Select(c => c.EndTime).FirstOrDefault(),
                            Status = c.Where(w => w.Titile == c.Key).Select(c => c.Status).FirstOrDefault(),
                            Titile = c.Where(w => w.Titile == c.Key).Select(c => c.Titile).FirstOrDefault(),
                            StartedDate = c.Where(w => w.Titile == c.Key).Select(c => c.StartedDate).FirstOrDefault(),
                            SubmitLink = c.Where(w => w.Titile == c.Key).Select(c => c.SubmitLink).FirstOrDefault(),
                            SubmitTime = c.Where(w => w.Titile == c.Key).Select(c => c.SubmitTime).FirstOrDefault(),
                        }).ToList();
                    foreach (var item in GroupIDLesson)
                    {
                        createSubmit = new SubmitHomeWorkCreateVM()
                            {
                                EndTime = item.EndTime,
                                IdLesson = item.IdLesson,
                                IdSubject = item.IdSubject,
                                LsIdStudent = lstGuidIdStudent,
                                StartedDate = item.StartedDate,
                                SubmitTime = null,
                                IdClass = item.IdClass,
                                Titile = item.Titile
                            };
                        if (AllSubMit.Any(c => c.IdClass == createSubmit.IdClass && c.IdLesson == createSubmit.IdLesson && c.IdSubject == createSubmit.IdSubject && lstGuidIdStudent.Any(a => a == c.IdStudent)))
                        {
                            continue;
                        }
                        else
                        {
                            await _SubmitHomeWorkApiClient.Add(createSubmit);
                        }
                    }
                }
            }
            catch
            {

                _toastService.ShowError("Thêm bài tập thất bại");
            }
            int count = _lstStudentUpCheck.Where(c => c.IsChecked == true).ToList().Count() - countDouble;
            if (_lststudentUpDtosExcel.Count() > 0)
            {
                count += _lststudentUpDtosExcel.Count();
            }
            _toastService.ShowSuccess($"Thêm thành công {count} và {countDouble} sinh viên trùng");

            var url = Path.Combine($"/ViewChiTitet/{idClassNonDecrypt}/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
            Navigation.NavigateTo(url);
        }
        catch
        {

            _toastService.ShowError("Thêm thất bại");
        }
    }

    private async Task RetoSubject()
    {
        var url = Path.Combine($"/Giaovien/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        Navigation.NavigateTo(url);
    }
    private async Task ResToSpec()
    {
        var url = Path.Combine($"/LectuterSpecializedSubjectls/{lecuIdNonDecrypt}/{specializedIdNonDecrypt}");
        Navigation.NavigateTo(url);
    }
    public string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
    void CheckAllExpense(object checkValue)
    {
        if (Convert.ToBoolean(checkValue) == false)
        {
            _lststudentUpDtosALL.ToList().ForEach(e => e.IsChecked = false);
            //_lstStudentUpCheck.ToList().ForEach(e => e.IsChecked = false);
        }
        else
        {
            _lststudentUpDtosALL.ToList().ForEach(e => e.IsChecked = true);
            //_lstStudentUpCheck.ToList().ForEach(e => e.IsChecked = true);
        }
    }
    void CheckManual(Guid st, bool check)
    {
        if (check == true)
        {
            foreach (var x in _lststudentUpDtosALL.Where(c => c.Id == st))
            {
                x.IsChecked = false;
            }
        }
        if (check == false)
        {
            foreach (var x in _lststudentUpDtosALL.Where(c => c.Id == st))
            {
                x.IsChecked = true;
            }
        }
    }
    private async Task Quaylai()
    {
        var url = Path.Combine($"/DetailsClassLeccu/{idClassNonDecrypt}/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        Navigation.NavigateTo(url);
    }

    public async Task SearchStudentUP(StudentUPListSearchVm studentUPListSearch)
    {

        studentUPListSearchVm = studentUPListSearch;
        foreach (var item in _lststudentUpDtosALL)
        {
            var a = _lstStudentUpCheck.FirstOrDefault(c => c.Id == item.Id);
            a.IsChecked = item.IsChecked;
        }
        await GetTasks();
    }
    private async Task RedirectToDetails()
    {
        var url = Path.Combine($"/ViewChiTitet/{idClassNonDecrypt}/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        Navigation.NavigateTo(url);
    }
    private async Task Mon()
    {
        var url = Path.Combine($"/Giaovien/{specializedIdNonDecrypt}/{lecuIdNonDecrypt}/{subjectIdNonDecrypt}");
        Navigation.NavigateTo(url);
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
