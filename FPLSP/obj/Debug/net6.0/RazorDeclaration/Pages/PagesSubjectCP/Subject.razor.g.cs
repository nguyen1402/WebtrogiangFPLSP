// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.PagesSubjectCP
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Components.Subject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Repositories;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Server.Data.SeedWork;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Server.Infrastructure.ViewModels.Lesson;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Server.Infrastructure.ViewModels.LessonContentCP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Server.Infrastructure.ViewModels.ResourceLink;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using FPLSP.Server.Infrastructure.ViewModels.Subject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
           [Authorize(Roles = "AdminCore,AdminCS")]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/subjects/{idpecNonDecrypt}")]
    public partial class Subject : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 934 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
       

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public int current { get; set; } = 0;

    public StepItem[] steps =
    {
        new StepItem {Title = "Danh sách môn học", Content = ""},
        new StepItem {Title = "Thêm môn học", Content = "SubjectCreate"},
        new StepItem {Title = "Sửa môn học", Content = "SubjectUpdate"},
        new StepItem {Title = "Thêm bài học", Content = "LessonCreate"},
        new StepItem {Title = "Sửa bài học", Content = "LessonUpdate"},
        new StepItem {Title = "Thêm link tài nguyên", Content = "LinkCreate"},
        new StepItem {Title = "Thêm nôi dung bài học", Content = "LessonContenCreate"},
        new StepItem {Title = "Sửa nội dung bài học", Content = "LessonContenUpdate"},
    };



#line default
#line hidden
#nullable disable
#nullable restore
#line 958 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\PagesSubjectCP\Subject.razor"
       
    public List<SubjectDto> SubjectCPList { get; set; } = new List<SubjectDto>();
    public MetaData MetaData { get; set; } = new MetaData();
    [Parameter]
    public string idpecNonDecrypt { get; set; }
    public DateTime time { get; set; }
    public TimeSpan tg;
    public string idpec = "";
    public string image { get; set; }
    //private PagingParameters _subjectParameters = new PagingParameters();
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public ISubjectClient _iSubjectClient { get; set; }

    private SubjectCPSearch SubjectListSearch = new SubjectCPSearch();
    public string Error { get; set; }
    [Inject]
    public ISpecializedCPRepo _iSpecialized { get; set; }
    [Inject]
    public ILessonCPRepo _iLessonClient { get; set; }

    [Inject]
    public CryptoServices _cryptoServices { get; set; }

    [Inject]
    public ILessonContentCPRepo _iLessonContentClient { get; set; }
    [Inject]
    public IResourceLinkRepo _iResourcelinkClient { get; set; }
    public SpecializedDto specializedDto = new SpecializedDto();
    protected Comfirmation DeleteConfirmationSubject { get; set; }
    protected Comfirmation DeleteConfirmationLesson { get; set; }
    protected Comfirmation DeleteConfirmationLessonContent { get; set; }
    protected Comfirmation DeleteConfirmationLink { get; set; }

    protected Comfirmation CreateConfirmationLesson { get; set; }
    protected Comfirmation CreateConfirmationLessonContent { get; set; }
    protected Comfirmation CreateConfirmationLessonContentToLink { get; set; }
    public Guid idSubject { get; set; }
    private TimelineAlign _timelineAlign { get; set; } = TimelineAlign.Start;
    private int stt = 0;
    private SubjectCreateVM subjectCreate = new SubjectCreateVM();
    private SubjectUpdateVM subjectUpdate = new SubjectUpdateVM();
    private List<Guid> _removeSubject = new List<Guid>();
    public List<LessonDto> ListLesson { get; set; } = new List<LessonDto>();
    public List<LessonContentDto> ListLessonContent { get; set; } = new List<LessonContentDto>();
    private List<ResourceLinkDto> lsDtoLink;
    private LessonListSearch _parametersLesson = new LessonListSearch();
    private LessonContentListSearch _parametersLessonContent = new LessonContentListSearch();
    private bool Check = false;
    [Inject] private IToastService _toastService { get; set; }
    private Guid _idSubject;
    private Guid _idLesson;
    private Guid _idLessonContent;
    private Guid _idResourceLink;
    private string _idPathLink;

    string flag;

    List<SubjectDto> lstSubjectDtosCreateLink = new List<SubjectDto>();
    // Lesson
    private SubjectDto subject { get; set; } = new SubjectDto();
    private LessonCreateVM lessonCreate = new LessonCreateVM();
    private LessonUpdateVM lessonUpdate = new LessonUpdateVM();

    private LessonContentCreateVM lessonContentCreate = new LessonContentCreateVM();
    public LessonContentUpdateVM lessonContentUpdate = new LessonContentUpdateVM();

    private ResourceLinkCreateVM LinkCreate = new ResourceLinkCreateVM();
    private ResourceLinkUpdateVM LinkUpdate = new ResourceLinkUpdateVM();
    Uri uri;
    string maxlevel = "";
    string IdCoSo = "";
    protected async override Task OnInitializedAsync()
    {
        idpec = _cryptoServices.Decrypt(idpecNonDecrypt.Replace("I0H", "/"));
        _idLesson = Guid.Empty;
        _idLessonContent = Guid.Empty;
        _idResourceLink = Guid.Empty;
        _idPathLink = "";
        flag = null;
        SubjectListSearch.Status = 1;
        lstSubjectDtosCreateLink = await _iSubjectClient.GetAllSubjectByIdSpecialzed(Guid.Parse(idpec));
        uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (string.IsNullOrEmpty(uri.Query) == false)
        {
            var urifist = uri.Query.Split("?")[1];
            maxlevel = _cryptoServices.Decrypt(urifist.Split("LDN01")[0].Replace("I0H", "/"));
            IdCoSo = _cryptoServices.Decrypt(urifist.Split("LDN01")[1].Replace("I0H", "/"));
        }
        await GetTasks();

    }
    #region Lesson
    private async Task RedirectToCreatLesson(Guid idSubject)
    {
        lessonCreate = new LessonCreateVM();
        lessonCreate.Id = Guid.NewGuid();
        var countlesson = await _iLessonClient.GetAll((_idSubject));
        lessonCreate.Status = 1;
        lessonCreate.Index = countlesson.Count() + 1;
        _idSubject = idSubject;
        await GetTasks();
        flag = "LessonCreate";
        current = 3;

    }
    private async Task RedirectToUpdateLesson(Guid idsubject, Guid idLesson)
    {
        _idSubject = idsubject;
        _idLesson = idLesson;
        var lessondb = await _iLessonClient.GetbyId((idLesson));

        lessonUpdate = new LessonUpdateVM()
            {
                Status = lessondb.Status,
                LessonName = lessondb.LessonName,
                Descriptions = lessondb.Descriptions,
                Index = lessondb.Index
            };
        await GetTasks();
        flag = "LessonUpdate";
        current = 4;

    }
    Guid FlagLessonId = Guid.Empty;
    private async Task CreateLesson()
    {

        var result = await _iLessonClient.Create((_idSubject), lessonCreate);
        if (result != 1)
        {
            _toastService.ShowError("Thêm bài học không thành công");
            await GetTasks();
        }
        else
        {
            _toastService.ShowSuccess("Thêm bài học thành công");
            CreateConfirmationLessonContent.show();
            FlagLessonId = lessonCreate.Id;
            lessonCreate = new LessonCreateVM();
            await GetTasks();
        }
    }
    public async Task OnConfirmationCreateLessonContentToLesson(bool confirmed)
    {
        if (confirmed)
        {
            await RedirectToCreatLessonContent(_idSubject, FlagLessonId);
        }

    }
    private async Task UpdateLesson()
    {

        var result = await _iLessonClient.Update((_idLesson), lessonUpdate);

        if (result != 1)
        {
            Error = "Lỗi";
        }
        else
        {
            _toastService.ShowSuccess("Cập nhật thành công");

            await GetTasks();
        }
    }
    public async void DeleteLesson(Guid id)
    {
        _idLesson = id;
        DeleteConfirmationLesson.show();
    }
    public async Task OnConfirmationDeleteLesson(bool deleteconfirmed)
    {

        stt = 0;
        if (deleteconfirmed && _idLesson == null)
        {
            _toastService.ShowError("Bạn chưa chọn đối tượng để đổi trạng thái");
            await GetTasks();

        }
        else if (deleteconfirmed && _idLesson != null)
        {
            var result = await _iLessonClient.Delete((_idLesson));
            if (result == 1)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                await GetTasks();
            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");
                await GetTasks();

            }
        }
        _idLesson = Guid.Empty;

        Check = false;
    }
    #endregion

    #region LessonContent
    private async Task RedirectToCreatLessonContent(Guid idSubject, Guid idLesson)
    {
        lessonContentCreate = new LessonContentCreateVM();
        _idSubject = idSubject;
        _idLesson = idLesson;
        var alllesson = await _iLessonContentClient.GetAll((_idLesson));
        if (alllesson.Count() < 9)
        {
            lessonContentCreate.LessonContentCode = "BH0" + (alllesson.Count() + 1);
        }
        else
        {
            lessonContentCreate.LessonContentCode = "BH" + (alllesson.Count() + 1);
        }
        lessonContentCreate.Status = 1;
        var countlessoncontent = await _iLessonContentClient.GetAll((_idLesson));
        lessonContentCreate.Index = countlessoncontent.Count() + 1;
        await GetTasks();
        flag = "LessonContenCreate";
        current = 6;

    }
    private void ChangedLinkNameCreateLessonContent(ChangeEventArgs args)
    {
        foreach (var item in lsDtoLink)
        {
            if (item.ResourcesTitle == Convert.ToString(args.Value))
            {
                lessonContentCreate.Path = item.Path;
            }
        }

    }
    private void ChangedLinkNameUpdateLessonContent(ChangeEventArgs args)
    {
        foreach (var item in lsDtoLink)
        {
            if (item.ResourcesTitle == Convert.ToString(args.Value))
            {
                lessonContentUpdate.Path = item.Path;
            }
        }

    }
    private async Task RedirectToUpdateLessonContent(Guid idSubject, Guid idLesson, Guid idLessonContent)
    {

        _idSubject = idSubject;
        _idLesson = idLesson;
        _idLessonContent = idLessonContent;
        lessonContentUpdate = await _iLessonContentClient.GetbyId((idLessonContent));
        var a = lessonContentUpdate.PathId();
        await GetTasks();
        flag = "LessonContenUpdate";
        current = 7;

    }
    private async Task CreateLessonContent()
    {
        var result = await _iLessonContentClient.Create(_idLesson, lessonContentCreate);
        if (result != 1)
        {
            _toastService.ShowError("Lỗi! Vui lòng thử lại");
            await GetTasks();
        }
        else
        {
            _toastService.ShowSuccess("Thêm thành công");
            lessonContentCreate = new LessonContentCreateVM();
            await GetTasks();
        }
    }
    private async Task UpdateLessonContents()
    {

        var result = await _iLessonContentClient.Update((_idLessonContent), lessonContentUpdate);
        if (result != 1)
        {
            _toastService.ShowError("lỗi! Vui lòng thử lại");
            await GetTasks();
        }
        else
        {
            _toastService.ShowSuccess("Cập nhật thành công");
            await GetTasks();
        }
    }
    public async void DeleteLessonContent(Guid id)
    {
        _idLesson = id;
        DeleteConfirmationLessonContent.show();
    }
    public async Task OnConfirmationDeleteLessonContent(bool deleteconfirmed)
    {

        stt = 0;
        if (deleteconfirmed && _idLessonContent == Guid.Empty)
        {
            _toastService.ShowError("Bạn chưa chọn đối tượng để đổi trạng thái");
            await GetTasks();
            //NavigationManager.NavigateTo($"/lesson/{idspec}/{idsubject}");
        }
        else if (deleteconfirmed && _idLessonContent != Guid.Empty)
        {
            var result = await _iLessonContentClient.Delete((_idLessonContent));
            if (result == 1)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                await GetTasks();
            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");
                await GetTasks();

            }
        }

        _idLessonContent = Guid.Empty;

        Check = false;
    }
    #endregion


    #region Link
    private async Task RedirectToCreatLink()
    {
        LinkCreate = new ResourceLinkCreateVM();
        flag = "LinkCreate";
        current = 5;


    }
    public async Task OnConfirmationCreateLessonContentToLink(bool confirmed)
    {
        if (confirmed)
        {
            await RedirectToCreatLessonContent(_idSubject, FlagLessonId);
            _idPathLink = LinkCreate.Path;
        }

    }
    private async Task RedirectToUpdateLink()
    {
        flag = "LinkUpdate";
        LinkUpdate = await _iResourcelinkClient.GetbyId((_idResourceLink));

    }
    private async Task CreateLink()
    {
        var allResourceLink = await _iResourcelinkClient.GetAllAsync();
        var title = allResourceLink.Where(p => p.ResourcesTitle == LinkCreate.ResourcesTitle);
        var path = allResourceLink.Where(p => p.Path == LinkCreate.Path);
        if (title.Count() > 0)
        {
            _toastService.ShowError("Tiêu đề đã tồn tại");
        }
        else
        {

            var result = await _iResourcelinkClient.Create(LinkCreate);

            if (result != 1)
            {
                _toastService.ShowError("Lỗi! Vui lòng thử lại");
            }
            else
            {
                _toastService.ShowSuccess("Thêm mới thành công");
                LinkCreate = new ResourceLinkCreateVM();
                CreateConfirmationLessonContentToLink.show();
                await GetTasks();
            }
        }

    }

    private async Task UpdateLink()
    {

        var result = await _iResourcelinkClient.Update((_idResourceLink), LinkUpdate);

        if (result != 1)
        {
            _toastService.ShowError("Lỗi! Vui lòng thử lại");
            await GetTasks();
        }
        else
        {
            _toastService.ShowSuccess("Cập nhật thành công");
            await GetTasks();
        }
    }
    public async void DeleteLink(Guid id)
    {
        _idLesson = id;
        DeleteConfirmationLink.show();
    }
    public async Task OnConfirmationDeleteLink(bool deleteconfirmed)
    {

        stt = 0;
        if (deleteconfirmed && _idResourceLink == null)
        {
            _toastService.ShowError("Bạn chưa chọn đối tượng để đổi trạng thái");
            await GetTasks();
            //NavigationManager.NavigateTo($"/lesson/{idspec}/{idsubject}");
        }
        else if (deleteconfirmed && _idResourceLink != null)
        {
            var result = await _iResourcelinkClient.Delete((_idResourceLink));
            if (result == 1)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                await GetTasks();
            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");
                await GetTasks();
            }
        }

        _idResourceLink = Guid.Empty;

        Check = false;
    }
    #endregion
    #region Subject
    private async Task Undo()
    {
        SubjectListSearch.Name = "";
        SubjectListSearch.Status = 1;
        SubjectListSearch.PageNumber = 1;
        await GetTasks();

    }
    private void AssignImageUrlSubUpdate(string Image) => subjectUpdate.Image = Image;

    private async Task UpdateSubject()
    {
        var result = await _iSubjectClient.UpdateSubject((_idSubject), subjectUpdate);
        if (result != 1)
        {
            _toastService.ShowError("Lỗi! Vui lòng thử lại");
            await GetTasks();
        }
        else
        {
            _toastService.ShowSuccess("Cập nhật thành công");
            await GetTasks();

        }
    }
    private void AssignImageUrlSubject(string imgUrl)
    {
        subject.Image = imgUrl;
    }
    private void AssignImageUrlSub(string imgUrl)
    {
        subjectCreate.Image = imgUrl;
    }
    Guid FlagSubjectId = Guid.Empty;
    private async Task CreateSubject()
    {

        subjectCreate.idspec = Guid.Parse(idpec);
        subjectCreate.Id = Guid.NewGuid();
        TimeSpan date = subjectCreate.EndDay - subjectCreate.StartDay;
        TimeSpan day = DateTime.Now - subjectCreate.EndDay;
        var allsubject = await _iSubjectClient.GetAllSubjectByIdSpecialzed(Guid.Parse(idpec));
        var subjectcode = allsubject.Where(p => p.SubjectCode == subjectCreate.SubjectCode).ToList();
        if (subjectcode.Count > 0)
        {
            _toastService.ShowError("Mã môn học đã được sử dụng");

        }
        else
        {
            var result = await _iSubjectClient.CreateSubject(subjectCreate);

            if (result != 1)
            {
                _toastService.ShowError("Lỗi");
            }
            else
            {
                _toastService.ShowSuccess("Thêm thành công");
                FlagSubjectId = subjectCreate.Id;
                subjectCreate = new SubjectCreateVM();
                CreateConfirmationLesson.show();
            }
        }



    }
    private async Task TimKiem()
    {
        await GetTasks();
    }
    private async Task ChangeValue(int value)
    {
        SubjectListSearch.Status = value;
        SubjectListSearch.Name = SubjectListSearch.Name;
        await GetTasks();
    }
    private void RedirectToCreate(string id)
    {
        var a = id.Replace("/", "I0H");
        var url = Path.Combine($"/createsubject/{a}?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    }
    public async void DeleteSubject(Guid id)
    {
        _idSubject = id;
        DeleteConfirmationSubject.show();
    }
    private async Task RedirectToListSubject()
    {

        _idLesson = Guid.Empty;
        _idLessonContent = Guid.Empty;
        _idResourceLink = Guid.Empty;
        _idPathLink = "";
        current = 0;
    }
    private async Task RedirectToSubjectCreate()
    {
        subjectCreate = new SubjectCreateVM();
        current = 1;
    }
    public async void RedirectToUpdateSubject(Guid id)
    {

        _idSubject = id;
        subjectUpdate = await _iSubjectClient.GetUpdateSubjectbyId((_idSubject));
        flag = "SubjectUpdate";
        current = 2;

    }
    public async Task OnConfirmationCreateLesson(bool confirmed)
    {
        if (confirmed)
        {
            await RedirectToCreatLesson(FlagSubjectId);
        }

    }
    public async Task OnConfirmationDeleteSubject(bool deleteconfirmed)
    {

        stt = 0;
        if (deleteconfirmed && _idSubject == null && _removeSubject.Count == 0)
        {
            _toastService.ShowError("Bạn chưa chọn đối tượng để đổi trạng thái");
            await GetTasks();

        }
        else if (deleteconfirmed && _idSubject != null)
        {
            var result = await _iSubjectClient.DeleteSubject((_idSubject));
            if (result == 1)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                await GetTasks();

            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");
                await GetTasks();

            }
        }
        else if (deleteconfirmed && _removeSubject != null)
        {

            var result = await _iSubjectClient.RemoveListSubjectCP(_removeSubject);
            if (result)
            {
                _toastService.ShowSuccess("Đổi trạng thái thành công");
                await GetTasks();

            }
            else
            {
                _toastService.ShowError("Đổi trạng thái thất bại");

                await GetTasks();

            }
        }

        _idSubject = Guid.Empty;
        _removeSubject = null;

        Check = false;
    }
    #endregion





    private void RedirectToUpdate(Guid id, string idspecialized)
    {
        var url = Path.Combine("/updatesubjetc/", id.ToString(), idspecialized);
        NavigationManager.NavigateTo(url);
    }

    //private async Task RedirectToLesson(string idspec, Guid idsubject)
    //{
    //    var url = Path.Combine("/lessonCreate/" + idspec.ToString() + "/" + idsubject.ToString());
    //    NavigationManager.NavigateTo(url);
    //}
    private async Task RedirectToQuiz(string idspecialzed, Guid idsubject)
    {
        var url = Path.Combine("/MainQuizsCP/" + _cryptoServices.Encrypt((idspecialzed).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idsubject.ToString()).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    }

    private async Task RedirectToLink()
    {
        var url = Path.Combine("/resourcelink/" + _cryptoServices.Encrypt((idpec).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((idSubject).ToString()).Replace("/", "I0H") + "/" + _cryptoServices.Encrypt((_idLesson).ToString()).Replace("/", "I0H") + $"?{_cryptoServices.Encrypt((maxlevel).ToString()).Replace("/", "I0H") + "LDN01" + _cryptoServices.Encrypt((IdCoSo).ToString()).Replace("/", "I0H")}");
        NavigationManager.NavigateTo(url);
    }


    private async Task GetTasks()
    {
        specializedDto = await _iSpecialized.GetbyId(Guid.Empty, Guid.Parse(idpec));
        // Link
        lsDtoLink = await _iResourcelinkClient.GetAllAsync();
        lsDtoLink = lsDtoLink.Where(c => c.IdSubject == _idSubject || c.IdSubject == Guid.Empty).ToList();
        //// Get Task Lesson Content
        //var pagingResponseLessonContent = await _iLessonContentClient.GetLessons(Guid.Parse(idlesson), _parametersLesson);
        //ListLessonContent = pagingResponseLessonContent.Items;
        ListLessonContent = await _iLessonContentClient.GetAllLessonContent();
        //// Get Task Lesson
        //var pagingResponseLesson = await _iLessonClient.GetLessons(Guid.Parse(idsubject), _parametersLessonContent);
        //ListLesson = pagingResponseLesson.Items;
        ListLesson = await _iLessonClient.GetAllLesson();
        // Get task Subject
        if (idSubject != Guid.Empty)
        {
            subject = await _iSubjectClient.GetSubjectbyId((idSubject));
        }
        var pagingResponseSubject = await _iSubjectClient.GetSubjects(Guid.Parse(idpec), SubjectListSearch);
        stt = 0;
        SubjectCPList = pagingResponseSubject.Items;
        foreach (var item in SubjectCPList)
        {
            item.SubjectName = item.SubjectCode + " - " + item.SubjectName;
        }
        MetaData = pagingResponseSubject.MetaData;
        time = DateTime.Now;
        if (SubjectCPList.Count() == 0)
        {
            await RedirectToSubjectCreate();
        }


    }
    private async Task SelectedPage(int page)
    {

        SubjectListSearch.PageNumber = page;
        Check = false;
        await GetTasks();
    }
    public async Task OnDelete(Guid id)
    {
        _idSubject = id;
        DeleteConfirmationSubject.show();
    }


    //void CheckManual(Guid reportId, bool check)
    //{
    //    stt = 0;
    //    if (check == true)
    //    {
    //        foreach (var x in SubjectCPList.Where(c => c.Id == reportId))
    //        {
    //            x.IsChecked = false;
    //        }
    //    }
    //    if (check == false)
    //    {
    //        foreach (var x in SubjectCPList.Where(c => c.Id == reportId))
    //        {
    //            x.IsChecked = true;
    //        }
    //    }
    //}
    //void DeleteAll()
    //{
    //    stt = 0;
    //    _removeSubject = SubjectCPList.Where(c => c.IsChecked == true).Select(c => c.Id).ToList();
    //    DeleteConfirmation.show();
    //}
    //void CheckAllExpense(object checkValue)
    //{
    //    stt = 0;
    //    if (Convert.ToBoolean(checkValue) == false)
    //    {
    //        SubjectCPList.ToList().ForEach(e => e.IsChecked = false);
    //    }
    //    else
    //    {
    //        SubjectCPList.ToList().ForEach(e => e.IsChecked = true);
    //    }
    //}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMessageService message { get; set; }
    }
}
#pragma warning restore 1591
