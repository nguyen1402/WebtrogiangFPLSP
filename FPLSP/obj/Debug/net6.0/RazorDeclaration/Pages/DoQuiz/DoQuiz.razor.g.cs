// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FPLSP.Pages.DoQuiz
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using FPLSP.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Data.Securities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Repositories.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Server.Domain.Dtos.DoQuizDtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Server.Domain.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Server.Domain.Dtos.StudentUPDtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Server.Domain.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using EventHandlers = Microsoft.AspNetCore.Components.Web.EventHandlers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Server.Infrastructure.ViewModels.DoQuizsVM;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
using FPLSP.Views.Shared;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout2))]
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/DoQuiz/{QuizIdInNonDecrypt}/{GetIdNonDecrypt}/{StudentIdInNonDecrypt}")]
    public partial class DoQuiz : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 315 "C:\Users\Nguyen Bui\source\repos\FPLSP3\FPLSP\Pages\DoQuiz\DoQuiz.razor"
       


    [Inject]
    public NavigationManager Navigation { get; set; }
    private List<Guid> lsidquestion { get; set; } = new List<Guid>();
    protected PopUpConfirm DeleConfirmation { set; get; }
    protected PopUpConfirm DeleConfirmation2 { set; get; }
    public async Task OnConfirmationDelete(bool deleteconfirmed)
    {
        if (deleteconfirmed)
        {
            if (Counturn >= 5)
            {
                Navigation.NavigateTo($"/detailclass/{GetId}/{StudentIdIn}");
            }
            else
            {
                await Submit();
                Navigation.NavigateTo($"/detailclass/{GetId}/{StudentIdIn}");
            }
        }
        else
        {
            Navigation.NavigateTo($"/detailclass/{GetId}/{StudentIdIn}");
        }
    }
    public async Task OnConfirmationDelete2(bool deleteconfirmed)
    {
        if (deleteconfirmed)
        {
            await Submit();
            await StartTimer();
            //Navigation.NavigateTo($"/detailclass/{GetId}/{StudentIdIn}");
        }
    }
    private async Task QuayLai()
    {
        DeleConfirmation.show();
    }
    private async Task QuayLaiKhongDuBoCauHoi()
    {
        Navigation.NavigateTo($"/detailclass/{GetId}/{StudentIdIn}");
    }
    private async Task Nopbai()
    {
        DeleConfirmation2.show();
    }
    private static System.Timers.Timer aTimer;
    private int counter;
    public async Task StartTimer()
    {
        counter = 60;
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }
    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        else
        {
            aTimer.Enabled = false;
        }
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    /// QuizIdIn Nhận IdQuiz khi chuyển vào làm Quiz
    /// </summary>
    public Guid QuizIdIn { get; set; }
    /// <summary>
    /// StudentIdIn Nhận Id của sinh viên khi chuyển vào làm Quiz
    /// </summary>
    ///

    public Guid StudentIdIn { get; set; }
    public string GetId { get; set; }

    [Parameter] public string GetIdNonDecrypt { get; set; }
    [Parameter] public string QuizIdInNonDecrypt { get; set; }
    [Parameter] public string StudentIdInNonDecrypt { get; set; }

    string QuizName;
    [Inject]
    public CryptoServices _cryptoServices { get; set; }
    [Inject] IDoQuizRepository _repository { get; set; }

    [Inject] IQuizUPRepo _repositoryquiz { get; set; }

    [Inject] IStudentQuizUPRepo _repository2 { get; set; }

    [Inject] IStudentUPRepo _repository3 { get; set; }
    private StudentUpDto _studentUpDto = new StudentUpDto();
    bool flag = false;
    public List<StudentQuizUPDtos> ListStudentQuiz { get; set; } = new List<StudentQuizUPDtos>();
    #region biến cho phần Gets
    /// <summary>
    /// QuizIdd: view model truyền về để lấy ListCaau hỏi
    /// </summary>
    public GetQuestionCollectionVm QuizIdd { get; set; } = new GetQuestionCollectionVm();
    /// <summary>
    /// ListQuestion chưa list câu hỏi của quizz
    /// </summary>
    public List<QuestionDto> ListQuestion { get; set; } = new List<QuestionDto>();
    #endregion

    #region biến cho phần Submit
    /// <summary>
    /// viewModel nhận câu trả lời của Sinh viên để gửi về Server khi Submit
    /// </summary>
    private DoQuizViewModel viewModel { get; set; } = new DoQuizViewModel();
    #endregion

    #region biến hỗ trợ UI
    /// <summary>
    /// CorrectAnswerQuantity điếm số câu trả lời đúng của sinh viên
    /// </summary>
    public double CorrectAnswerQuantity { get; set; } = 0;
    /// <summary>
    /// Scores: điểm quiz của sinh viên
    /// </summary>
    public double Scores { get; set; }
    /// Counturn : Số lần sinh viên làm quiz
    /// </summary>
    public int Counturn { get; set; }

    public int a { get; set; } = 0;

    public string DapAn { get; set; }

    /// <summary>
    /// QuestionNumber: hiển thị số thứ tự câu hỏi
    /// </summary>
    public int QuestionNumber { get; set; } = 0;
    #endregion


    #region su kien Cho Check Box
    /// <summary>
    /// AnSwersIdOfQuestion chứa list câu trả lời của các câu hỏi
    /// </summary>
    public List<AnswerQuestionViewModel> AnSwersIdOfQuestion { get; set; } = new List<AnswerQuestionViewModel>();
    /// <summary>
    /// thêm hoặc xóa IdAnswer theo  lựa chọn đáp an của sinh viên.
    /// </summary>
    /// <param name="quesId">Id Của câu hỏi</param>
    /// <param name="idAn">Id câu trả lời của câu hỏi trên</param>
    /// <param name="checkedValue"> bắt sự Event Onchange nếu Answer đó được chọn thì = true và ngược lại = false</param>
    public void CheckboxClicked(Guid quesId, Guid idAn, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!AnSwersIdOfQuestion[Index(quesId)].AnswerId.Contains(idAn))
            {
                AnSwersIdOfQuestion[Index(quesId)].AnswerId.Add(idAn);
                Troden(quesId);
            }
        }
        else
        {
            if (AnSwersIdOfQuestion[Index(quesId)].AnswerId.Contains(idAn))
            {
                AnSwersIdOfQuestion[Index(quesId)].AnswerId.Remove(idAn);
                lsidquestion.Remove(quesId);
            }
        }
        viewModel.QuestionIdCollection[Index(quesId)].AnswerId = AnSwersIdOfQuestion[Index(quesId)].AnswerId;

    }
    #endregion
    public string TestText { get; set; }
    public List<string> LstestText { get; set; }
    #region biến và function Event hỗ trợ Input Supply
    public string answerInput { get; set; } //chứa giá trị thay dồi khi nhập vào input.

    /// <summary>
    /// inputTextBox: chứa thẻ Input HTML dưới dạng chuối string
    /// </summary>
    private string inputTextBox { get; set; } = $"<input type=\"text\"  placeholder=\"..........................\" style=\"width:70px;background-color: salmon;\"/>";
    /// <summary>
    /// nhận giá trị người dung nhập vào theo Event OnInput.
    /// Nếu câu trả lời được nhập vào đúng với Đáp án thì sẽ được thêm vào câu trả lời của sinh viên
    /// </summary>
    /// <param name="quesId">Id của câu hỏi</param>
    /// <param name="Value"> nhận giá trị người dung nhập vào theo Event OnInput</param>

    public async void InsertAnswerRText(Guid quesId, ChangeEventArgs Value)
    {

        answerInput = Value.Value.ToString();
        a++;
        var indexQuesInListGetQues = ListQuestion.FindIndex(c => Guid.Equals(quesId, c.Id));

        var testss = answerInput.ToLower().Replace("  ", " ");
        var checkAnswerExited = ListQuestion[indexQuesInListGetQues].AnswerDtoCollection.Any(c => string.Equals(testss, c.Answer.ToLower().Replace("  ", " ")));
        if (checkAnswerExited)
        {
            var ansId = ListQuestion[indexQuesInListGetQues].AnswerDtoCollection.FirstOrDefault(c => string.Equals(testss, c.Answer.ToLower().Replace("  ", " "))).Id;
            if (!viewModel.QuestionIdCollection[Index(quesId)].AnswerId.Any(c => Guid.Equals(ansId, c))) viewModel.QuestionIdCollection[Index(quesId)].AnswerId.Add(ansId);

            //answerInput = "";
        }
        if (answerInput != "")
        {

            Troden(quesId);
        }
        else
        {
            for (int i = 0; i < a; i++)
            {
                lsidquestion.Remove(quesId);
            }
            a = 0;
        }
    }
    #endregion

    /// <summary>
    /// chạy khi load this page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        GetId = _cryptoServices.Decrypt(GetIdNonDecrypt.Replace("I0H", "/"));
        StudentIdIn = Guid.Parse(_cryptoServices.Decrypt(StudentIdInNonDecrypt.Replace("I0H", "/")));
        QuizIdIn = Guid.Parse(_cryptoServices.Decrypt(QuizIdInNonDecrypt.Replace("I0H", "/")));

        flag = true;
        var quizUP = await _repositoryquiz.GetQuizUp(QuizIdIn.ToString());
        QuizName = quizUP.QuizName;
        _studentUpDto = await _repository3.GetStudentUPById(StudentIdIn);
        ListStudentQuiz = await _repository2.GetAllAsync();
        Counturn = ListStudentQuiz.Where(c => c.QuizId == QuizIdIn && c.StudentId == StudentIdIn).Select(c => c.CounterTurn).FirstOrDefault();
        QuizIdd.QuizId = QuizIdIn;
        QuizIdd.StudentId = StudentIdIn;
        await GetData(QuizIdd);
        flag = false;
    }
    /// <summary>
    /// function cho nút Submit
    /// </summary>
    /// <returns> điểm  số câu trả lời đúng của Sinh viên </returns>
    private async Task Submit()
    {
        viewModel.StudentId = StudentIdIn;
        //Scores = await _repository.ListStudentQuiz(QuizIdIn, viewModel);
        Scores = await _repository.EventButtonSubmitAsync(QuizIdIn, viewModel);
        await GetData(QuizIdd);

    }
    /// <summary>
    /// function cho Event OnClick khi chọn đáp án kiểu câu hỏi chọn 1 đáp án
    /// Id câu trả lời sẽ được add vào list câu trả lời của câu hỏi đó
    /// </summary>
    /// <param name="anId">Íd câu trả lời sinh viên chọn</param>
    /// <param name="quesId"> Id câu hỏi</param>
    private void AddAnswerToListOneChoice(Guid anId, Guid quesId)
    {
        viewModel.QuestionIdCollection[Index(quesId)].AnswerId = new List<Guid>();
        viewModel.QuestionIdCollection[Index(quesId)].AnswerId.Add(anId);
        Troden(quesId);
    }
    /// <summary>
    /// tìm Index của câu hỏi trong viewModel.QuestionIdCollection
    /// </summary>
    /// <param name="quesId"> Id Câu hỏi</param>
    /// <returns></returns>
    private int Index(Guid quesId)
    {
        var dex = viewModel.QuestionIdCollection.FindIndex(c => Equals(quesId, c.QuestionId));
        return dex;
    }

    /// <summary>
    /// Gét Data câu hỏi của this Quiz
    /// </summary>
    /// <param name="QuizIdd"> truyền vào Id Student và Id Quiz</param>
    /// <returns></returns>
    private async Task GetData(GetQuestionCollectionVm QuizIdd)
    {
        flag = true;
        ListStudentQuiz = await _repository2.GetAllAsync();
        Counturn = ListStudentQuiz.Where(c => c.QuizId == QuizIdIn && c.StudentId == StudentIdIn).Select(c => c.CounterTurn).FirstOrDefault();
        CorrectAnswerQuantity = 0;
        ListQuestion = new List<QuestionDto>();
        viewModel = new DoQuizViewModel();
        AnSwersIdOfQuestion = new List<AnswerQuestionViewModel>();
        var result = await _repository.GetQuestionInQuizAsync(QuizIdd);
        Scores = result.Score;
        ListQuestion = result.QuestionCollectionGet;
        //LstestText = new List<string>();
        foreach (var ques in ListQuestion)
        {//máp câu đã trả lời của sinh viên add vào viewmodel
            var quesAns = new AnswerQuestionViewModel();
            quesAns.QuestionId = ques.Id;
            quesAns.AnswerId = ques.AnswerDtoCollection.Where(c => bool.Equals(true, c.StudentChoose)).Select(c => c.Id).ToList();
            quesAns.Answer = ques.AnswerDtoCollection.Where(c => bool.Equals(true, c.StudentChoose)).Select(c => c.Answer).ToList();
            AnSwersIdOfQuestion.Add(quesAns);
            viewModel.QuestionIdCollection.Add(quesAns);
            //LstestText.Add(TestText);
            if (ques.AnswerDtoCollection.Where(c => c.StudentChoose).Count() > 0)
            {
                for (int i = 0; i < ques.AnswerDtoCollection.Where(c => c.StudentChoose).Count(); i++)
                {
                    Troden(ques.Id);
                }
            }
        }

        if (string.IsNullOrEmpty(TestText))
        {
            TestText = "Nhập đáp án vào đây";
        }

        foreach (var ques in ListQuestion)
        {
            var listAnsCorrect = ques.AnswerDtoCollection.Where(ques => bool.Equals(true, ques.IsCorrect)).ToList();
            var listAnsChoose = ques.AnswerDtoCollection.Where(ques => bool.Equals(true, ques.StudentChoose)).ToList();
            if (listAnsCorrect.SequenceEqual(listAnsChoose))
            {// đếm số câu trả lời đúng của sinh viên in this quiz.
                CorrectAnswerQuantity++;
            }
        }
        flag = false;
    }
    private async Task Troden(Guid id)
    {
        lsidquestion.Add(id);
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
